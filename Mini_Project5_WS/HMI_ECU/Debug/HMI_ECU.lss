
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000027f8  0000288c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080011c  0080011c  00002948  2**0
                  ALLOC
  3 .stab         00002640  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d0  00000000  00000000  00004f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_9>
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__vector_19>
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 32       	cpi	r26, 0x22	; 34
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <main>
      8a:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <__fixunssfsi>:
      90:	ef 92       	push	r14
      92:	ff 92       	push	r15
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	7b 01       	movw	r14, r22
      9a:	8c 01       	movw	r16, r24
      9c:	20 e0       	ldi	r18, 0x00	; 0
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	5f e4       	ldi	r21, 0x4F	; 79
      a4:	e3 d2       	rcall	.+1478   	; 0x66c <__gesf2>
      a6:	88 23       	and	r24, r24
      a8:	7c f0       	brlt	.+30     	; 0xc8 <__fixunssfsi+0x38>
      aa:	c8 01       	movw	r24, r16
      ac:	b7 01       	movw	r22, r14
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	5f e4       	ldi	r21, 0x4F	; 79
      b6:	60 d1       	rcall	.+704    	; 0x378 <__subsf3>
      b8:	33 d3       	rcall	.+1638   	; 0x720 <__fixsfsi>
      ba:	9b 01       	movw	r18, r22
      bc:	ac 01       	movw	r20, r24
      be:	20 50       	subi	r18, 0x00	; 0
      c0:	30 40       	sbci	r19, 0x00	; 0
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	50 48       	sbci	r21, 0x80	; 128
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <__fixunssfsi+0x42>
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	29 d3       	rcall	.+1618   	; 0x720 <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	b9 01       	movw	r22, r18
      d4:	ca 01       	movw	r24, r20
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	08 95       	ret

000000e0 <_fpadd_parts>:
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e6 e7       	ldi	r30, 0x76	; 118
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__>
      ec:	dc 01       	movw	r26, r24
      ee:	2b 01       	movw	r4, r22
      f0:	fa 01       	movw	r30, r20
      f2:	9c 91       	ld	r25, X
      f4:	92 30       	cpi	r25, 0x02	; 2
      f6:	08 f4       	brcc	.+2      	; 0xfa <_fpadd_parts+0x1a>
      f8:	39 c1       	rjmp	.+626    	; 0x36c <_fpadd_parts+0x28c>
      fa:	eb 01       	movw	r28, r22
      fc:	88 81       	ld	r24, Y
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x24>
     102:	33 c1       	rjmp	.+614    	; 0x36a <_fpadd_parts+0x28a>
     104:	94 30       	cpi	r25, 0x04	; 4
     106:	69 f4       	brne	.+26     	; 0x122 <_fpadd_parts+0x42>
     108:	84 30       	cpi	r24, 0x04	; 4
     10a:	09 f0       	breq	.+2      	; 0x10e <_fpadd_parts+0x2e>
     10c:	2f c1       	rjmp	.+606    	; 0x36c <_fpadd_parts+0x28c>
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	9c 91       	ld	r25, X
     112:	11 97       	sbiw	r26, 0x01	; 1
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	98 17       	cp	r25, r24
     118:	09 f4       	brne	.+2      	; 0x11c <_fpadd_parts+0x3c>
     11a:	28 c1       	rjmp	.+592    	; 0x36c <_fpadd_parts+0x28c>
     11c:	ae e0       	ldi	r26, 0x0E	; 14
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	25 c1       	rjmp	.+586    	; 0x36c <_fpadd_parts+0x28c>
     122:	84 30       	cpi	r24, 0x04	; 4
     124:	09 f4       	brne	.+2      	; 0x128 <_fpadd_parts+0x48>
     126:	21 c1       	rjmp	.+578    	; 0x36a <_fpadd_parts+0x28a>
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	a9 f4       	brne	.+42     	; 0x156 <_fpadd_parts+0x76>
     12c:	92 30       	cpi	r25, 0x02	; 2
     12e:	09 f0       	breq	.+2      	; 0x132 <_fpadd_parts+0x52>
     130:	1d c1       	rjmp	.+570    	; 0x36c <_fpadd_parts+0x28c>
     132:	9a 01       	movw	r18, r20
     134:	ad 01       	movw	r20, r26
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	ea 01       	movw	r28, r20
     13a:	09 90       	ld	r0, Y+
     13c:	ae 01       	movw	r20, r28
     13e:	e9 01       	movw	r28, r18
     140:	09 92       	st	Y+, r0
     142:	9e 01       	movw	r18, r28
     144:	81 50       	subi	r24, 0x01	; 1
     146:	c1 f7       	brne	.-16     	; 0x138 <_fpadd_parts+0x58>
     148:	e2 01       	movw	r28, r4
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	9c 91       	ld	r25, X
     150:	89 23       	and	r24, r25
     152:	81 83       	std	Z+1, r24	; 0x01
     154:	08 c1       	rjmp	.+528    	; 0x366 <_fpadd_parts+0x286>
     156:	92 30       	cpi	r25, 0x02	; 2
     158:	09 f4       	brne	.+2      	; 0x15c <_fpadd_parts+0x7c>
     15a:	07 c1       	rjmp	.+526    	; 0x36a <_fpadd_parts+0x28a>
     15c:	12 96       	adiw	r26, 0x02	; 2
     15e:	2d 90       	ld	r2, X+
     160:	3c 90       	ld	r3, X
     162:	13 97       	sbiw	r26, 0x03	; 3
     164:	eb 01       	movw	r28, r22
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	14 96       	adiw	r26, 0x04	; 4
     16c:	ad 90       	ld	r10, X+
     16e:	bd 90       	ld	r11, X+
     170:	cd 90       	ld	r12, X+
     172:	dc 90       	ld	r13, X
     174:	17 97       	sbiw	r26, 0x07	; 7
     176:	ec 80       	ldd	r14, Y+4	; 0x04
     178:	fd 80       	ldd	r15, Y+5	; 0x05
     17a:	0e 81       	ldd	r16, Y+6	; 0x06
     17c:	1f 81       	ldd	r17, Y+7	; 0x07
     17e:	91 01       	movw	r18, r2
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	b9 01       	movw	r22, r18
     186:	37 ff       	sbrs	r19, 7
     188:	04 c0       	rjmp	.+8      	; 0x192 <_fpadd_parts+0xb2>
     18a:	66 27       	eor	r22, r22
     18c:	77 27       	eor	r23, r23
     18e:	62 1b       	sub	r22, r18
     190:	73 0b       	sbc	r23, r19
     192:	60 32       	cpi	r22, 0x20	; 32
     194:	71 05       	cpc	r23, r1
     196:	0c f0       	brlt	.+2      	; 0x19a <_fpadd_parts+0xba>
     198:	61 c0       	rjmp	.+194    	; 0x25c <_fpadd_parts+0x17c>
     19a:	12 16       	cp	r1, r18
     19c:	13 06       	cpc	r1, r19
     19e:	6c f5       	brge	.+90     	; 0x1fa <_fpadd_parts+0x11a>
     1a0:	37 01       	movw	r6, r14
     1a2:	48 01       	movw	r8, r16
     1a4:	06 2e       	mov	r0, r22
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xd0>
     1a8:	96 94       	lsr	r9
     1aa:	87 94       	ror	r8
     1ac:	77 94       	ror	r7
     1ae:	67 94       	ror	r6
     1b0:	0a 94       	dec	r0
     1b2:	d2 f7       	brpl	.-12     	; 0x1a8 <_fpadd_parts+0xc8>
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xe6>
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	44 1f       	adc	r20, r20
     1c4:	55 1f       	adc	r21, r21
     1c6:	6a 95       	dec	r22
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xde>
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	40 40       	sbci	r20, 0x00	; 0
     1d0:	50 40       	sbci	r21, 0x00	; 0
     1d2:	2e 21       	and	r18, r14
     1d4:	3f 21       	and	r19, r15
     1d6:	40 23       	and	r20, r16
     1d8:	51 23       	and	r21, r17
     1da:	21 15       	cp	r18, r1
     1dc:	31 05       	cpc	r19, r1
     1de:	41 05       	cpc	r20, r1
     1e0:	51 05       	cpc	r21, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <_fpadd_parts+0x10c>
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	79 01       	movw	r14, r18
     1ee:	8a 01       	movw	r16, r20
     1f0:	e6 28       	or	r14, r6
     1f2:	f7 28       	or	r15, r7
     1f4:	08 29       	or	r16, r8
     1f6:	19 29       	or	r17, r9
     1f8:	3c c0       	rjmp	.+120    	; 0x272 <_fpadd_parts+0x192>
     1fa:	23 2b       	or	r18, r19
     1fc:	d1 f1       	breq	.+116    	; 0x272 <_fpadd_parts+0x192>
     1fe:	26 0e       	add	r2, r22
     200:	37 1e       	adc	r3, r23
     202:	35 01       	movw	r6, r10
     204:	46 01       	movw	r8, r12
     206:	06 2e       	mov	r0, r22
     208:	04 c0       	rjmp	.+8      	; 0x212 <_fpadd_parts+0x132>
     20a:	96 94       	lsr	r9
     20c:	87 94       	ror	r8
     20e:	77 94       	ror	r7
     210:	67 94       	ror	r6
     212:	0a 94       	dec	r0
     214:	d2 f7       	brpl	.-12     	; 0x20a <_fpadd_parts+0x12a>
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x148>
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	44 1f       	adc	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x140>
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	30 40       	sbci	r19, 0x00	; 0
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	50 40       	sbci	r21, 0x00	; 0
     234:	2a 21       	and	r18, r10
     236:	3b 21       	and	r19, r11
     238:	4c 21       	and	r20, r12
     23a:	5d 21       	and	r21, r13
     23c:	21 15       	cp	r18, r1
     23e:	31 05       	cpc	r19, r1
     240:	41 05       	cpc	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	21 f0       	breq	.+8      	; 0x24e <_fpadd_parts+0x16e>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	59 01       	movw	r10, r18
     250:	6a 01       	movw	r12, r20
     252:	a6 28       	or	r10, r6
     254:	b7 28       	or	r11, r7
     256:	c8 28       	or	r12, r8
     258:	d9 28       	or	r13, r9
     25a:	0b c0       	rjmp	.+22     	; 0x272 <_fpadd_parts+0x192>
     25c:	82 15       	cp	r24, r2
     25e:	93 05       	cpc	r25, r3
     260:	2c f0       	brlt	.+10     	; 0x26c <_fpadd_parts+0x18c>
     262:	1c 01       	movw	r2, r24
     264:	aa 24       	eor	r10, r10
     266:	bb 24       	eor	r11, r11
     268:	65 01       	movw	r12, r10
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_fpadd_parts+0x192>
     26c:	ee 24       	eor	r14, r14
     26e:	ff 24       	eor	r15, r15
     270:	87 01       	movw	r16, r14
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	9c 91       	ld	r25, X
     276:	d2 01       	movw	r26, r4
     278:	11 96       	adiw	r26, 0x01	; 1
     27a:	8c 91       	ld	r24, X
     27c:	98 17       	cp	r25, r24
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x1a2>
     280:	45 c0       	rjmp	.+138    	; 0x30c <_fpadd_parts+0x22c>
     282:	99 23       	and	r25, r25
     284:	39 f0       	breq	.+14     	; 0x294 <_fpadd_parts+0x1b4>
     286:	a8 01       	movw	r20, r16
     288:	97 01       	movw	r18, r14
     28a:	2a 19       	sub	r18, r10
     28c:	3b 09       	sbc	r19, r11
     28e:	4c 09       	sbc	r20, r12
     290:	5d 09       	sbc	r21, r13
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <_fpadd_parts+0x1c0>
     294:	a6 01       	movw	r20, r12
     296:	95 01       	movw	r18, r10
     298:	2e 19       	sub	r18, r14
     29a:	3f 09       	sbc	r19, r15
     29c:	40 0b       	sbc	r20, r16
     29e:	51 0b       	sbc	r21, r17
     2a0:	57 fd       	sbrc	r21, 7
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_fpadd_parts+0x1d4>
     2a4:	11 82       	std	Z+1, r1	; 0x01
     2a6:	33 82       	std	Z+3, r3	; 0x03
     2a8:	22 82       	std	Z+2, r2	; 0x02
     2aa:	24 83       	std	Z+4, r18	; 0x04
     2ac:	35 83       	std	Z+5, r19	; 0x05
     2ae:	46 83       	std	Z+6, r20	; 0x06
     2b0:	57 83       	std	Z+7, r21	; 0x07
     2b2:	1d c0       	rjmp	.+58     	; 0x2ee <_fpadd_parts+0x20e>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	33 82       	std	Z+3, r3	; 0x03
     2ba:	22 82       	std	Z+2, r2	; 0x02
     2bc:	88 27       	eor	r24, r24
     2be:	99 27       	eor	r25, r25
     2c0:	dc 01       	movw	r26, r24
     2c2:	82 1b       	sub	r24, r18
     2c4:	93 0b       	sbc	r25, r19
     2c6:	a4 0b       	sbc	r26, r20
     2c8:	b5 0b       	sbc	r27, r21
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	a6 83       	std	Z+6, r26	; 0x06
     2d0:	b7 83       	std	Z+7, r27	; 0x07
     2d2:	0d c0       	rjmp	.+26     	; 0x2ee <_fpadd_parts+0x20e>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	44 1f       	adc	r20, r20
     2da:	55 1f       	adc	r21, r21
     2dc:	24 83       	std	Z+4, r18	; 0x04
     2de:	35 83       	std	Z+5, r19	; 0x05
     2e0:	46 83       	std	Z+6, r20	; 0x06
     2e2:	57 83       	std	Z+7, r21	; 0x07
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	24 81       	ldd	r18, Z+4	; 0x04
     2f0:	35 81       	ldd	r19, Z+5	; 0x05
     2f2:	46 81       	ldd	r20, Z+6	; 0x06
     2f4:	57 81       	ldd	r21, Z+7	; 0x07
     2f6:	da 01       	movw	r26, r20
     2f8:	c9 01       	movw	r24, r18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	a1 09       	sbc	r26, r1
     2fe:	b1 09       	sbc	r27, r1
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	9f 4f       	sbci	r25, 0xFF	; 255
     304:	af 4f       	sbci	r26, 0xFF	; 255
     306:	bf 43       	sbci	r27, 0x3F	; 63
     308:	28 f3       	brcs	.-54     	; 0x2d4 <_fpadd_parts+0x1f4>
     30a:	0b c0       	rjmp	.+22     	; 0x322 <_fpadd_parts+0x242>
     30c:	91 83       	std	Z+1, r25	; 0x01
     30e:	33 82       	std	Z+3, r3	; 0x03
     310:	22 82       	std	Z+2, r2	; 0x02
     312:	ea 0c       	add	r14, r10
     314:	fb 1c       	adc	r15, r11
     316:	0c 1d       	adc	r16, r12
     318:	1d 1d       	adc	r17, r13
     31a:	e4 82       	std	Z+4, r14	; 0x04
     31c:	f5 82       	std	Z+5, r15	; 0x05
     31e:	06 83       	std	Z+6, r16	; 0x06
     320:	17 83       	std	Z+7, r17	; 0x07
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 83       	st	Z, r24
     326:	24 81       	ldd	r18, Z+4	; 0x04
     328:	35 81       	ldd	r19, Z+5	; 0x05
     32a:	46 81       	ldd	r20, Z+6	; 0x06
     32c:	57 81       	ldd	r21, Z+7	; 0x07
     32e:	57 ff       	sbrs	r21, 7
     330:	1a c0       	rjmp	.+52     	; 0x366 <_fpadd_parts+0x286>
     332:	c9 01       	movw	r24, r18
     334:	aa 27       	eor	r26, r26
     336:	97 fd       	sbrc	r25, 7
     338:	a0 95       	com	r26
     33a:	ba 2f       	mov	r27, r26
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 70       	andi	r25, 0x00	; 0
     340:	a0 70       	andi	r26, 0x00	; 0
     342:	b0 70       	andi	r27, 0x00	; 0
     344:	56 95       	lsr	r21
     346:	47 95       	ror	r20
     348:	37 95       	ror	r19
     34a:	27 95       	ror	r18
     34c:	82 2b       	or	r24, r18
     34e:	93 2b       	or	r25, r19
     350:	a4 2b       	or	r26, r20
     352:	b5 2b       	or	r27, r21
     354:	84 83       	std	Z+4, r24	; 0x04
     356:	95 83       	std	Z+5, r25	; 0x05
     358:	a6 83       	std	Z+6, r26	; 0x06
     35a:	b7 83       	std	Z+7, r27	; 0x07
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	93 83       	std	Z+3, r25	; 0x03
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	df 01       	movw	r26, r30
     368:	01 c0       	rjmp	.+2      	; 0x36c <_fpadd_parts+0x28c>
     36a:	d2 01       	movw	r26, r4
     36c:	cd 01       	movw	r24, r26
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	e2 e1       	ldi	r30, 0x12	; 18
     374:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__>

00000378 <__subsf3>:
     378:	a0 e2       	ldi	r26, 0x20	; 32
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 ec       	ldi	r30, 0xC2	; 194
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     384:	69 83       	std	Y+1, r22	; 0x01
     386:	7a 83       	std	Y+2, r23	; 0x02
     388:	8b 83       	std	Y+3, r24	; 0x03
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	2d 83       	std	Y+5, r18	; 0x05
     38e:	3e 83       	std	Y+6, r19	; 0x06
     390:	4f 83       	std	Y+7, r20	; 0x07
     392:	58 87       	std	Y+8, r21	; 0x08
     394:	e9 e0       	ldi	r30, 0x09	; 9
     396:	ee 2e       	mov	r14, r30
     398:	f1 2c       	mov	r15, r1
     39a:	ec 0e       	add	r14, r28
     39c:	fd 1e       	adc	r15, r29
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	b7 01       	movw	r22, r14
     3a4:	e5 d2       	rcall	.+1482   	; 0x970 <__unpack_f>
     3a6:	8e 01       	movw	r16, r28
     3a8:	0f 5e       	subi	r16, 0xEF	; 239
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	b8 01       	movw	r22, r16
     3b2:	de d2       	rcall	.+1468   	; 0x970 <__unpack_f>
     3b4:	8a 89       	ldd	r24, Y+18	; 0x12
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	89 27       	eor	r24, r25
     3ba:	8a 8b       	std	Y+18, r24	; 0x12
     3bc:	c7 01       	movw	r24, r14
     3be:	b8 01       	movw	r22, r16
     3c0:	ae 01       	movw	r20, r28
     3c2:	47 5e       	subi	r20, 0xE7	; 231
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	8c de       	rcall	.-744    	; 0xe0 <_fpadd_parts>
     3c8:	fe d1       	rcall	.+1020   	; 0x7c6 <__pack_f>
     3ca:	a0 96       	adiw	r28, 0x20	; 32
     3cc:	e6 e0       	ldi	r30, 0x06	; 6
     3ce:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

000003d2 <__addsf3>:
     3d2:	a0 e2       	ldi	r26, 0x20	; 32
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ef ee       	ldi	r30, 0xEF	; 239
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	7a 83       	std	Y+2, r23	; 0x02
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	2d 83       	std	Y+5, r18	; 0x05
     3e8:	3e 83       	std	Y+6, r19	; 0x06
     3ea:	4f 83       	std	Y+7, r20	; 0x07
     3ec:	58 87       	std	Y+8, r21	; 0x08
     3ee:	f9 e0       	ldi	r31, 0x09	; 9
     3f0:	ef 2e       	mov	r14, r31
     3f2:	f1 2c       	mov	r15, r1
     3f4:	ec 0e       	add	r14, r28
     3f6:	fd 1e       	adc	r15, r29
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	b7 01       	movw	r22, r14
     3fe:	b8 d2       	rcall	.+1392   	; 0x970 <__unpack_f>
     400:	8e 01       	movw	r16, r28
     402:	0f 5e       	subi	r16, 0xEF	; 239
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	05 96       	adiw	r24, 0x05	; 5
     40a:	b8 01       	movw	r22, r16
     40c:	b1 d2       	rcall	.+1378   	; 0x970 <__unpack_f>
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	63 de       	rcall	.-826    	; 0xe0 <_fpadd_parts>
     41a:	d5 d1       	rcall	.+938    	; 0x7c6 <__pack_f>
     41c:	a0 96       	adiw	r28, 0x20	; 32
     41e:	e6 e0       	ldi	r30, 0x06	; 6
     420:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

00000424 <__mulsf3>:
     424:	a0 e2       	ldi	r26, 0x20	; 32
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e8 e1       	ldi	r30, 0x18	; 24
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__>
     430:	69 83       	std	Y+1, r22	; 0x01
     432:	7a 83       	std	Y+2, r23	; 0x02
     434:	8b 83       	std	Y+3, r24	; 0x03
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	2d 83       	std	Y+5, r18	; 0x05
     43a:	3e 83       	std	Y+6, r19	; 0x06
     43c:	4f 83       	std	Y+7, r20	; 0x07
     43e:	58 87       	std	Y+8, r21	; 0x08
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	be 01       	movw	r22, r28
     446:	67 5f       	subi	r22, 0xF7	; 247
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	92 d2       	rcall	.+1316   	; 0x970 <__unpack_f>
     44c:	ce 01       	movw	r24, r28
     44e:	05 96       	adiw	r24, 0x05	; 5
     450:	be 01       	movw	r22, r28
     452:	6f 5e       	subi	r22, 0xEF	; 239
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	8c d2       	rcall	.+1304   	; 0x970 <__unpack_f>
     458:	99 85       	ldd	r25, Y+9	; 0x09
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	88 f0       	brcs	.+34     	; 0x480 <__stack+0x21>
     45e:	89 89       	ldd	r24, Y+17	; 0x11
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	c8 f0       	brcs	.+50     	; 0x496 <__stack+0x37>
     464:	94 30       	cpi	r25, 0x04	; 4
     466:	19 f4       	brne	.+6      	; 0x46e <__stack+0xf>
     468:	82 30       	cpi	r24, 0x02	; 2
     46a:	51 f4       	brne	.+20     	; 0x480 <__stack+0x21>
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__stack+0x17>
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	29 f4       	brne	.+10     	; 0x47c <__stack+0x1d>
     472:	92 30       	cpi	r25, 0x02	; 2
     474:	81 f4       	brne	.+32     	; 0x496 <__stack+0x37>
     476:	8e e0       	ldi	r24, 0x0E	; 14
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	c6 c0       	rjmp	.+396    	; 0x608 <__stack+0x1a9>
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	49 f4       	brne	.+18     	; 0x492 <__stack+0x33>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	9a 85       	ldd	r25, Y+10	; 0x0a
     484:	8a 89       	ldd	r24, Y+18	; 0x12
     486:	98 13       	cpse	r25, r24
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	2a 87       	std	Y+10, r18	; 0x0a
     48c:	ce 01       	movw	r24, r28
     48e:	09 96       	adiw	r24, 0x09	; 9
     490:	bb c0       	rjmp	.+374    	; 0x608 <__stack+0x1a9>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	49 f4       	brne	.+18     	; 0x4a8 <__stack+0x49>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	98 13       	cpse	r25, r24
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	2a 8b       	std	Y+18, r18	; 0x12
     4a2:	ce 01       	movw	r24, r28
     4a4:	41 96       	adiw	r24, 0x11	; 17
     4a6:	b0 c0       	rjmp	.+352    	; 0x608 <__stack+0x1a9>
     4a8:	2d 84       	ldd	r2, Y+13	; 0x0d
     4aa:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ac:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ae:	58 88       	ldd	r5, Y+16	; 0x10
     4b0:	6d 88       	ldd	r6, Y+21	; 0x15
     4b2:	7e 88       	ldd	r7, Y+22	; 0x16
     4b4:	8f 88       	ldd	r8, Y+23	; 0x17
     4b6:	98 8c       	ldd	r9, Y+24	; 0x18
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	87 01       	movw	r16, r14
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	65 01       	movw	r12, r10
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	c1 01       	movw	r24, r2
     4d2:	81 70       	andi	r24, 0x01	; 1
     4d4:	90 70       	andi	r25, 0x00	; 0
     4d6:	89 2b       	or	r24, r25
     4d8:	e9 f0       	breq	.+58     	; 0x514 <__stack+0xb5>
     4da:	e6 0c       	add	r14, r6
     4dc:	f7 1c       	adc	r15, r7
     4de:	08 1d       	adc	r16, r8
     4e0:	19 1d       	adc	r17, r9
     4e2:	9a 01       	movw	r18, r20
     4e4:	ab 01       	movw	r20, r22
     4e6:	2a 0d       	add	r18, r10
     4e8:	3b 1d       	adc	r19, r11
     4ea:	4c 1d       	adc	r20, r12
     4ec:	5d 1d       	adc	r21, r13
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e6 14       	cp	r14, r6
     4f8:	f7 04       	cpc	r15, r7
     4fa:	08 05       	cpc	r16, r8
     4fc:	19 05       	cpc	r17, r9
     4fe:	20 f4       	brcc	.+8      	; 0x508 <__stack+0xa9>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	ba 01       	movw	r22, r20
     50a:	a9 01       	movw	r20, r18
     50c:	48 0f       	add	r20, r24
     50e:	59 1f       	adc	r21, r25
     510:	6a 1f       	adc	r22, r26
     512:	7b 1f       	adc	r23, r27
     514:	aa 0c       	add	r10, r10
     516:	bb 1c       	adc	r11, r11
     518:	cc 1c       	adc	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	97 fe       	sbrs	r9, 7
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__stack+0xd1>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	a8 2a       	or	r10, r24
     52a:	b9 2a       	or	r11, r25
     52c:	ca 2a       	or	r12, r26
     52e:	db 2a       	or	r13, r27
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	e0 32       	cpi	r30, 0x20	; 32
     534:	f1 05       	cpc	r31, r1
     536:	49 f0       	breq	.+18     	; 0x54a <__stack+0xeb>
     538:	66 0c       	add	r6, r6
     53a:	77 1c       	adc	r7, r7
     53c:	88 1c       	adc	r8, r8
     53e:	99 1c       	adc	r9, r9
     540:	56 94       	lsr	r5
     542:	47 94       	ror	r4
     544:	37 94       	ror	r3
     546:	27 94       	ror	r2
     548:	c3 cf       	rjmp	.-122    	; 0x4d0 <__stack+0x71>
     54a:	fa 85       	ldd	r31, Y+10	; 0x0a
     54c:	ea 89       	ldd	r30, Y+18	; 0x12
     54e:	2b 89       	ldd	r18, Y+19	; 0x13
     550:	3c 89       	ldd	r19, Y+20	; 0x14
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	28 0f       	add	r18, r24
     558:	39 1f       	adc	r19, r25
     55a:	2e 5f       	subi	r18, 0xFE	; 254
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x12f>
     560:	ca 01       	movw	r24, r20
     562:	81 70       	andi	r24, 0x01	; 1
     564:	90 70       	andi	r25, 0x00	; 0
     566:	89 2b       	or	r24, r25
     568:	61 f0       	breq	.+24     	; 0x582 <__stack+0x123>
     56a:	16 95       	lsr	r17
     56c:	07 95       	ror	r16
     56e:	f7 94       	ror	r15
     570:	e7 94       	ror	r14
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e8       	ldi	r27, 0x80	; 128
     57a:	e8 2a       	or	r14, r24
     57c:	f9 2a       	or	r15, r25
     57e:	0a 2b       	or	r16, r26
     580:	1b 2b       	or	r17, r27
     582:	76 95       	lsr	r23
     584:	67 95       	ror	r22
     586:	57 95       	ror	r21
     588:	47 95       	ror	r20
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	77 fd       	sbrc	r23, 7
     590:	e7 cf       	rjmp	.-50     	; 0x560 <__stack+0x101>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <__stack+0x14d>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	17 fd       	sbrc	r17, 7
     59e:	41 60       	ori	r20, 0x01	; 1
     5a0:	ee 0c       	add	r14, r14
     5a2:	ff 1c       	adc	r15, r15
     5a4:	00 1f       	adc	r16, r16
     5a6:	11 1f       	adc	r17, r17
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	30 40       	sbci	r19, 0x00	; 0
     5ac:	40 30       	cpi	r20, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	59 07       	cpc	r21, r25
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	69 07       	cpc	r22, r25
     5b6:	90 e4       	ldi	r25, 0x40	; 64
     5b8:	79 07       	cpc	r23, r25
     5ba:	60 f3       	brcs	.-40     	; 0x594 <__stack+0x135>
     5bc:	2b 8f       	std	Y+27, r18	; 0x1b
     5be:	3c 8f       	std	Y+28, r19	; 0x1c
     5c0:	db 01       	movw	r26, r22
     5c2:	ca 01       	movw	r24, r20
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__stack+0x18f>
     5d6:	47 fd       	sbrc	r20, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__stack+0x18f>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__stack+0x18f>
     5e4:	40 5c       	subi	r20, 0xC0	; 192
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	40 78       	andi	r20, 0x80	; 128
     5ee:	1a 8e       	std	Y+26, r1	; 0x1a
     5f0:	fe 17       	cp	r31, r30
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <__stack+0x199>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8a 8f       	std	Y+26, r24	; 0x1a
     5f8:	4d 8f       	std	Y+29, r20	; 0x1d
     5fa:	5e 8f       	std	Y+30, r21	; 0x1e
     5fc:	6f 8f       	std	Y+31, r22	; 0x1f
     5fe:	78 a3       	std	Y+32, r23	; 0x20
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	89 8f       	std	Y+25, r24	; 0x19
     604:	ce 01       	movw	r24, r28
     606:	49 96       	adiw	r24, 0x19	; 25
     608:	de d0       	rcall	.+444    	; 0x7c6 <__pack_f>
     60a:	a0 96       	adiw	r28, 0x20	; 32
     60c:	e2 e1       	ldi	r30, 0x12	; 18
     60e:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__>

00000612 <__gtsf2>:
     612:	a8 e1       	ldi	r26, 0x18	; 24
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ef e0       	ldi	r30, 0x0F	; 15
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     61e:	69 83       	std	Y+1, r22	; 0x01
     620:	7a 83       	std	Y+2, r23	; 0x02
     622:	8b 83       	std	Y+3, r24	; 0x03
     624:	9c 83       	std	Y+4, r25	; 0x04
     626:	2d 83       	std	Y+5, r18	; 0x05
     628:	3e 83       	std	Y+6, r19	; 0x06
     62a:	4f 83       	std	Y+7, r20	; 0x07
     62c:	58 87       	std	Y+8, r21	; 0x08
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	e8 2e       	mov	r14, r24
     632:	f1 2c       	mov	r15, r1
     634:	ec 0e       	add	r14, r28
     636:	fd 1e       	adc	r15, r29
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	b7 01       	movw	r22, r14
     63e:	98 d1       	rcall	.+816    	; 0x970 <__unpack_f>
     640:	8e 01       	movw	r16, r28
     642:	0f 5e       	subi	r16, 0xEF	; 239
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	ce 01       	movw	r24, r28
     648:	05 96       	adiw	r24, 0x05	; 5
     64a:	b8 01       	movw	r22, r16
     64c:	91 d1       	rcall	.+802    	; 0x970 <__unpack_f>
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	38 f0       	brcs	.+14     	; 0x662 <__gtsf2+0x50>
     654:	89 89       	ldd	r24, Y+17	; 0x11
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	20 f0       	brcs	.+8      	; 0x662 <__gtsf2+0x50>
     65a:	c7 01       	movw	r24, r14
     65c:	b8 01       	movw	r22, r16
     65e:	00 d2       	rcall	.+1024   	; 0xa60 <__fpcmp_parts_f>
     660:	01 c0       	rjmp	.+2      	; 0x664 <__gtsf2+0x52>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	68 96       	adiw	r28, 0x18	; 24
     666:	e6 e0       	ldi	r30, 0x06	; 6
     668:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

0000066c <__gesf2>:
     66c:	a8 e1       	ldi	r26, 0x18	; 24
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	ec e3       	ldi	r30, 0x3C	; 60
     672:	f3 e0       	ldi	r31, 0x03	; 3
     674:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     678:	69 83       	std	Y+1, r22	; 0x01
     67a:	7a 83       	std	Y+2, r23	; 0x02
     67c:	8b 83       	std	Y+3, r24	; 0x03
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	2d 83       	std	Y+5, r18	; 0x05
     682:	3e 83       	std	Y+6, r19	; 0x06
     684:	4f 83       	std	Y+7, r20	; 0x07
     686:	58 87       	std	Y+8, r21	; 0x08
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	e8 2e       	mov	r14, r24
     68c:	f1 2c       	mov	r15, r1
     68e:	ec 0e       	add	r14, r28
     690:	fd 1e       	adc	r15, r29
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	b7 01       	movw	r22, r14
     698:	6b d1       	rcall	.+726    	; 0x970 <__unpack_f>
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5e       	subi	r16, 0xEF	; 239
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	b8 01       	movw	r22, r16
     6a6:	64 d1       	rcall	.+712    	; 0x970 <__unpack_f>
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	38 f0       	brcs	.+14     	; 0x6bc <__gesf2+0x50>
     6ae:	89 89       	ldd	r24, Y+17	; 0x11
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	20 f0       	brcs	.+8      	; 0x6bc <__gesf2+0x50>
     6b4:	c7 01       	movw	r24, r14
     6b6:	b8 01       	movw	r22, r16
     6b8:	d3 d1       	rcall	.+934    	; 0xa60 <__fpcmp_parts_f>
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <__gesf2+0x52>
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	68 96       	adiw	r28, 0x18	; 24
     6c0:	e6 e0       	ldi	r30, 0x06	; 6
     6c2:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

000006c6 <__ltsf2>:
     6c6:	a8 e1       	ldi	r26, 0x18	; 24
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e9 e6       	ldi	r30, 0x69	; 105
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     6d2:	69 83       	std	Y+1, r22	; 0x01
     6d4:	7a 83       	std	Y+2, r23	; 0x02
     6d6:	8b 83       	std	Y+3, r24	; 0x03
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	2d 83       	std	Y+5, r18	; 0x05
     6dc:	3e 83       	std	Y+6, r19	; 0x06
     6de:	4f 83       	std	Y+7, r20	; 0x07
     6e0:	58 87       	std	Y+8, r21	; 0x08
     6e2:	89 e0       	ldi	r24, 0x09	; 9
     6e4:	e8 2e       	mov	r14, r24
     6e6:	f1 2c       	mov	r15, r1
     6e8:	ec 0e       	add	r14, r28
     6ea:	fd 1e       	adc	r15, r29
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	b7 01       	movw	r22, r14
     6f2:	3e d1       	rcall	.+636    	; 0x970 <__unpack_f>
     6f4:	8e 01       	movw	r16, r28
     6f6:	0f 5e       	subi	r16, 0xEF	; 239
     6f8:	1f 4f       	sbci	r17, 0xFF	; 255
     6fa:	ce 01       	movw	r24, r28
     6fc:	05 96       	adiw	r24, 0x05	; 5
     6fe:	b8 01       	movw	r22, r16
     700:	37 d1       	rcall	.+622    	; 0x970 <__unpack_f>
     702:	89 85       	ldd	r24, Y+9	; 0x09
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	38 f0       	brcs	.+14     	; 0x716 <__ltsf2+0x50>
     708:	89 89       	ldd	r24, Y+17	; 0x11
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	20 f0       	brcs	.+8      	; 0x716 <__ltsf2+0x50>
     70e:	c7 01       	movw	r24, r14
     710:	b8 01       	movw	r22, r16
     712:	a6 d1       	rcall	.+844    	; 0xa60 <__fpcmp_parts_f>
     714:	01 c0       	rjmp	.+2      	; 0x718 <__ltsf2+0x52>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	68 96       	adiw	r28, 0x18	; 24
     71a:	e6 e0       	ldi	r30, 0x06	; 6
     71c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

00000720 <__fixsfsi>:
     720:	ac e0       	ldi	r26, 0x0C	; 12
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e6 e9       	ldi	r30, 0x96	; 150
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__+0x20>
     72c:	69 83       	std	Y+1, r22	; 0x01
     72e:	7a 83       	std	Y+2, r23	; 0x02
     730:	8b 83       	std	Y+3, r24	; 0x03
     732:	9c 83       	std	Y+4, r25	; 0x04
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	be 01       	movw	r22, r28
     73a:	6b 5f       	subi	r22, 0xFB	; 251
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	18 d1       	rcall	.+560    	; 0x970 <__unpack_f>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	61 f1       	breq	.+88     	; 0x79e <__fixsfsi+0x7e>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	50 f1       	brcs	.+84     	; 0x79e <__fixsfsi+0x7e>
     74a:	84 30       	cpi	r24, 0x04	; 4
     74c:	21 f4       	brne	.+8      	; 0x756 <__fixsfsi+0x36>
     74e:	8e 81       	ldd	r24, Y+6	; 0x06
     750:	88 23       	and	r24, r24
     752:	51 f1       	breq	.+84     	; 0x7a8 <__fixsfsi+0x88>
     754:	2e c0       	rjmp	.+92     	; 0x7b2 <__fixsfsi+0x92>
     756:	2f 81       	ldd	r18, Y+7	; 0x07
     758:	38 85       	ldd	r19, Y+8	; 0x08
     75a:	37 fd       	sbrc	r19, 7
     75c:	20 c0       	rjmp	.+64     	; 0x79e <__fixsfsi+0x7e>
     75e:	6e 81       	ldd	r22, Y+6	; 0x06
     760:	2f 31       	cpi	r18, 0x1F	; 31
     762:	31 05       	cpc	r19, r1
     764:	1c f0       	brlt	.+6      	; 0x76c <__fixsfsi+0x4c>
     766:	66 23       	and	r22, r22
     768:	f9 f0       	breq	.+62     	; 0x7a8 <__fixsfsi+0x88>
     76a:	23 c0       	rjmp	.+70     	; 0x7b2 <__fixsfsi+0x92>
     76c:	8e e1       	ldi	r24, 0x1E	; 30
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	82 1b       	sub	r24, r18
     772:	93 0b       	sbc	r25, r19
     774:	29 85       	ldd	r18, Y+9	; 0x09
     776:	3a 85       	ldd	r19, Y+10	; 0x0a
     778:	4b 85       	ldd	r20, Y+11	; 0x0b
     77a:	5c 85       	ldd	r21, Y+12	; 0x0c
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__fixsfsi+0x66>
     77e:	56 95       	lsr	r21
     780:	47 95       	ror	r20
     782:	37 95       	ror	r19
     784:	27 95       	ror	r18
     786:	8a 95       	dec	r24
     788:	d2 f7       	brpl	.-12     	; 0x77e <__fixsfsi+0x5e>
     78a:	66 23       	and	r22, r22
     78c:	b1 f0       	breq	.+44     	; 0x7ba <__fixsfsi+0x9a>
     78e:	50 95       	com	r21
     790:	40 95       	com	r20
     792:	30 95       	com	r19
     794:	21 95       	neg	r18
     796:	3f 4f       	sbci	r19, 0xFF	; 255
     798:	4f 4f       	sbci	r20, 0xFF	; 255
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	0e c0       	rjmp	.+28     	; 0x7ba <__fixsfsi+0x9a>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__fixsfsi+0x9a>
     7a8:	2f ef       	ldi	r18, 0xFF	; 255
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	4f ef       	ldi	r20, 0xFF	; 255
     7ae:	5f e7       	ldi	r21, 0x7F	; 127
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x9a>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e8       	ldi	r21, 0x80	; 128
     7ba:	b9 01       	movw	r22, r18
     7bc:	ca 01       	movw	r24, r20
     7be:	2c 96       	adiw	r28, 0x0c	; 12
     7c0:	e2 e0       	ldi	r30, 0x02	; 2
     7c2:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__+0x20>

000007c6 <__pack_f>:
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	fc 01       	movw	r30, r24
     7d2:	e4 80       	ldd	r14, Z+4	; 0x04
     7d4:	f5 80       	ldd	r15, Z+5	; 0x05
     7d6:	06 81       	ldd	r16, Z+6	; 0x06
     7d8:	17 81       	ldd	r17, Z+7	; 0x07
     7da:	d1 80       	ldd	r13, Z+1	; 0x01
     7dc:	80 81       	ld	r24, Z
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	48 f4       	brcc	.+18     	; 0x7f4 <__pack_f+0x2e>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e1       	ldi	r26, 0x10	; 16
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	e8 2a       	or	r14, r24
     7ec:	f9 2a       	or	r15, r25
     7ee:	0a 2b       	or	r16, r26
     7f0:	1b 2b       	or	r17, r27
     7f2:	a5 c0       	rjmp	.+330    	; 0x93e <__pack_f+0x178>
     7f4:	84 30       	cpi	r24, 0x04	; 4
     7f6:	09 f4       	brne	.+2      	; 0x7fa <__pack_f+0x34>
     7f8:	9f c0       	rjmp	.+318    	; 0x938 <__pack_f+0x172>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	21 f4       	brne	.+8      	; 0x806 <__pack_f+0x40>
     7fe:	ee 24       	eor	r14, r14
     800:	ff 24       	eor	r15, r15
     802:	87 01       	movw	r16, r14
     804:	05 c0       	rjmp	.+10     	; 0x810 <__pack_f+0x4a>
     806:	e1 14       	cp	r14, r1
     808:	f1 04       	cpc	r15, r1
     80a:	01 05       	cpc	r16, r1
     80c:	11 05       	cpc	r17, r1
     80e:	19 f4       	brne	.+6      	; 0x816 <__pack_f+0x50>
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	96 c0       	rjmp	.+300    	; 0x942 <__pack_f+0x17c>
     816:	62 81       	ldd	r22, Z+2	; 0x02
     818:	73 81       	ldd	r23, Z+3	; 0x03
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	62 38       	cpi	r22, 0x82	; 130
     81e:	79 07       	cpc	r23, r25
     820:	0c f0       	brlt	.+2      	; 0x824 <__pack_f+0x5e>
     822:	5b c0       	rjmp	.+182    	; 0x8da <__pack_f+0x114>
     824:	22 e8       	ldi	r18, 0x82	; 130
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	26 1b       	sub	r18, r22
     82a:	37 0b       	sbc	r19, r23
     82c:	2a 31       	cpi	r18, 0x1A	; 26
     82e:	31 05       	cpc	r19, r1
     830:	2c f0       	brlt	.+10     	; 0x83c <__pack_f+0x76>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	2a c0       	rjmp	.+84     	; 0x890 <__pack_f+0xca>
     83c:	b8 01       	movw	r22, r16
     83e:	a7 01       	movw	r20, r14
     840:	02 2e       	mov	r0, r18
     842:	04 c0       	rjmp	.+8      	; 0x84c <__pack_f+0x86>
     844:	76 95       	lsr	r23
     846:	67 95       	ror	r22
     848:	57 95       	ror	r21
     84a:	47 95       	ror	r20
     84c:	0a 94       	dec	r0
     84e:	d2 f7       	brpl	.-12     	; 0x844 <__pack_f+0x7e>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	04 c0       	rjmp	.+8      	; 0x862 <__pack_f+0x9c>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	aa 1f       	adc	r26, r26
     860:	bb 1f       	adc	r27, r27
     862:	2a 95       	dec	r18
     864:	d2 f7       	brpl	.-12     	; 0x85a <__pack_f+0x94>
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	a1 09       	sbc	r26, r1
     86a:	b1 09       	sbc	r27, r1
     86c:	8e 21       	and	r24, r14
     86e:	9f 21       	and	r25, r15
     870:	a0 23       	and	r26, r16
     872:	b1 23       	and	r27, r17
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	a1 05       	cpc	r26, r1
     878:	b1 05       	cpc	r27, r1
     87a:	21 f0       	breq	.+8      	; 0x884 <__pack_f+0xbe>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e0       	ldi	r26, 0x00	; 0
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	9a 01       	movw	r18, r20
     886:	ab 01       	movw	r20, r22
     888:	28 2b       	or	r18, r24
     88a:	39 2b       	or	r19, r25
     88c:	4a 2b       	or	r20, r26
     88e:	5b 2b       	or	r21, r27
     890:	da 01       	movw	r26, r20
     892:	c9 01       	movw	r24, r18
     894:	8f 77       	andi	r24, 0x7F	; 127
     896:	90 70       	andi	r25, 0x00	; 0
     898:	a0 70       	andi	r26, 0x00	; 0
     89a:	b0 70       	andi	r27, 0x00	; 0
     89c:	80 34       	cpi	r24, 0x40	; 64
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	39 f4       	brne	.+14     	; 0x8b4 <__pack_f+0xee>
     8a6:	27 ff       	sbrs	r18, 7
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__pack_f+0xf6>
     8aa:	20 5c       	subi	r18, 0xC0	; 192
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	4f 4f       	sbci	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__pack_f+0xf6>
     8b4:	21 5c       	subi	r18, 0xC1	; 193
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	e0 e0       	ldi	r30, 0x00	; 0
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	20 30       	cpi	r18, 0x00	; 0
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	3a 07       	cpc	r19, r26
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	4a 07       	cpc	r20, r26
     8ca:	a0 e4       	ldi	r26, 0x40	; 64
     8cc:	5a 07       	cpc	r21, r26
     8ce:	10 f0       	brcs	.+4      	; 0x8d4 <__pack_f+0x10e>
     8d0:	e1 e0       	ldi	r30, 0x01	; 1
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	79 01       	movw	r14, r18
     8d6:	8a 01       	movw	r16, r20
     8d8:	27 c0       	rjmp	.+78     	; 0x928 <__pack_f+0x162>
     8da:	60 38       	cpi	r22, 0x80	; 128
     8dc:	71 05       	cpc	r23, r1
     8de:	64 f5       	brge	.+88     	; 0x938 <__pack_f+0x172>
     8e0:	fb 01       	movw	r30, r22
     8e2:	e1 58       	subi	r30, 0x81	; 129
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	d8 01       	movw	r26, r16
     8e8:	c7 01       	movw	r24, r14
     8ea:	8f 77       	andi	r24, 0x7F	; 127
     8ec:	90 70       	andi	r25, 0x00	; 0
     8ee:	a0 70       	andi	r26, 0x00	; 0
     8f0:	b0 70       	andi	r27, 0x00	; 0
     8f2:	80 34       	cpi	r24, 0x40	; 64
     8f4:	91 05       	cpc	r25, r1
     8f6:	a1 05       	cpc	r26, r1
     8f8:	b1 05       	cpc	r27, r1
     8fa:	39 f4       	brne	.+14     	; 0x90a <__pack_f+0x144>
     8fc:	e7 fe       	sbrs	r14, 7
     8fe:	0d c0       	rjmp	.+26     	; 0x91a <__pack_f+0x154>
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	04 c0       	rjmp	.+8      	; 0x912 <__pack_f+0x14c>
     90a:	8f e3       	ldi	r24, 0x3F	; 63
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	e8 0e       	add	r14, r24
     914:	f9 1e       	adc	r15, r25
     916:	0a 1f       	adc	r16, r26
     918:	1b 1f       	adc	r17, r27
     91a:	17 ff       	sbrs	r17, 7
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__pack_f+0x162>
     91e:	16 95       	lsr	r17
     920:	07 95       	ror	r16
     922:	f7 94       	ror	r15
     924:	e7 94       	ror	r14
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	87 e0       	ldi	r24, 0x07	; 7
     92a:	16 95       	lsr	r17
     92c:	07 95       	ror	r16
     92e:	f7 94       	ror	r15
     930:	e7 94       	ror	r14
     932:	8a 95       	dec	r24
     934:	d1 f7       	brne	.-12     	; 0x92a <__pack_f+0x164>
     936:	05 c0       	rjmp	.+10     	; 0x942 <__pack_f+0x17c>
     938:	ee 24       	eor	r14, r14
     93a:	ff 24       	eor	r15, r15
     93c:	87 01       	movw	r16, r14
     93e:	ef ef       	ldi	r30, 0xFF	; 255
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	6e 2f       	mov	r22, r30
     944:	67 95       	ror	r22
     946:	66 27       	eor	r22, r22
     948:	67 95       	ror	r22
     94a:	90 2f       	mov	r25, r16
     94c:	9f 77       	andi	r25, 0x7F	; 127
     94e:	d7 94       	ror	r13
     950:	dd 24       	eor	r13, r13
     952:	d7 94       	ror	r13
     954:	8e 2f       	mov	r24, r30
     956:	86 95       	lsr	r24
     958:	49 2f       	mov	r20, r25
     95a:	46 2b       	or	r20, r22
     95c:	58 2f       	mov	r21, r24
     95e:	5d 29       	or	r21, r13
     960:	b7 01       	movw	r22, r14
     962:	ca 01       	movw	r24, r20
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	08 95       	ret

00000970 <__unpack_f>:
     970:	fc 01       	movw	r30, r24
     972:	db 01       	movw	r26, r22
     974:	40 81       	ld	r20, Z
     976:	51 81       	ldd	r21, Z+1	; 0x01
     978:	22 81       	ldd	r18, Z+2	; 0x02
     97a:	62 2f       	mov	r22, r18
     97c:	6f 77       	andi	r22, 0x7F	; 127
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	22 1f       	adc	r18, r18
     982:	22 27       	eor	r18, r18
     984:	22 1f       	adc	r18, r18
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	89 2f       	mov	r24, r25
     98a:	88 0f       	add	r24, r24
     98c:	82 2b       	or	r24, r18
     98e:	28 2f       	mov	r18, r24
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	99 1f       	adc	r25, r25
     994:	99 27       	eor	r25, r25
     996:	99 1f       	adc	r25, r25
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	9c 93       	st	X, r25
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	a9 f5       	brne	.+106    	; 0xa0e <__unpack_f+0x9e>
     9a4:	41 15       	cp	r20, r1
     9a6:	51 05       	cpc	r21, r1
     9a8:	61 05       	cpc	r22, r1
     9aa:	71 05       	cpc	r23, r1
     9ac:	11 f4       	brne	.+4      	; 0x9b2 <__unpack_f+0x42>
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	37 c0       	rjmp	.+110    	; 0xa20 <__unpack_f+0xb0>
     9b2:	82 e8       	ldi	r24, 0x82	; 130
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	12 97       	sbiw	r26, 0x02	; 2
     9be:	9a 01       	movw	r18, r20
     9c0:	ab 01       	movw	r20, r22
     9c2:	67 e0       	ldi	r22, 0x07	; 7
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	6a 95       	dec	r22
     9ce:	d1 f7       	brne	.-12     	; 0x9c4 <__unpack_f+0x54>
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	8c 93       	st	X, r24
     9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__unpack_f+0x80>
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	44 1f       	adc	r20, r20
     9dc:	55 1f       	adc	r21, r21
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	12 97       	sbiw	r26, 0x02	; 2
     9f0:	20 30       	cpi	r18, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	38 07       	cpc	r19, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	48 07       	cpc	r20, r24
     9fa:	80 e4       	ldi	r24, 0x40	; 64
     9fc:	58 07       	cpc	r21, r24
     9fe:	58 f3       	brcs	.-42     	; 0x9d6 <__unpack_f+0x66>
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	2d 93       	st	X+, r18
     a04:	3d 93       	st	X+, r19
     a06:	4d 93       	st	X+, r20
     a08:	5c 93       	st	X, r21
     a0a:	17 97       	sbiw	r26, 0x07	; 7
     a0c:	08 95       	ret
     a0e:	2f 3f       	cpi	r18, 0xFF	; 255
     a10:	31 05       	cpc	r19, r1
     a12:	79 f4       	brne	.+30     	; 0xa32 <__unpack_f+0xc2>
     a14:	41 15       	cp	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	61 05       	cpc	r22, r1
     a1a:	71 05       	cpc	r23, r1
     a1c:	19 f4       	brne	.+6      	; 0xa24 <__unpack_f+0xb4>
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	8c 93       	st	X, r24
     a22:	08 95       	ret
     a24:	64 ff       	sbrs	r22, 4
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <__unpack_f+0xbe>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	8c 93       	st	X, r24
     a2c:	12 c0       	rjmp	.+36     	; 0xa52 <__unpack_f+0xe2>
     a2e:	1c 92       	st	X, r1
     a30:	10 c0       	rjmp	.+32     	; 0xa52 <__unpack_f+0xe2>
     a32:	2f 57       	subi	r18, 0x7F	; 127
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	3c 93       	st	X, r19
     a3a:	2e 93       	st	-X, r18
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	8c 93       	st	X, r24
     a42:	87 e0       	ldi	r24, 0x07	; 7
     a44:	44 0f       	add	r20, r20
     a46:	55 1f       	adc	r21, r21
     a48:	66 1f       	adc	r22, r22
     a4a:	77 1f       	adc	r23, r23
     a4c:	8a 95       	dec	r24
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <__unpack_f+0xd4>
     a50:	70 64       	ori	r23, 0x40	; 64
     a52:	14 96       	adiw	r26, 0x04	; 4
     a54:	4d 93       	st	X+, r20
     a56:	5d 93       	st	X+, r21
     a58:	6d 93       	st	X+, r22
     a5a:	7c 93       	st	X, r23
     a5c:	17 97       	sbiw	r26, 0x07	; 7
     a5e:	08 95       	ret

00000a60 <__fpcmp_parts_f>:
     a60:	1f 93       	push	r17
     a62:	dc 01       	movw	r26, r24
     a64:	fb 01       	movw	r30, r22
     a66:	9c 91       	ld	r25, X
     a68:	92 30       	cpi	r25, 0x02	; 2
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__fpcmp_parts_f+0xe>
     a6c:	47 c0       	rjmp	.+142    	; 0xafc <__fpcmp_parts_f+0x9c>
     a6e:	80 81       	ld	r24, Z
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__fpcmp_parts_f+0x16>
     a74:	43 c0       	rjmp	.+134    	; 0xafc <__fpcmp_parts_f+0x9c>
     a76:	94 30       	cpi	r25, 0x04	; 4
     a78:	51 f4       	brne	.+20     	; 0xa8e <__fpcmp_parts_f+0x2e>
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	1c 91       	ld	r17, X
     a7e:	84 30       	cpi	r24, 0x04	; 4
     a80:	99 f5       	brne	.+102    	; 0xae8 <__fpcmp_parts_f+0x88>
     a82:	81 81       	ldd	r24, Z+1	; 0x01
     a84:	68 2f       	mov	r22, r24
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	61 1b       	sub	r22, r17
     a8a:	71 09       	sbc	r23, r1
     a8c:	3f c0       	rjmp	.+126    	; 0xb0c <__fpcmp_parts_f+0xac>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	21 f0       	breq	.+8      	; 0xa9a <__fpcmp_parts_f+0x3a>
     a92:	92 30       	cpi	r25, 0x02	; 2
     a94:	31 f4       	brne	.+12     	; 0xaa2 <__fpcmp_parts_f+0x42>
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	b9 f1       	breq	.+110    	; 0xb08 <__fpcmp_parts_f+0xa8>
     a9a:	81 81       	ldd	r24, Z+1	; 0x01
     a9c:	88 23       	and	r24, r24
     a9e:	89 f1       	breq	.+98     	; 0xb02 <__fpcmp_parts_f+0xa2>
     aa0:	2d c0       	rjmp	.+90     	; 0xafc <__fpcmp_parts_f+0x9c>
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	1c 91       	ld	r17, X
     aa6:	11 97       	sbiw	r26, 0x01	; 1
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	f1 f0       	breq	.+60     	; 0xae8 <__fpcmp_parts_f+0x88>
     aac:	81 81       	ldd	r24, Z+1	; 0x01
     aae:	18 17       	cp	r17, r24
     ab0:	d9 f4       	brne	.+54     	; 0xae8 <__fpcmp_parts_f+0x88>
     ab2:	12 96       	adiw	r26, 0x02	; 2
     ab4:	2d 91       	ld	r18, X+
     ab6:	3c 91       	ld	r19, X
     ab8:	13 97       	sbiw	r26, 0x03	; 3
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	82 17       	cp	r24, r18
     ac0:	93 07       	cpc	r25, r19
     ac2:	94 f0       	brlt	.+36     	; 0xae8 <__fpcmp_parts_f+0x88>
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	bc f0       	brlt	.+46     	; 0xaf8 <__fpcmp_parts_f+0x98>
     aca:	14 96       	adiw	r26, 0x04	; 4
     acc:	8d 91       	ld	r24, X+
     ace:	9d 91       	ld	r25, X+
     ad0:	0d 90       	ld	r0, X+
     ad2:	bc 91       	ld	r27, X
     ad4:	a0 2d       	mov	r26, r0
     ad6:	24 81       	ldd	r18, Z+4	; 0x04
     ad8:	35 81       	ldd	r19, Z+5	; 0x05
     ada:	46 81       	ldd	r20, Z+6	; 0x06
     adc:	57 81       	ldd	r21, Z+7	; 0x07
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	4a 07       	cpc	r20, r26
     ae4:	5b 07       	cpc	r21, r27
     ae6:	18 f4       	brcc	.+6      	; 0xaee <__fpcmp_parts_f+0x8e>
     ae8:	11 23       	and	r17, r17
     aea:	41 f0       	breq	.+16     	; 0xafc <__fpcmp_parts_f+0x9c>
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <__fpcmp_parts_f+0xa2>
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	a4 07       	cpc	r26, r20
     af4:	b5 07       	cpc	r27, r21
     af6:	40 f4       	brcc	.+16     	; 0xb08 <__fpcmp_parts_f+0xa8>
     af8:	11 23       	and	r17, r17
     afa:	19 f0       	breq	.+6      	; 0xb02 <__fpcmp_parts_f+0xa2>
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <__fpcmp_parts_f+0xac>
     b02:	6f ef       	ldi	r22, 0xFF	; 255
     b04:	7f ef       	ldi	r23, 0xFF	; 255
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__fpcmp_parts_f+0xac>
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	cb 01       	movw	r24, r22
     b0e:	1f 91       	pop	r17
     b10:	08 95       	ret

00000b12 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <GPIO_setupPinDirection+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <GPIO_setupPinDirection+0x8>
     b1a:	0f 92       	push	r0
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	6a 83       	std	Y+2, r22	; 0x02
     b24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	88 30       	cpi	r24, 0x08	; 8
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <GPIO_setupPinDirection+0x1c>
     b2c:	d5 c0       	rjmp	.+426    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	84 30       	cpi	r24, 0x04	; 4
     b32:	08 f0       	brcs	.+2      	; 0xb36 <GPIO_setupPinDirection+0x24>
     b34:	d1 c0       	rjmp	.+418    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	28 2f       	mov	r18, r24
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	3d 83       	std	Y+5, r19	; 0x05
     b3e:	2c 83       	std	Y+4, r18	; 0x04
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	9d 81       	ldd	r25, Y+5	; 0x05
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	91 05       	cpc	r25, r1
     b48:	09 f4       	brne	.+2      	; 0xb4c <GPIO_setupPinDirection+0x3a>
     b4a:	43 c0       	rjmp	.+134    	; 0xbd2 <GPIO_setupPinDirection+0xc0>
     b4c:	2c 81       	ldd	r18, Y+4	; 0x04
     b4e:	3d 81       	ldd	r19, Y+5	; 0x05
     b50:	22 30       	cpi	r18, 0x02	; 2
     b52:	31 05       	cpc	r19, r1
     b54:	2c f4       	brge	.+10     	; 0xb60 <GPIO_setupPinDirection+0x4e>
     b56:	8c 81       	ldd	r24, Y+4	; 0x04
     b58:	9d 81       	ldd	r25, Y+5	; 0x05
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	71 f0       	breq	.+28     	; 0xb7a <GPIO_setupPinDirection+0x68>
     b5e:	bc c0       	rjmp	.+376    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	09 f4       	brne	.+2      	; 0xb6c <GPIO_setupPinDirection+0x5a>
     b6a:	5f c0       	rjmp	.+190    	; 0xc2a <GPIO_setupPinDirection+0x118>
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	91 05       	cpc	r25, r1
     b74:	09 f4       	brne	.+2      	; 0xb78 <GPIO_setupPinDirection+0x66>
     b76:	85 c0       	rjmp	.+266    	; 0xc82 <GPIO_setupPinDirection+0x170>
     b78:	af c0       	rjmp	.+350    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	a1 f4       	brne	.+40     	; 0xba8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     b80:	aa e3       	ldi	r26, 0x3A	; 58
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	48 2f       	mov	r20, r24
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 2e       	mov	r0, r18
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <GPIO_setupPinDirection+0x8c>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	0a 94       	dec	r0
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <GPIO_setupPinDirection+0x88>
     ba2:	84 2b       	or	r24, r20
     ba4:	8c 93       	st	X, r24
     ba6:	98 c0       	rjmp	.+304    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ba8:	aa e3       	ldi	r26, 0x3A	; 58
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e3       	ldi	r30, 0x3A	; 58
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <GPIO_setupPinDirection+0xb4>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <GPIO_setupPinDirection+0xb0>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	83 c0       	rjmp	.+262    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	a1 f4       	brne	.+40     	; 0xc00 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bd8:	a7 e3       	ldi	r26, 0x37	; 55
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <GPIO_setupPinDirection+0xe4>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <GPIO_setupPinDirection+0xe0>
     bfa:	84 2b       	or	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	6c c0       	rjmp	.+216    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c00:	a7 e3       	ldi	r26, 0x37	; 55
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e3       	ldi	r30, 0x37	; 55
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <GPIO_setupPinDirection+0x10c>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <GPIO_setupPinDirection+0x108>
     c22:	80 95       	com	r24
     c24:	84 23       	and	r24, r20
     c26:	8c 93       	st	X, r24
     c28:	57 c0       	rjmp	.+174    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	a1 f4       	brne	.+40     	; 0xc58 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c30:	a4 e3       	ldi	r26, 0x34	; 52
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e4 e3       	ldi	r30, 0x34	; 52
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <GPIO_setupPinDirection+0x13c>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <GPIO_setupPinDirection+0x138>
     c52:	84 2b       	or	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	40 c0       	rjmp	.+128    	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c58:	a4 e3       	ldi	r26, 0x34	; 52
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e4 e3       	ldi	r30, 0x34	; 52
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <GPIO_setupPinDirection+0x164>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <GPIO_setupPinDirection+0x160>
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	2b c0       	rjmp	.+86     	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	a1 f4       	brne	.+40     	; 0xcb0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     c88:	a1 e3       	ldi	r26, 0x31	; 49
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e1 e3       	ldi	r30, 0x31	; 49
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <GPIO_setupPinDirection+0x194>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <GPIO_setupPinDirection+0x190>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cb0:	a1 e3       	ldi	r26, 0x31	; 49
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e1 e3       	ldi	r30, 0x31	; 49
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <GPIO_setupPinDirection+0x1bc>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <GPIO_setupPinDirection+0x1b8>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <GPIO_writePin+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <GPIO_writePin+0x8>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	6a 83       	std	Y+2, r22	; 0x02
     cfa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	08 f0       	brcs	.+2      	; 0xd04 <GPIO_writePin+0x1c>
     d02:	d5 c0       	rjmp	.+426    	; 0xeae <GPIO_writePin+0x1c6>
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <GPIO_writePin+0x24>
     d0a:	d1 c0       	rjmp	.+418    	; 0xeae <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <GPIO_writePin+0x3a>
     d20:	43 c0       	rjmp	.+134    	; 0xda8 <GPIO_writePin+0xc0>
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	3d 81       	ldd	r19, Y+5	; 0x05
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <GPIO_writePin+0x4e>
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <GPIO_writePin+0x68>
     d34:	bc c0       	rjmp	.+376    	; 0xeae <GPIO_writePin+0x1c6>
     d36:	2c 81       	ldd	r18, Y+4	; 0x04
     d38:	3d 81       	ldd	r19, Y+5	; 0x05
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <GPIO_writePin+0x5a>
     d40:	5f c0       	rjmp	.+190    	; 0xe00 <GPIO_writePin+0x118>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <GPIO_writePin+0x66>
     d4c:	85 c0       	rjmp	.+266    	; 0xe58 <GPIO_writePin+0x170>
     d4e:	af c0       	rjmp	.+350    	; 0xeae <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d56:	ab e3       	ldi	r26, 0x3B	; 59
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	eb e3       	ldi	r30, 0x3B	; 59
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <GPIO_writePin+0x8c>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <GPIO_writePin+0x88>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	98 c0       	rjmp	.+304    	; 0xeae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     d7e:	ab e3       	ldi	r26, 0x3B	; 59
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	eb e3       	ldi	r30, 0x3B	; 59
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_writePin+0xb4>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_writePin+0xb0>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	83 c0       	rjmp	.+262    	; 0xeae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dae:	a8 e3       	ldi	r26, 0x38	; 56
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e8 e3       	ldi	r30, 0x38	; 56
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_writePin+0xe4>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_writePin+0xe0>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	6c c0       	rjmp	.+216    	; 0xeae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     dd6:	a8 e3       	ldi	r26, 0x38	; 56
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_writePin+0x10c>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_writePin+0x108>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	57 c0       	rjmp	.+174    	; 0xeae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e06:	a5 e3       	ldi	r26, 0x35	; 53
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e3       	ldi	r30, 0x35	; 53
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_writePin+0x13c>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_writePin+0x138>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	40 c0       	rjmp	.+128    	; 0xeae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e2e:	a5 e3       	ldi	r26, 0x35	; 53
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e5 e3       	ldi	r30, 0x35	; 53
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <GPIO_writePin+0x164>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <GPIO_writePin+0x160>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	2b c0       	rjmp	.+86     	; 0xeae <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	a1 f4       	brne	.+40     	; 0xe86 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e5e:	a2 e3       	ldi	r26, 0x32	; 50
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e2 e3       	ldi	r30, 0x32	; 50
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_writePin+0x194>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_writePin+0x190>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	14 c0       	rjmp	.+40     	; 0xeae <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     e86:	a2 e3       	ldi	r26, 0x32	; 50
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e2 e3       	ldi	r30, 0x32	; 50
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <GPIO_writePin+0x1bc>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <GPIO_writePin+0x1b8>
     ea8:	80 95       	com	r24
     eaa:	84 23       	and	r24, r20
     eac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <GPIO_readPin+0x6>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <GPIO_readPin+0x8>
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8a 83       	std	Y+2, r24	; 0x02
     ece:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     ed0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	08 f0       	brcs	.+2      	; 0xeda <GPIO_readPin+0x1c>
     ed8:	84 c0       	rjmp	.+264    	; 0xfe2 <GPIO_readPin+0x124>
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	08 f0       	brcs	.+2      	; 0xee2 <GPIO_readPin+0x24>
     ee0:	80 c0       	rjmp	.+256    	; 0xfe2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3d 83       	std	Y+5, r19	; 0x05
     eea:	2c 83       	std	Y+4, r18	; 0x04
     eec:	4c 81       	ldd	r20, Y+4	; 0x04
     eee:	5d 81       	ldd	r21, Y+5	; 0x05
     ef0:	41 30       	cpi	r20, 0x01	; 1
     ef2:	51 05       	cpc	r21, r1
     ef4:	79 f1       	breq	.+94     	; 0xf54 <GPIO_readPin+0x96>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	91 05       	cpc	r25, r1
     efe:	34 f4       	brge	.+12     	; 0xf0c <GPIO_readPin+0x4e>
     f00:	2c 81       	ldd	r18, Y+4	; 0x04
     f02:	3d 81       	ldd	r19, Y+5	; 0x05
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	69 f0       	breq	.+26     	; 0xf24 <GPIO_readPin+0x66>
     f0a:	6b c0       	rjmp	.+214    	; 0xfe2 <GPIO_readPin+0x124>
     f0c:	4c 81       	ldd	r20, Y+4	; 0x04
     f0e:	5d 81       	ldd	r21, Y+5	; 0x05
     f10:	42 30       	cpi	r20, 0x02	; 2
     f12:	51 05       	cpc	r21, r1
     f14:	b9 f1       	breq	.+110    	; 0xf84 <GPIO_readPin+0xc6>
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <GPIO_readPin+0x64>
     f20:	49 c0       	rjmp	.+146    	; 0xfb4 <GPIO_readPin+0xf6>
     f22:	5f c0       	rjmp	.+190    	; 0xfe2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f24:	e9 e3       	ldi	r30, 0x39	; 57
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a9 01       	movw	r20, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_readPin+0x7e>
     f38:	55 95       	asr	r21
     f3a:	47 95       	ror	r20
     f3c:	8a 95       	dec	r24
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_readPin+0x7a>
     f40:	ca 01       	movw	r24, r20
     f42:	81 70       	andi	r24, 0x01	; 1
     f44:	90 70       	andi	r25, 0x00	; 0
     f46:	88 23       	and	r24, r24
     f48:	19 f0       	breq	.+6      	; 0xf50 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	49 c0       	rjmp	.+146    	; 0xfe2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	47 c0       	rjmp	.+142    	; 0xfe2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f54:	e6 e3       	ldi	r30, 0x36	; 54
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <GPIO_readPin+0xae>
     f68:	55 95       	asr	r21
     f6a:	47 95       	ror	r20
     f6c:	8a 95       	dec	r24
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <GPIO_readPin+0xaa>
     f70:	ca 01       	movw	r24, r20
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	90 70       	andi	r25, 0x00	; 0
     f76:	88 23       	and	r24, r24
     f78:	19 f0       	breq	.+6      	; 0xf80 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	31 c0       	rjmp	.+98     	; 0xfe2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	2f c0       	rjmp	.+94     	; 0xfe2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     f84:	e3 e3       	ldi	r30, 0x33	; 51
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <GPIO_readPin+0xde>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <GPIO_readPin+0xda>
     fa0:	ca 01       	movw	r24, r20
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	88 23       	and	r24, r24
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	19 c0       	rjmp	.+50     	; 0xfe2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb0:	19 82       	std	Y+1, r1	; 0x01
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fb4:	e0 e3       	ldi	r30, 0x30	; 48
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a9 01       	movw	r20, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_readPin+0x10e>
     fc8:	55 95       	asr	r21
     fca:	47 95       	ror	r20
     fcc:	8a 95       	dec	r24
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_readPin+0x10a>
     fd0:	ca 01       	movw	r24, r20
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	88 23       	and	r24, r24
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPortDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPortDirection+0x8>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	90 f5       	brcc	.+100    	; 0x106e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3c 83       	std	Y+4, r19	; 0x04
    1012:	2b 83       	std	Y+3, r18	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	d1 f0       	breq	.+52     	; 0x1052 <GPIO_setupPortDirection+0x5e>
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	3c 81       	ldd	r19, Y+4	; 0x04
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <GPIO_setupPortDirection+0x3e>
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	61 f0       	breq	.+24     	; 0x1048 <GPIO_setupPortDirection+0x54>
    1030:	1e c0       	rjmp	.+60     	; 0x106e <GPIO_setupPortDirection+0x7a>
    1032:	2b 81       	ldd	r18, Y+3	; 0x03
    1034:	3c 81       	ldd	r19, Y+4	; 0x04
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	81 f0       	breq	.+32     	; 0x105c <GPIO_setupPortDirection+0x68>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	81 f0       	breq	.+32     	; 0x1066 <GPIO_setupPortDirection+0x72>
    1046:	13 c0       	rjmp	.+38     	; 0x106e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1048:	ea e3       	ldi	r30, 0x3A	; 58
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	80 83       	st	Z, r24
    1050:	0e c0       	rjmp	.+28     	; 0x106e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1052:	e7 e3       	ldi	r30, 0x37	; 55
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	80 83       	st	Z, r24
    105a:	09 c0       	rjmp	.+18     	; 0x106e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    105c:	e4 e3       	ldi	r30, 0x34	; 52
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
    1064:	04 c0       	rjmp	.+8      	; 0x106e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	80 83       	st	Z, r24
			break;
		}
	}
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_writePort+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <GPIO_writePort+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	90 f5       	brcc	.+100    	; 0x10f6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3c 83       	std	Y+4, r19	; 0x04
    109a:	2b 83       	std	Y+3, r18	; 0x03
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	d1 f0       	breq	.+52     	; 0x10da <GPIO_writePort+0x5e>
    10a6:	2b 81       	ldd	r18, Y+3	; 0x03
    10a8:	3c 81       	ldd	r19, Y+4	; 0x04
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	2c f4       	brge	.+10     	; 0x10ba <GPIO_writePort+0x3e>
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	61 f0       	breq	.+24     	; 0x10d0 <GPIO_writePort+0x54>
    10b8:	1e c0       	rjmp	.+60     	; 0x10f6 <GPIO_writePort+0x7a>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	81 f0       	breq	.+32     	; 0x10e4 <GPIO_writePort+0x68>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	81 f0       	breq	.+32     	; 0x10ee <GPIO_writePort+0x72>
    10ce:	13 c0       	rjmp	.+38     	; 0x10f6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	80 83       	st	Z, r24
    10d8:	0e c0       	rjmp	.+28     	; 0x10f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10da:	e8 e3       	ldi	r30, 0x38	; 56
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	80 83       	st	Z, r24
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 83       	st	Z, r24
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    10ee:	e2 e3       	ldi	r30, 0x32	; 50
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <KEYPAD_getPressedKey+0x6>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1110:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1112:	1b 82       	std	Y+3, r1	; 0x03
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <KEYPAD_getPressedKey+0x8e>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	6c df       	rcall	.-296    	; 0xff4 <GPIO_setupPortDirection>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    111e:	98 2f       	mov	r25, r24
    1120:	9c 5f       	subi	r25, 0xFC	; 252
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	69 2f       	mov	r22, r25
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	f4 dc       	rcall	.-1560   	; 0xb12 <GPIO_setupPinDirection>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 01       	movw	r18, r24
    1132:	2c 5f       	subi	r18, 0xFC	; 252
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <KEYPAD_getPressedKey+0x3c>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	2a 95       	dec	r18
    1142:	e2 f7       	brpl	.-8      	; 0x113c <KEYPAD_getPressedKey+0x38>
    1144:	80 95       	com	r24
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	69 81       	ldd	r22, Y+1	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    114c:	97 df       	rcall	.-210    	; 0x107c <GPIO_writePort>
    114e:	1a 82       	std	Y+2, r1	; 0x02
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <KEYPAD_getPressedKey+0x82>
    1152:	81 e0       	ldi	r24, 0x01	; 1

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1154:	6a 81       	ldd	r22, Y+2	; 0x02
    1156:	b3 de       	rcall	.-666    	; 0xebe <GPIO_readPin>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1158:	88 23       	and	r24, r24
    115a:	91 f4       	brne	.+36     	; 0x1180 <KEYPAD_getPressedKey+0x7c>
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	88 0f       	add	r24, r24
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1164:	99 1f       	adc	r25, r25
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	98 2f       	mov	r25, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	89 0f       	add	r24, r25
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	14 d0       	rcall	.+40     	; 0x119c <KEYPAD_4x4_adjustKeyNumber>
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
					#endif
				}
			}
		}
	}	
}
    117e:	08 95       	ret
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	84 30       	cpi	r24, 0x04	; 4
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    118a:	18 f3       	brcs	.-58     	; 0x1152 <KEYPAD_getPressedKey+0x4e>
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	84 30       	cpi	r24, 0x04	; 4
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1196:	08 f4       	brcc	.+2      	; 0x119a <KEYPAD_getPressedKey+0x96>
    1198:	be cf       	rjmp	.-132    	; 0x1116 <KEYPAD_getPressedKey+0x12>
    119a:	bb cf       	rjmp	.-138    	; 0x1112 <KEYPAD_getPressedKey+0xe>

0000119c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    11aa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	2b 83       	std	Y+3, r18	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    11c0:	70 c0       	rjmp	.+224    	; 0x12a2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	3c 81       	ldd	r19, Y+4	; 0x04
    11c6:	29 30       	cpi	r18, 0x09	; 9
    11c8:	31 05       	cpc	r19, r1
    11ca:	5c f5       	brge	.+86     	; 0x1222 <KEYPAD_4x4_adjustKeyNumber+0x86>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    11d6:	59 c0       	rjmp	.+178    	; 0x128a <KEYPAD_4x4_adjustKeyNumber+0xee>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	25 30       	cpi	r18, 0x05	; 5
    11de:	31 05       	cpc	r19, r1
    11e0:	9c f4       	brge	.+38     	; 0x1208 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <KEYPAD_4x4_adjustKeyNumber+0x52>
    11ec:	48 c0       	rjmp	.+144    	; 0x127e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	23 30       	cpi	r18, 0x03	; 3
    11f4:	31 05       	cpc	r19, r1
    11f6:	0c f0       	brlt	.+2      	; 0x11fa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    11f8:	45 c0       	rjmp	.+138    	; 0x1284 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1204:	39 c0       	rjmp	.+114    	; 0x1278 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1206:	67 c0       	rjmp	.+206    	; 0x12d6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	26 30       	cpi	r18, 0x06	; 6
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1212:	41 c0       	rjmp	.+130    	; 0x1296 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	87 30       	cpi	r24, 0x07	; 7
    121a:	91 05       	cpc	r25, r1
    121c:	0c f0       	brlt	.+2      	; 0x1220 <KEYPAD_4x4_adjustKeyNumber+0x84>
    121e:	3e c0       	rjmp	.+124    	; 0x129c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1220:	37 c0       	rjmp	.+110    	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	2c 30       	cpi	r18, 0x0C	; 12
    1228:	31 05       	cpc	r19, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <KEYPAD_4x4_adjustKeyNumber+0x92>
    122c:	46 c0       	rjmp	.+140    	; 0x12ba <KEYPAD_4x4_adjustKeyNumber+0x11e>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	8d 30       	cpi	r24, 0x0D	; 13
    1234:	91 05       	cpc	r25, r1
    1236:	5c f4       	brge	.+22     	; 0x124e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	2a 30       	cpi	r18, 0x0A	; 10
    123e:	31 05       	cpc	r19, r1
    1240:	b1 f1       	breq	.+108    	; 0x12ae <KEYPAD_4x4_adjustKeyNumber+0x112>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	8b 30       	cpi	r24, 0x0B	; 11
    1248:	91 05       	cpc	r25, r1
    124a:	a4 f5       	brge	.+104    	; 0x12b4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    124c:	2d c0       	rjmp	.+90     	; 0x12a8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	2e 30       	cpi	r18, 0x0E	; 14
    1254:	31 05       	cpc	r19, r1
    1256:	b9 f1       	breq	.+110    	; 0x12c6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	8e 30       	cpi	r24, 0x0E	; 14
    125e:	91 05       	cpc	r25, r1
    1260:	7c f1       	brlt	.+94     	; 0x12c0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	2f 30       	cpi	r18, 0x0F	; 15
    1268:	31 05       	cpc	r19, r1
    126a:	79 f1       	breq	.+94     	; 0x12ca <KEYPAD_4x4_adjustKeyNumber+0x12e>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	80 31       	cpi	r24, 0x10	; 16
    1272:	91 05       	cpc	r25, r1
    1274:	69 f1       	breq	.+90     	; 0x12d0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1276:	2f c0       	rjmp	.+94     	; 0x12d6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1278:	87 e0       	ldi	r24, 0x07	; 7
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	2e c0       	rjmp	.+92     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	2b c0       	rjmp	.+86     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1284:	89 e0       	ldi	r24, 0x09	; 9
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	28 c0       	rjmp	.+80     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    128a:	85 e2       	ldi	r24, 0x25	; 37
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	25 c0       	rjmp	.+74     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	22 c0       	rjmp	.+68     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1296:	85 e0       	ldi	r24, 0x05	; 5
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	1f c0       	rjmp	.+62     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	1c c0       	rjmp	.+56     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    12a2:	8a e2       	ldi	r24, 0x2A	; 42
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	19 c0       	rjmp	.+50     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	16 c0       	rjmp	.+44     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	10 c0       	rjmp	.+32     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    12ba:	8d e2       	ldi	r24, 0x2D	; 45
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	0d c0       	rjmp	.+26     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    12c0:	8d e0       	ldi	r24, 0x0D	; 13
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    12ca:	8d e3       	ldi	r24, 0x3D	; 61
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    12d0:	8b e2       	ldi	r24, 0x2B	; 43
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
} 
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0c dc       	rcall	.-2024   	; 0xb12 <GPIO_setupPinDirection>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	08 dc       	rcall	.-2032   	; 0xb12 <GPIO_setupPinDirection>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	62 e0       	ldi	r22, 0x02	; 2
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	04 dc       	rcall	.-2040   	; 0xb12 <GPIO_setupPinDirection>
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	72 de       	rcall	.-796    	; 0xff4 <GPIO_setupPortDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1310:	88 e3       	ldi	r24, 0x38	; 56
    1312:	07 d0       	rcall	.+14     	; 0x1322 <LCD_sendCommand>
    1314:	8c e0       	ldi	r24, 0x0C	; 12
    1316:	05 d0       	rcall	.+10     	; 0x1322 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	03 d0       	rcall	.+6      	; 0x1322 <LCD_sendCommand>
    131c:	cf 91       	pop	r28
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	e9 97       	sbiw	r28, 0x39	; 57
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	d4 dc       	rcall	.-1624   	; 0xce8 <GPIO_writePin>
    1340:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	d0 dc       	rcall	.-1632   	; 0xce8 <GPIO_writePin>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e8       	ldi	r26, 0x80	; 128
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	8d ab       	std	Y+53, r24	; 0x35
    1352:	9e ab       	std	Y+54, r25	; 0x36
    1354:	af ab       	std	Y+55, r26	; 0x37
    1356:	b8 af       	std	Y+56, r27	; 0x38
    1358:	6d a9       	ldd	r22, Y+53	; 0x35
    135a:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	8f a9       	ldd	r24, Y+55	; 0x37
    135e:	98 ad       	ldd	r25, Y+56	; 0x38
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a e7       	ldi	r20, 0x7A	; 122
    1366:	53 e4       	ldi	r21, 0x43	; 67
    1368:	5d d8       	rcall	.-3910   	; 0x424 <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	89 ab       	std	Y+49, r24	; 0x31
    1370:	9a ab       	std	Y+50, r25	; 0x32
    1372:	ab ab       	std	Y+51, r26	; 0x33
    1374:	bc ab       	std	Y+52, r27	; 0x34
    1376:	69 a9       	ldd	r22, Y+49	; 0x31
    1378:	7a a9       	ldd	r23, Y+50	; 0x32
    137a:	8b a9       	ldd	r24, Y+51	; 0x33
	if (__tmp < 1.0)
    137c:	9c a9       	ldd	r25, Y+52	; 0x34
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	9f d9       	rcall	.-3266   	; 0x6c6 <__ltsf2>
    1388:	88 23       	and	r24, r24
    138a:	2c f4       	brge	.+10     	; 0x1396 <LCD_sendCommand+0x74>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	98 ab       	std	Y+48, r25	; 0x30
    1392:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
    1394:	3d c0       	rjmp	.+122    	; 0x1410 <LCD_sendCommand+0xee>
    1396:	69 a9       	ldd	r22, Y+49	; 0x31
    1398:	7a a9       	ldd	r23, Y+50	; 0x32
    139a:	8b a9       	ldd	r24, Y+51	; 0x33
    139c:	9c a9       	ldd	r25, Y+52	; 0x34
	else if (__tmp > 65535)
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	57 e4       	ldi	r21, 0x47	; 71
    13a6:	35 d9       	rcall	.-3478   	; 0x612 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	44 f5       	brge	.+80     	; 0x13fc <LCD_sendCommand+0xda>
    13ac:	6d a9       	ldd	r22, Y+53	; 0x35
    13ae:	7e a9       	ldd	r23, Y+54	; 0x36
    13b0:	8f a9       	ldd	r24, Y+55	; 0x37
    13b2:	98 ad       	ldd	r25, Y+56	; 0x38
    13b4:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	33 d8       	rcall	.-3994   	; 0x424 <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	98 ab       	std	Y+48, r25	; 0x30
    13d0:	8f a7       	std	Y+47, r24	; 0x2f
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <LCD_sendCommand+0xd0>
    13d4:	89 e1       	ldi	r24, 0x19	; 25
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9e a7       	std	Y+46, r25	; 0x2e
    13da:	8d a7       	std	Y+45, r24	; 0x2d
    13dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13de:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <LCD_sendCommand+0xbe>
    13e4:	9e a7       	std	Y+46, r25	; 0x2e
    13e6:	8d a7       	std	Y+45, r24	; 0x2d
    13e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ea:	98 a9       	ldd	r25, Y+48	; 0x30
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	98 ab       	std	Y+48, r25	; 0x30
    13f0:	8f a7       	std	Y+47, r24	; 0x2f
    13f2:	8f a5       	ldd	r24, Y+47	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	98 a9       	ldd	r25, Y+48	; 0x30
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	69 f7       	brne	.-38     	; 0x13d4 <LCD_sendCommand+0xb2>
    13fa:	14 c0       	rjmp	.+40     	; 0x1424 <LCD_sendCommand+0x102>
    13fc:	69 a9       	ldd	r22, Y+49	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1400:	8b a9       	ldd	r24, Y+51	; 0x33
    1402:	9c a9       	ldd	r25, Y+52	; 0x34
    1404:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	98 ab       	std	Y+48, r25	; 0x30
    140e:	8f a7       	std	Y+47, r24	; 0x2f
    1410:	8f a5       	ldd	r24, Y+47	; 0x2f
    1412:	98 a9       	ldd	r25, Y+48	; 0x30
    1414:	9c a7       	std	Y+44, r25	; 0x2c
    1416:	8b a7       	std	Y+43, r24	; 0x2b
    1418:	8b a5       	ldd	r24, Y+43	; 0x2b
    141a:	9c a5       	ldd	r25, Y+44	; 0x2c
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <LCD_sendCommand+0xfa>
    1420:	9c a7       	std	Y+44, r25	; 0x2c
    1422:	8b a7       	std	Y+43, r24	; 0x2b
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	62 e0       	ldi	r22, 0x02	; 2
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	5e dc       	rcall	.-1860   	; 0xce8 <GPIO_writePin>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1430:	a0 e8       	ldi	r26, 0x80	; 128
    1432:	bf e3       	ldi	r27, 0x3F	; 63
    1434:	8f a3       	std	Y+39, r24	; 0x27
    1436:	98 a7       	std	Y+40, r25	; 0x28
    1438:	a9 a7       	std	Y+41, r26	; 0x29
    143a:	ba a7       	std	Y+42, r27	; 0x2a
    143c:	6f a1       	ldd	r22, Y+39	; 0x27
    143e:	78 a5       	ldd	r23, Y+40	; 0x28
    1440:	89 a5       	ldd	r24, Y+41	; 0x29
    1442:	9a a5       	ldd	r25, Y+42	; 0x2a
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a e7       	ldi	r20, 0x7A	; 122
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	53 e4       	ldi	r21, 0x43	; 67
    144c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8b a3       	std	Y+35, r24	; 0x23
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	ad a3       	std	Y+37, r26	; 0x25
    145a:	be a3       	std	Y+38, r27	; 0x26
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	2c d9       	rcall	.-3496   	; 0x6c6 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <LCD_sendCommand+0x15a>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9a a3       	std	Y+34, r25	; 0x22
    1478:	89 a3       	std	Y+33, r24	; 0x21
    147a:	3e c0       	rjmp	.+124    	; 0x14f8 <LCD_sendCommand+0x1d6>
    147c:	6b a1       	ldd	r22, Y+35	; 0x23
    147e:	7c a1       	ldd	r23, Y+36	; 0x24
    1480:	8d a1       	ldd	r24, Y+37	; 0x25
		__ticks = 1;
    1482:	9e a1       	ldd	r25, Y+38	; 0x26
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    148c:	c2 d8       	rcall	.-3708   	; 0x612 <__gtsf2>
    148e:	18 16       	cp	r1, r24
    1490:	4c f5       	brge	.+82     	; 0x14e4 <LCD_sendCommand+0x1c2>
    1492:	6f a1       	ldd	r22, Y+39	; 0x27
    1494:	78 a5       	ldd	r23, Y+40	; 0x28
    1496:	89 a5       	ldd	r24, Y+41	; 0x29
    1498:	9a a5       	ldd	r25, Y+42	; 0x2a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e2       	ldi	r20, 0x20	; 32
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	9a a3       	std	Y+34, r25	; 0x22
    14b8:	89 a3       	std	Y+33, r24	; 0x21
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <LCD_sendCommand+0x1b8>
    14bc:	89 e1       	ldi	r24, 0x19	; 25
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	98 a3       	std	Y+32, r25	; 0x20
    14c2:	8f 8f       	std	Y+31, r24	; 0x1f
    14c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c6:	98 a1       	ldd	r25, Y+32	; 0x20
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_sendCommand+0x1a6>
    14cc:	98 a3       	std	Y+32, r25	; 0x20
    14ce:	8f 8f       	std	Y+31, r24	; 0x1f
    14d0:	89 a1       	ldd	r24, Y+33	; 0x21
    14d2:	9a a1       	ldd	r25, Y+34	; 0x22
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	9a a3       	std	Y+34, r25	; 0x22
    14d8:	89 a3       	std	Y+33, r24	; 0x21
    14da:	89 a1       	ldd	r24, Y+33	; 0x21
    14dc:	9a a1       	ldd	r25, Y+34	; 0x22
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	69 f7       	brne	.-38     	; 0x14bc <LCD_sendCommand+0x19a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <LCD_sendCommand+0x1ea>
    14e4:	6b a1       	ldd	r22, Y+35	; 0x23
    14e6:	7c a1       	ldd	r23, Y+36	; 0x24
    14e8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ea:	9e a1       	ldd	r25, Y+38	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9a a3       	std	Y+34, r25	; 0x22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	89 a3       	std	Y+33, r24	; 0x21
    14f8:	89 a1       	ldd	r24, Y+33	; 0x21
    14fa:	9a a1       	ldd	r25, Y+34	; 0x22
    14fc:	9e 8f       	std	Y+30, r25	; 0x1e
    14fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1500:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1502:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <LCD_sendCommand+0x1e2>
    1508:	9e 8f       	std	Y+30, r25	; 0x1e
    150a:	8d 8f       	std	Y+29, r24	; 0x1d
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	69 ad       	ldd	r22, Y+57	; 0x39
    1510:	b5 dd       	rcall	.-1174   	; 0x107c <GPIO_writePort>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e8       	ldi	r26, 0x80	; 128
    1518:	bf e3       	ldi	r27, 0x3F	; 63
    151a:	89 8f       	std	Y+25, r24	; 0x19
    151c:	9a 8f       	std	Y+26, r25	; 0x1a
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    151e:	ab 8f       	std	Y+27, r26	; 0x1b
    1520:	bc 8f       	std	Y+28, r27	; 0x1c
    1522:	69 8d       	ldd	r22, Y+25	; 0x19
    1524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a e7       	ldi	r20, 0x7A	; 122
    1530:	53 e4       	ldi	r21, 0x43	; 67
    1532:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	8d 8b       	std	Y+21, r24	; 0x15
    153c:	9e 8b       	std	Y+22, r25	; 0x16
    153e:	af 8b       	std	Y+23, r26	; 0x17
    1540:	b8 8f       	std	Y+24, r27	; 0x18
    1542:	6d 89       	ldd	r22, Y+21	; 0x15
    1544:	7e 89       	ldd	r23, Y+22	; 0x16
    1546:	8f 89       	ldd	r24, Y+23	; 0x17
    1548:	98 8d       	ldd	r25, Y+24	; 0x18
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	b9 d8       	rcall	.-3726   	; 0x6c6 <__ltsf2>
    1554:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1556:	2c f4       	brge	.+10     	; 0x1562 <LCD_sendCommand+0x240>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	3e c0       	rjmp	.+124    	; 0x15de <LCD_sendCommand+0x2bc>
    1562:	6d 89       	ldd	r22, Y+21	; 0x15
    1564:	7e 89       	ldd	r23, Y+22	; 0x16
    1566:	8f 89       	ldd	r24, Y+23	; 0x17
    1568:	98 8d       	ldd	r25, Y+24	; 0x18
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	4f d8       	rcall	.-3938   	; 0x612 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <LCD_sendCommand+0x2a8>
	else if (__tmp > 65535)
    1578:	69 8d       	ldd	r22, Y+25	; 0x19
    157a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <LCD_sendCommand+0x29e>
    15a2:	89 e1       	ldi	r24, 0x19	; 25
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 8b       	std	Y+18, r25	; 0x12
    15a8:	89 8b       	std	Y+17, r24	; 0x11
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	9a 89       	ldd	r25, Y+18	; 0x12
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <LCD_sendCommand+0x28c>
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	89 8b       	std	Y+17, r24	; 0x11
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9c 8b       	std	Y+20, r25	; 0x14
    15be:	8b 8b       	std	Y+19, r24	; 0x13
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <LCD_sendCommand+0x280>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <LCD_sendCommand+0x2d0>
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	cb 01       	movw	r24, r22
    15da:	9c 8b       	std	Y+20, r25	; 0x14
    15dc:	8b 8b       	std	Y+19, r24	; 0x13
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	98 89       	ldd	r25, Y+16	; 0x10
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_sendCommand+0x2c8>
    15ee:	98 8b       	std	Y+16, r25	; 0x10
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	77 db       	rcall	.-2322   	; 0xce8 <GPIO_writePin>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a0 e8       	ldi	r26, 0x80	; 128
    1600:	bf e3       	ldi	r27, 0x3F	; 63
    1602:	8b 87       	std	Y+11, r24	; 0x0b
    1604:	9c 87       	std	Y+12, r25	; 0x0c
    1606:	ad 87       	std	Y+13, r26	; 0x0d
    1608:	be 87       	std	Y+14, r27	; 0x0e
    160a:	6b 85       	ldd	r22, Y+11	; 0x0b
    160c:	7c 85       	ldd	r23, Y+12	; 0x0c
    160e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1610:	9e 85       	ldd	r25, Y+14	; 0x0e
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	4a e7       	ldi	r20, 0x7A	; 122
    1618:	53 e4       	ldi	r21, 0x43	; 67
    161a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	8f 83       	std	Y+7, r24	; 0x07
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	98 87       	std	Y+8, r25	; 0x08
    1626:	a9 87       	std	Y+9, r26	; 0x09
    1628:	ba 87       	std	Y+10, r27	; 0x0a
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e8       	ldi	r20, 0x80	; 128
    1638:	5f e3       	ldi	r21, 0x3F	; 63
    163a:	45 d8       	rcall	.-3958   	; 0x6c6 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <LCD_sendCommand+0x328>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
	if (__tmp < 1.0)
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <LCD_sendCommand+0x3a6>
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
		__ticks = 1;
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <LCD_sendCommand+0x392>
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
	else if (__tmp > 65535)
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_sendCommand+0x388>
    168c:	89 e1       	ldi	r24, 0x19	; 25
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_sendCommand+0x376>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <LCD_sendCommand+0x36a>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <LCD_sendCommand+0x3ba>
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_sendCommand+0x3b2>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	e9 96       	adiw	r28, 0x39	; 57
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	e9 97       	sbiw	r28, 0x39	; 57
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	ee da       	rcall	.-2596   	; 0xce8 <GPIO_writePin>
    170c:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	ea da       	rcall	.-2604   	; 0xce8 <GPIO_writePin>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e8       	ldi	r26, 0x80	; 128
    171a:	bf e3       	ldi	r27, 0x3F	; 63
    171c:	8d ab       	std	Y+53, r24	; 0x35
    171e:	9e ab       	std	Y+54, r25	; 0x36
    1720:	af ab       	std	Y+55, r26	; 0x37
    1722:	b8 af       	std	Y+56, r27	; 0x38
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a e7       	ldi	r20, 0x7A	; 122
    1732:	53 e4       	ldi	r21, 0x43	; 67
    1734:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	89 ab       	std	Y+49, r24	; 0x31
    173e:	9a ab       	std	Y+50, r25	; 0x32
    1740:	ab ab       	std	Y+51, r26	; 0x33
    1742:	bc ab       	std	Y+52, r27	; 0x34
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_displayCharacter+0x78>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_displayCharacter+0xf6>
    1766:	69 a9       	ldd	r22, Y+49	; 0x31
    1768:	7a a9       	ldd	r23, Y+50	; 0x32
	else if (__tmp > 65535)
    176a:	8b a9       	ldd	r24, Y+51	; 0x33
    176c:	9c a9       	ldd	r25, Y+52	; 0x34
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_displayCharacter+0xe2>
    177e:	6d a9       	ldd	r22, Y+53	; 0x35
    1780:	7e a9       	ldd	r23, Y+54	; 0x36
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	8f a9       	ldd	r24, Y+55	; 0x37
    1784:	98 ad       	ldd	r25, Y+56	; 0x38
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	98 ab       	std	Y+48, r25	; 0x30
    17a4:	8f a7       	std	Y+47, r24	; 0x2f
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_displayCharacter+0xd8>
    17a8:	89 e1       	ldi	r24, 0x19	; 25
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e a7       	std	Y+46, r25	; 0x2e
    17ae:	8d a7       	std	Y+45, r24	; 0x2d
    17b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_displayCharacter+0xc6>
    17b8:	9e a7       	std	Y+46, r25	; 0x2e
    17ba:	8d a7       	std	Y+45, r24	; 0x2d
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_displayCharacter+0xba>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_displayCharacter+0x10a>
    17d0:	69 a9       	ldd	r22, Y+49	; 0x31
    17d2:	7a a9       	ldd	r23, Y+50	; 0x32
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	8b a9       	ldd	r24, Y+51	; 0x33
    17d6:	9c a9       	ldd	r25, Y+52	; 0x34
    17d8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	9c a7       	std	Y+44, r25	; 0x2c
    17ea:	8b a7       	std	Y+43, r24	; 0x2b
    17ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_displayCharacter+0x102>
    17f4:	9c a7       	std	Y+44, r25	; 0x2c
    17f6:	8b a7       	std	Y+43, r24	; 0x2b
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	62 e0       	ldi	r22, 0x02	; 2
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	74 da       	rcall	.-2840   	; 0xce8 <GPIO_writePin>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	bf e3       	ldi	r27, 0x3F	; 63
    1808:	8f a3       	std	Y+39, r24	; 0x27
    180a:	98 a7       	std	Y+40, r25	; 0x28
    180c:	a9 a7       	std	Y+41, r26	; 0x29
    180e:	ba a7       	std	Y+42, r27	; 0x2a
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a e7       	ldi	r20, 0x7A	; 122
    181e:	53 e4       	ldi	r21, 0x43	; 67
    1820:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8b a3       	std	Y+35, r24	; 0x23
    182a:	9c a3       	std	Y+36, r25	; 0x24
    182c:	ad a3       	std	Y+37, r26	; 0x25
    182e:	be a3       	std	Y+38, r27	; 0x26
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
	if (__tmp < 1.0)
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <LCD_displayCharacter+0x164>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
    184e:	89 a3       	std	Y+33, r24	; 0x21
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <LCD_displayCharacter+0x1e2>
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
	else if (__tmp > 65535)
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <LCD_displayCharacter+0x1ce>
    186a:	6f a1       	ldd	r22, Y+39	; 0x27
    186c:	78 a5       	ldd	r23, Y+40	; 0x28
    186e:	89 a5       	ldd	r24, Y+41	; 0x29
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	9a a5       	ldd	r25, Y+42	; 0x2a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <LCD_displayCharacter+0x1c4>
    1894:	89 e1       	ldi	r24, 0x19	; 25
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 a3       	std	Y+32, r25	; 0x20
    189a:	8f 8f       	std	Y+31, r24	; 0x1f
    189c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189e:	98 a1       	ldd	r25, Y+32	; 0x20
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_displayCharacter+0x1b2>
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	9a a1       	ldd	r25, Y+34	; 0x22
    18b6:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	69 f7       	brne	.-38     	; 0x1894 <LCD_displayCharacter+0x1a6>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <LCD_displayCharacter+0x1f6>
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9a a3       	std	Y+34, r25	; 0x22
    18ce:	89 a3       	std	Y+33, r24	; 0x21
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	9e 8f       	std	Y+30, r25	; 0x1e
    18d6:	8d 8f       	std	Y+29, r24	; 0x1d
    18d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_displayCharacter+0x1ee>
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	69 ad       	ldd	r22, Y+57	; 0x39
    18e8:	c9 db       	rcall	.-2158   	; 0x107c <GPIO_writePort>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	89 8f       	std	Y+25, r24	; 0x19
    18f4:	9a 8f       	std	Y+26, r25	; 0x1a
    18f6:	ab 8f       	std	Y+27, r26	; 0x1b
    18f8:	bc 8f       	std	Y+28, r27	; 0x1c
    18fa:	69 8d       	ldd	r22, Y+25	; 0x19
    18fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1900:	9c 8d       	ldd	r25, Y+28	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8d 8b       	std	Y+21, r24	; 0x15
    1914:	9e 8b       	std	Y+22, r25	; 0x16
    1916:	af 8b       	std	Y+23, r26	; 0x17
    1918:	b8 8f       	std	Y+24, r27	; 0x18
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
	if (__tmp < 1.0)
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <LCD_displayCharacter+0x24e>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <LCD_displayCharacter+0x2cc>
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
	else if (__tmp > 65535)
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <LCD_displayCharacter+0x2b8>
    1954:	69 8d       	ldd	r22, Y+25	; 0x19
    1956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195a:	9c 8d       	ldd	r25, Y+28	; 0x1c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9c 8b       	std	Y+20, r25	; 0x14
    197a:	8b 8b       	std	Y+19, r24	; 0x13
    197c:	0f c0       	rjmp	.+30     	; 0x199c <LCD_displayCharacter+0x2ae>
    197e:	89 e1       	ldi	r24, 0x19	; 25
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9a 8b       	std	Y+18, r25	; 0x12
    1984:	89 8b       	std	Y+17, r24	; 0x11
    1986:	89 89       	ldd	r24, Y+17	; 0x11
    1988:	9a 89       	ldd	r25, Y+18	; 0x12
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_displayCharacter+0x29c>
    198e:	9a 8b       	std	Y+18, r25	; 0x12
    1990:	89 8b       	std	Y+17, r24	; 0x11
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	9c 89       	ldd	r25, Y+20	; 0x14
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9c 8b       	std	Y+20, r25	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <LCD_displayCharacter+0x290>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <LCD_displayCharacter+0x2e0>
    19a6:	6d 89       	ldd	r22, Y+21	; 0x15
    19a8:	7e 89       	ldd	r23, Y+22	; 0x16
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9c 8b       	std	Y+20, r25	; 0x14
    19b8:	8b 8b       	std	Y+19, r24	; 0x13
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	98 8b       	std	Y+16, r25	; 0x10
    19c0:	8f 87       	std	Y+15, r24	; 0x0f
    19c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c4:	98 89       	ldd	r25, Y+16	; 0x10
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_displayCharacter+0x2d8>
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	62 e0       	ldi	r22, 0x02	; 2
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	89 d9       	rcall	.-3310   	; 0xce8 <GPIO_writePin>
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	8b 87       	std	Y+11, r24	; 0x0b
    19e0:	9c 87       	std	Y+12, r25	; 0x0c
    19e2:	ad 87       	std	Y+13, r26	; 0x0d
    19e4:	be 87       	std	Y+14, r27	; 0x0e
    19e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ee:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8f 83       	std	Y+7, r24	; 0x07
    1a00:	98 87       	std	Y+8, r25	; 0x08
    1a02:	a9 87       	std	Y+9, r26	; 0x09
    1a04:	ba 87       	std	Y+10, r27	; 0x0a
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <LCD_displayCharacter+0x33a>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <LCD_displayCharacter+0x3b8>
		__ticks = 1;
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <LCD_displayCharacter+0x3a4>
    1a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a48:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <LCD_displayCharacter+0x39a>
    1a6a:	89 e1       	ldi	r24, 0x19	; 25
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_displayCharacter+0x388>
    1a7a:	9c 83       	std	Y+4, r25	; 0x04
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <LCD_displayCharacter+0x37c>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <LCD_displayCharacter+0x3cc>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_displayCharacter+0x3c4>
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	e9 96       	adiw	r28, 0x39	; 57
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <LCD_displayString+0x6>
    1ad2:	0f 92       	push	r0
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	9b 83       	std	Y+3, r25	; 0x03
    1ada:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1adc:	19 82       	std	Y+1, r1	; 0x01
    1ade:	0d c0       	rjmp	.+26     	; 0x1afa <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	fc 01       	movw	r30, r24
    1aec:	e2 0f       	add	r30, r18
    1aee:	f3 1f       	adc	r31, r19
    1af0:	80 81       	ld	r24, Z
    1af2:	fd dd       	rcall	.-1030   	; 0x16ee <LCD_displayCharacter>
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	fc 01       	movw	r30, r24
    1b06:	e2 0f       	add	r30, r18
    1b08:	f3 1f       	adc	r31, r19
    1b0a:	80 81       	ld	r24, Z
    1b0c:	88 23       	and	r24, r24
    1b0e:	41 f7       	brne	.-48     	; 0x1ae0 <LCD_displayString+0x14>
    1b10:	0f 90       	pop	r0
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <LCD_moveCursor+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <LCD_moveCursor+0x8>
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
    1b2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3d 83       	std	Y+5, r19	; 0x05
    1b36:	2c 83       	std	Y+4, r18	; 0x04
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	c1 f0       	breq	.+48     	; 0x1b72 <LCD_moveCursor+0x56>
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
    1b44:	3d 81       	ldd	r19, Y+5	; 0x05
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <LCD_moveCursor+0x3a>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <LCD_moveCursor+0x50>
    1b54:	19 c0       	rjmp	.+50     	; 0x1b88 <LCD_moveCursor+0x6c>
    1b56:	2c 81       	ldd	r18, Y+4	; 0x04
    1b58:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	69 f0       	breq	.+26     	; 0x1b7a <LCD_moveCursor+0x5e>
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <LCD_moveCursor+0x66>
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	80 5c       	subi	r24, 0xC0	; 192
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	80 5f       	subi	r24, 0xF0	; 240
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	80 5b       	subi	r24, 0xB0	; 176
    1b86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	80 68       	ori	r24, 0x80	; 128
    1b8c:	ca db       	rcall	.-2156   	; 0x1322 <LCD_sendCommand>
    1b8e:	0f 90       	pop	r0
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <LCD_displayStringRowColumn+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <LCD_displayStringRowColumn+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	6a 83       	std	Y+2, r22	; 0x02
    1bae:	5c 83       	std	Y+4, r21	; 0x04
    1bb0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb6:	b2 df       	rcall	.-156    	; 0x1b1c <LCD_moveCursor>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_displayString(Str); /* display the string */
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	87 df       	rcall	.-242    	; 0x1acc <LCD_displayString>
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	a5 db       	rcall	.-2230   	; 0x1322 <LCD_sendCommand>
    1bd8:	cf 91       	pop	r28
}
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <Timer0_interruptCounter>:
 * Function to be set as the Callback Function for Timer0
 * It counts the number of overflow interrupts
 * Uses a global variable to save the count
 */
void Timer0_interruptCounter(void)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	/* Increment on every interrupt */
	g_timer0Ticks++;
    1be6:	80 91 1c 01 	lds	r24, 0x011C
    1bea:	90 91 1d 01 	lds	r25, 0x011D
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	90 93 1d 01 	sts	0x011D, r25
    1bf4:	80 93 1c 01 	sts	0x011C, r24
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <Passowrd_init>:
 * It takes the password array of the system as argument
 * Takes values pressed by the keypad stores it in the password array
 * Sends it to the Control_ECU by UART to be saved in eeprom
 */
void Passowrd_init(uint8 *a_password)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	62 97       	sbiw	r28, 0x12	; 18
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	9a 8b       	std	Y+18, r25	; 0x12
    1c14:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 * Variable to count the 5 passowrd numbers
	 * Variable to check the Entered number is 0
	 */
	uint8 counter , num_check;
	LCD_clearScreen();
    1c16:	da df       	rcall	.-76     	; 0x1bcc <LCD_clearScreen>
    1c18:	80 e6       	ldi	r24, 0x60	; 96
	LCD_displayString("Please Enter");
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	57 df       	rcall	.-338    	; 0x1acc <LCD_displayString>
    1c1e:	2d e6       	ldi	r18, 0x6D	; 109
    1c20:	30 e0       	ldi	r19, 0x00	; 0
	LCD_displayStringRowColumn(1, 0, "Password: ");
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	ba df       	rcall	.-140    	; 0x1b9e <LCD_displayStringRowColumn>
    1c2a:	18 8a       	std	Y+16, r1	; 0x10
    1c2c:	88 c0       	rjmp	.+272    	; 0x1d3e <Passowrd_init+0x140>
    1c2e:	6a da       	rcall	.-2860   	; 0x1104 <KEYPAD_getPressedKey>

	/*Loop to get 5 numbers*/
	for( counter = 0; counter < 5; counter++)
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
	{
		/* Taking the number from keypad  */
		num_check = KEYPAD_getPressedKey();
    1c34:	88 23       	and	r24, r24
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <Passowrd_init+0x3e>
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
		if( num_check == 0)
    1c3a:	8f 87       	std	Y+15, r24	; 0x0f
    1c3c:	88 89       	ldd	r24, Y+16	; 0x10
    1c3e:	28 2f       	mov	r18, r24
		{
			/* Changing the value to send it as string by UART because it has the same value as \0 */
			num_check = 0xFF;
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	89 89       	ldd	r24, Y+17	; 0x11
		}
		/* Saving number in the string*/
		a_password[counter] = num_check;
    1c44:	9a 89       	ldd	r25, Y+18	; 0x12
    1c46:	fc 01       	movw	r30, r24
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4e:	80 83       	st	Z, r24
    1c50:	8a e2       	ldi	r24, 0x2A	; 42
    1c52:	4d dd       	rcall	.-1382   	; 0x16ee <LCD_displayCharacter>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
		/*Display the password in the form of ***** */
		LCD_displayCharacter('*');
    1c58:	a8 ec       	ldi	r26, 0xC8	; 200
    1c5a:	b3 e4       	ldi	r27, 0x43	; 67
    1c5c:	8b 87       	std	Y+11, r24	; 0x0b
    1c5e:	9c 87       	std	Y+12, r25	; 0x0c
    1c60:	ad 87       	std	Y+13, r26	; 0x0d
    1c62:	be 87       	std	Y+14, r27	; 0x0e
    1c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a ef       	ldi	r20, 0xFA	; 250
    1c72:	54 e4       	ldi	r21, 0x44	; 68
    1c74:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8f 83       	std	Y+7, r24	; 0x07
    1c7e:	98 87       	std	Y+8, r25	; 0x08
    1c80:	a9 87       	std	Y+9, r26	; 0x09
    1c82:	ba 87       	std	Y+10, r27	; 0x0a
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <Passowrd_init+0xa8>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	3f c0       	rjmp	.+126    	; 0x1d24 <Passowrd_init+0x126>
		__ticks = 1;
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	4c f5       	brge	.+82     	; 0x1d10 <Passowrd_init+0x112>
    1cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <Passowrd_init+0x108>
    1ce8:	88 ec       	ldi	r24, 0xC8	; 200
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <Passowrd_init+0xf6>
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	8b 83       	std	Y+3, r24	; 0x03
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <Passowrd_init+0xea>
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <Passowrd_init+0x13a>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <Passowrd_init+0x132>
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	88 89       	ldd	r24, Y+16	; 0x10
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	88 8b       	std	Y+16, r24	; 0x10
    1d3e:	88 89       	ldd	r24, Y+16	; 0x10
    1d40:	85 30       	cpi	r24, 0x05	; 5
	LCD_clearScreen();
	LCD_displayString("Please Enter");
	LCD_displayStringRowColumn(1, 0, "Password: ");

	/*Loop to get 5 numbers*/
	for( counter = 0; counter < 5; counter++)
    1d42:	08 f4       	brcc	.+2      	; 0x1d46 <Passowrd_init+0x148>
    1d44:	74 cf       	rjmp	.-280    	; 0x1c2e <Passowrd_init+0x30>
    1d46:	89 89       	ldd	r24, Y+17	; 0x11
    1d48:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	35 96       	adiw	r30, 0x05	; 5
    1d4e:	83 e2       	ldi	r24, 0x23	; 35
		/* Delay to read the key once every click */
		_delay_ms(400);

	}

	a_password[5] = '#' ; /*Char for UART sending string Protocol */
    1d50:	80 83       	st	Z, r24
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	fc 01       	movw	r30, r24
    1d58:	36 96       	adiw	r30, 0x06	; 6
    1d5a:	10 82       	st	Z, r1
	a_password[6] = '\0' ;  /*NULL operator for end of string in memory*/
    1d5c:	89 89       	ldd	r24, Y+17	; 0x11
    1d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d60:	c8 d4       	rcall	.+2448   	; 0x26f2 <UART_sendString>
    1d62:	62 96       	adiw	r28, 0x12	; 18
    1d64:	0f b6       	in	r0, 0x3f	; 63
	UART_sendString(a_password); /*Sending password to the control micro to save it in eeprom*/
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61

}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <TakeSend_Password>:
 * It takes the password array of the system as argument
 * Saves the pressed password in the argument array
 * Send password to Control_ECU to compare it with the saved one in eeprom
 */
void TakeSend_Password(uint8 * a_password)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	62 97       	sbiw	r28, 0x12	; 18
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
	uint8 num_check;/* Variable to check the Entered number is 0 */
	/*Loop to get 5 numbers*/
	for(uint8 counter = 0; counter < 5; counter++)
    1d8c:	1f 86       	std	Y+15, r1	; 0x0f
    1d8e:	88 c0       	rjmp	.+272    	; 0x1ea0 <TakeSend_Password+0x12c>
	{
		/* Taking the number from keypad  */
		num_check = KEYPAD_getPressedKey();
    1d90:	b9 d9       	rcall	.-3214   	; 0x1104 <KEYPAD_getPressedKey>
    1d92:	88 8b       	std	Y+16, r24	; 0x10
    1d94:	88 89       	ldd	r24, Y+16	; 0x10
		if( num_check == 0)
    1d96:	88 23       	and	r24, r24
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <TakeSend_Password+0x2a>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
		{
			/* Changing the value to send it as string by UART because it has the same value as \0 */
			num_check = 0xFF;
    1d9c:	88 8b       	std	Y+16, r24	; 0x10
    1d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
		/* Saving number in the string*/
		a_password[counter] = num_check;
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	89 89       	ldd	r24, Y+17	; 0x11
    1da6:	9a 89       	ldd	r25, Y+18	; 0x12
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	88 89       	ldd	r24, Y+16	; 0x10
    1db0:	80 83       	st	Z, r24
    1db2:	8a e2       	ldi	r24, 0x2A	; 42
		LCD_displayCharacter('*');/*Display the password in the form of ***** */
    1db4:	9c dc       	rcall	.-1736   	; 0x16ee <LCD_displayCharacter>
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a8 ec       	ldi	r26, 0xC8	; 200
    1dbc:	b3 e4       	ldi	r27, 0x43	; 67
    1dbe:	8b 87       	std	Y+11, r24	; 0x0b
    1dc0:	9c 87       	std	Y+12, r25	; 0x0c
    1dc2:	ad 87       	std	Y+13, r26	; 0x0d
    1dc4:	be 87       	std	Y+14, r27	; 0x0e
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a ef       	ldi	r20, 0xFA	; 250
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8f 83       	std	Y+7, r24	; 0x07
    1de0:	98 87       	std	Y+8, r25	; 0x08
    1de2:	a9 87       	std	Y+9, r26	; 0x09
    1de4:	ba 87       	std	Y+10, r27	; 0x0a
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
	if (__tmp < 1.0)
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    1dfa:	88 23       	and	r24, r24
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <TakeSend_Password+0x94>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
    1e06:	3f c0       	rjmp	.+126    	; 0x1e86 <TakeSend_Password+0x112>
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
	else if (__tmp > 65535)
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	3f ef       	ldi	r19, 0xFF	; 255
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	57 e4       	ldi	r21, 0x47	; 71
    1e18:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	4c f5       	brge	.+82     	; 0x1e72 <TakeSend_Password+0xfe>
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e2       	ldi	r20, 0x20	; 32
    1e2e:	51 e4       	ldi	r21, 0x41	; 65
    1e30:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <TakeSend_Password+0xf4>
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <TakeSend_Password+0xe2>
    1e5a:	9c 83       	std	Y+4, r25	; 0x04
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	69 f7       	brne	.-38     	; 0x1e4a <TakeSend_Password+0xd6>
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <TakeSend_Password+0x126>
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <TakeSend_Password+0x11e>
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
 */
void TakeSend_Password(uint8 * a_password)
{
	uint8 num_check;/* Variable to check the Entered number is 0 */
	/*Loop to get 5 numbers*/
	for(uint8 counter = 0; counter < 5; counter++)
    1e9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea2:	85 30       	cpi	r24, 0x05	; 5
    1ea4:	08 f4       	brcc	.+2      	; 0x1ea8 <TakeSend_Password+0x134>
    1ea6:	74 cf       	rjmp	.-280    	; 0x1d90 <TakeSend_Password+0x1c>
    1ea8:	89 89       	ldd	r24, Y+17	; 0x11
    1eaa:	9a 89       	ldd	r25, Y+18	; 0x12
		LCD_displayCharacter('*');/*Display the password in the form of ***** */
		_delay_ms(400);
	}


	a_password[5] = '#' ; /* Char for UART sending string Protocol */
    1eac:	fc 01       	movw	r30, r24
    1eae:	35 96       	adiw	r30, 0x05	; 5
    1eb0:	83 e2       	ldi	r24, 0x23	; 35
    1eb2:	80 83       	st	Z, r24
    1eb4:	89 89       	ldd	r24, Y+17	; 0x11
    1eb6:	9a 89       	ldd	r25, Y+18	; 0x12
	a_password[6] = '\0' ;  /* NULL operator for end of string in memory*/
    1eb8:	fc 01       	movw	r30, r24
    1eba:	36 96       	adiw	r30, 0x06	; 6
    1ebc:	10 82       	st	Z, r1
    1ebe:	89 89       	ldd	r24, Y+17	; 0x11
    1ec0:	9a 89       	ldd	r25, Y+18	; 0x12
	UART_sendString(a_password); /* Sending password to the control micro to save it in eeprom*/
    1ec2:	17 d4       	rcall	.+2094   	; 0x26f2 <UART_sendString>
    1ec4:	62 96       	adiw	r28, 0x12	; 18
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli

}
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <main>:
 *                                Main Function                                *
 *******************************************************************************/


void main(void)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	c2 54       	subi	r28, 0x42	; 66
    1ee0:	d0 40       	sbci	r29, 0x00	; 0
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61

	/* Struct to configer UART with Baud rate = 9600 bps and one stop bit*/
	Uart_ConfigType Config_Uart = { 9600 , ONE_STOP_BIT };
    1eec:	ce 01       	movw	r24, r28
    1eee:	8e 96       	adiw	r24, 0x2e	; 46
    1ef0:	9f af       	std	Y+63, r25	; 0x3f
    1ef2:	8e af       	std	Y+62, r24	; 0x3e
    1ef4:	a6 e1       	ldi	r26, 0x16	; 22
    1ef6:	b1 e0       	ldi	r27, 0x01	; 1
    1ef8:	22 96       	adiw	r28, 0x02	; 2
    1efa:	bf af       	std	Y+63, r27	; 0x3f
    1efc:	ae af       	std	Y+62, r26	; 0x3e
    1efe:	22 97       	sbiw	r28, 0x02	; 2
    1f00:	b5 e0       	ldi	r27, 0x05	; 5
    1f02:	23 96       	adiw	r28, 0x03	; 3
    1f04:	bf af       	std	Y+63, r27	; 0x3f
    1f06:	23 97       	sbiw	r28, 0x03	; 3
    1f08:	22 96       	adiw	r28, 0x02	; 2
    1f0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f0e:	22 97       	sbiw	r28, 0x02	; 2
    1f10:	00 80       	ld	r0, Z
    1f12:	22 96       	adiw	r28, 0x02	; 2
    1f14:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f16:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f18:	22 97       	sbiw	r28, 0x02	; 2
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	22 96       	adiw	r28, 0x02	; 2
    1f1e:	9f af       	std	Y+63, r25	; 0x3f
    1f20:	8e af       	std	Y+62, r24	; 0x3e
    1f22:	22 97       	sbiw	r28, 0x02	; 2
    1f24:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f26:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f28:	0c 92       	st	X, r0
    1f2a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f2c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f2e:	31 96       	adiw	r30, 0x01	; 1
    1f30:	ff af       	std	Y+63, r31	; 0x3f
    1f32:	ee af       	std	Y+62, r30	; 0x3e
    1f34:	23 96       	adiw	r28, 0x03	; 3
    1f36:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f38:	23 97       	sbiw	r28, 0x03	; 3
    1f3a:	f1 50       	subi	r31, 0x01	; 1
    1f3c:	23 96       	adiw	r28, 0x03	; 3
    1f3e:	ff af       	std	Y+63, r31	; 0x3f
    1f40:	23 97       	sbiw	r28, 0x03	; 3
    1f42:	23 96       	adiw	r28, 0x03	; 3
    1f44:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f46:	23 97       	sbiw	r28, 0x03	; 3
    1f48:	22 23       	and	r18, r18
    1f4a:	f1 f6       	brne	.-68     	; 0x1f08 <main+0x32>
	/* Struct ti configer Timer 0 in overflow mode with prescaler 1024 and initial value = 0*/
	Timer0_ConfigType Config_Timer0 = {NORMAL , F_CPU_1024 , 0  , 255};
    1f4c:	1b aa       	std	Y+51, r1	; 0x33
    1f4e:	85 e0       	ldi	r24, 0x05	; 5
    1f50:	8c ab       	std	Y+52, r24	; 0x34
    1f52:	1d aa       	std	Y+53, r1	; 0x35
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	8e ab       	std	Y+54, r24	; 0x36

	/* Initializing Drivers*/
	LCD_init(); /* Initializing LCD */
    1f58:	c8 d9       	rcall	.-3184   	; 0x12ea <LCD_init>
    1f5a:	ce 01       	movw	r24, r28
	UART_init(&Config_Uart); /* Initializing UART */
    1f5c:	8e 96       	adiw	r24, 0x2e	; 46
    1f5e:	42 d3       	rcall	.+1668   	; 0x25e4 <UART_init>
    1f60:	8f ee       	ldi	r24, 0xEF	; 239
    1f62:	9d e0       	ldi	r25, 0x0D	; 13
	/* Setting Callback Function for Timer 0 */
	Timer0_setCallBack(Timer0_interruptCounter, NORMAL);
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	fe d2       	rcall	.+1532   	; 0x2564 <Timer0_setCallBack>
    1f68:	1c a6       	std	Y+44, r1	; 0x2c
    1f6a:	87 e0       	ldi	r24, 0x07	; 7
    1f6c:	fe 01       	movw	r30, r28
	/* Variable to Save the chosen option
	 * Variable to count wrong trials
	 */
	uint8 option , wrong_trials = 0;
    1f6e:	f7 96       	adiw	r30, 0x37	; 55
	/* Password of 5 numbers each in a byte
	 * Array of bytes to the password of 5 numbers
	 * Char for UART sending string and Null operator
	 */
	uint8 password[7] = {0} , receive_password_msg = MISMATCH; /* Initially mismatch to enter the loop 1st time*/
    1f70:	df 01       	movw	r26, r30
    1f72:	28 2f       	mov	r18, r24
    1f74:	1d 92       	st	X+, r1
    1f76:	2a 95       	dec	r18
    1f78:	e9 f7       	brne	.-6      	; 0x1f74 <main+0x9e>
    1f7a:	1b a6       	std	Y+43, r1	; 0x2b
    1f7c:	12 c0       	rjmp	.+36     	; 0x1fa2 <main+0xcc>
    1f7e:	ce 01       	movw	r24, r28
    1f80:	c7 96       	adiw	r24, 0x37	; 55
    1f82:	3d de       	rcall	.-902    	; 0x1bfe <Passowrd_init>
	 * must be cleared and new password to be saved*/
	/* To exit the loop the two passwords must be exact*/
	while( receive_password_msg == MISMATCH)
	{
		/* Initializing passowrd and sending it to be saved in eeprom*/
		Passowrd_init(password);
    1f84:	23 de       	rcall	.-954    	; 0x1bcc <LCD_clearScreen>
    1f86:	88 e7       	ldi	r24, 0x78	; 120
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 dd       	rcall	.-1216   	; 0x1acc <LCD_displayString>
		LCD_clearScreen();
    1f8c:	2d e6       	ldi	r18, 0x6D	; 109
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
		LCD_displayString("Please Reenter ");
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	a9 01       	movw	r20, r18
    1f96:	03 de       	rcall	.-1018   	; 0x1b9e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Password: ");
    1f98:	ce 01       	movw	r24, r28
    1f9a:	c7 96       	adiw	r24, 0x37	; 55
    1f9c:	eb de       	rcall	.-554    	; 0x1d74 <TakeSend_Password>
    1f9e:	9a d3       	rcall	.+1844   	; 0x26d4 <UART_recieveByte>
    1fa0:	8b a7       	std	Y+43, r24	; 0x2b
    1fa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa4:	88 23       	and	r24, r24
		TakeSend_Password(password);
    1fa6:	59 f3       	breq	.-42     	; 0x1f7e <main+0xa8>
    1fa8:	11 de       	rcall	.-990    	; 0x1bcc <LCD_clearScreen>
    1faa:	88 e8       	ldi	r24, 0x88	; 136
    1fac:	90 e0       	ldi	r25, 0x00	; 0
		/* Control micro send messege after compering the reentered password*/
		receive_password_msg = UART_recieveByte();
    1fae:	8e dd       	rcall	.-1252   	; 0x1acc <LCD_displayString>
    1fb0:	27 e9       	ldi	r18, 0x97	; 151
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
	 */
	uint8 password[7] = {0} , receive_password_msg = MISMATCH; /* Initially mismatch to enter the loop 1st time*/
	/* In case of mismatch of password the password
	 * must be cleared and new password to be saved*/
	/* To exit the loop the two passwords must be exact*/
	while( receive_password_msg == MISMATCH)
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18

	while(1)
	{

		/*Displaying options*/
		LCD_clearScreen();
    1fba:	f1 dd       	rcall	.-1054   	; 0x1b9e <LCD_displayStringRowColumn>
    1fbc:	a3 d8       	rcall	.-3770   	; 0x1104 <KEYPAD_getPressedKey>
		LCD_displayString(" + : Open Door");
    1fbe:	8d a7       	std	Y+45, r24	; 0x2d
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	aa ef       	ldi	r26, 0xFA	; 250
		LCD_displayStringRowColumn(1, 0, " - : Change Password");
    1fc6:	b3 e4       	ldi	r27, 0x43	; 67
    1fc8:	8f a3       	std	Y+39, r24	; 0x27
    1fca:	98 a7       	std	Y+40, r25	; 0x28
    1fcc:	a9 a7       	std	Y+41, r26	; 0x29
    1fce:	ba a7       	std	Y+42, r27	; 0x2a
    1fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8b a3       	std	Y+35, r24	; 0x23
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	9c a3       	std	Y+36, r25	; 0x24
    1fec:	ad a3       	std	Y+37, r26	; 0x25
    1fee:	be a3       	std	Y+38, r27	; 0x26
    1ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <main+0x13c>
    2008:	81 e0       	ldi	r24, 0x01	; 1
	if (__tmp < 1.0)
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <main+0x1ba>
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
		__ticks = 1;
    2022:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <main+0x1a6>
    202a:	6f a1       	ldd	r22, Y+39	; 0x27
	else if (__tmp > 65535)
    202c:	78 a5       	ldd	r23, Y+40	; 0x28
    202e:	89 a5       	ldd	r24, Y+41	; 0x29
    2030:	9a a5       	ldd	r25, Y+42	; 0x2a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <main+0x19c>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	98 a3       	std	Y+32, r25	; 0x20
    205a:	8f 8f       	std	Y+31, r24	; 0x1f
    205c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205e:	98 a1       	ldd	r25, Y+32	; 0x20
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <main+0x18a>
    2064:	98 a3       	std	Y+32, r25	; 0x20
    2066:	8f 8f       	std	Y+31, r24	; 0x1f
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <main+0x17e>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <main+0x1ce>
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	9a a3       	std	Y+34, r25	; 0x22
    208e:	89 a3       	std	Y+33, r24	; 0x21
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	9e 8f       	std	Y+30, r25	; 0x1e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	8d 8f       	std	Y+29, r24	; 0x1d
    2098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    209a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <main+0x1c6>
    20a0:	9e 8f       	std	Y+30, r25	; 0x1e
    20a2:	8d 8f       	std	Y+29, r24	; 0x1d
    20a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a6:	8b 32       	cpi	r24, 0x2B	; 43
    20a8:	09 f0       	breq	.+2      	; 0x20ac <main+0x1d6>
    20aa:	c9 c0       	rjmp	.+402    	; 0x223e <main+0x368>
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	fb d2       	rcall	.+1526   	; 0x26a6 <UART_sendByte>
    20b0:	8d dd       	rcall	.-1254   	; 0x1bcc <LCD_clearScreen>
    20b2:	8c ea       	ldi	r24, 0xAC	; 172
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0a dd       	rcall	.-1516   	; 0x1acc <LCD_displayString>
    20b8:	2d e6       	ldi	r18, 0x6D	; 109
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
		 * keep getting the value of the pressed key until it is the right choice
		 */
		option = KEYPAD_getPressedKey();
		_delay_ms(500);

		if(option == '+')/* Open Door */
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	a9 01       	movw	r20, r18
    20c2:	6d dd       	rcall	.-1318   	; 0x1b9e <LCD_displayStringRowColumn>
    20c4:	ce 01       	movw	r24, r28
		{

			/* Sending Door open request to control micro */
			UART_sendByte(OPENDOOR);
    20c6:	c7 96       	adiw	r24, 0x37	; 55
    20c8:	55 de       	rcall	.-854    	; 0x1d74 <TakeSend_Password>
    20ca:	04 d3       	rcall	.+1544   	; 0x26d4 <UART_recieveByte>
			LCD_clearScreen();
    20cc:	8b a7       	std	Y+43, r24	; 0x2b
    20ce:	8b a5       	ldd	r24, Y+43	; 0x2b
			LCD_displayString("Please Enter ");
    20d0:	88 23       	and	r24, r24
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <main+0x200>
    20d4:	7b c0       	rjmp	.+246    	; 0x21cc <main+0x2f6>
    20d6:	7a dd       	rcall	.-1292   	; 0x1bcc <LCD_clearScreen>
			LCD_displayStringRowColumn(1, 0, "Password: ");
    20d8:	8a eb       	ldi	r24, 0xBA	; 186
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	f7 dc       	rcall	.-1554   	; 0x1acc <LCD_displayString>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	aa e7       	ldi	r26, 0x7A	; 122
    20e4:	b4 e4       	ldi	r27, 0x44	; 68
			TakeSend_Password(password);/* Taking password and sending it to check if it's correct */
    20e6:	89 8f       	std	Y+25, r24	; 0x19
    20e8:	9a 8f       	std	Y+26, r25	; 0x1a
    20ea:	ab 8f       	std	Y+27, r26	; 0x1b
    20ec:	bc 8f       	std	Y+28, r27	; 0x1c
			/* Control micro send messege after compering the password with saved one */
			receive_password_msg = UART_recieveByte();
    20ee:	69 8d       	ldd	r22, Y+25	; 0x19
    20f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
			if(receive_password_msg == MISMATCH)
    20f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	4a ef       	ldi	r20, 0xFA	; 250
			{
				LCD_clearScreen();
    20fc:	54 e4       	ldi	r21, 0x44	; 68
    20fe:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	8d 8b       	std	Y+21, r24	; 0x15
    2108:	9e 8b       	std	Y+22, r25	; 0x16
    210a:	af 8b       	std	Y+23, r26	; 0x17
    210c:	b8 8f       	std	Y+24, r27	; 0x18
    210e:	6d 89       	ldd	r22, Y+21	; 0x15
    2110:	7e 89       	ldd	r23, Y+22	; 0x16
    2112:	8f 89       	ldd	r24, Y+23	; 0x17
    2114:	98 8d       	ldd	r25, Y+24	; 0x18
    2116:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e8       	ldi	r20, 0x80	; 128
    211c:	5f e3       	ldi	r21, 0x3F	; 63
    211e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
    2122:	88 23       	and	r24, r24
    2124:	2c f4       	brge	.+10     	; 0x2130 <main+0x25a>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 8b       	std	Y+20, r25	; 0x14
    212c:	8b 8b       	std	Y+19, r24	; 0x13
    212e:	3f c0       	rjmp	.+126    	; 0x21ae <main+0x2d8>
    2130:	6d 89       	ldd	r22, Y+21	; 0x15
    2132:	7e 89       	ldd	r23, Y+22	; 0x16
    2134:	8f 89       	ldd	r24, Y+23	; 0x17
    2136:	98 8d       	ldd	r25, Y+24	; 0x18
	if (__tmp < 1.0)
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	3f ef       	ldi	r19, 0xFF	; 255
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	57 e4       	ldi	r21, 0x47	; 71
    2140:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	4c f5       	brge	.+82     	; 0x219a <main+0x2c4>
    2148:	69 8d       	ldd	r22, Y+25	; 0x19
    214a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214e:	9c 8d       	ldd	r25, Y+28	; 0x1c
		__ticks = 1;
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e2       	ldi	r20, 0x20	; 32
    2156:	51 e4       	ldi	r21, 0x41	; 65
    2158:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
	else if (__tmp > 65535)
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	88 ec       	ldi	r24, 0xC8	; 200
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9a 8b       	std	Y+18, r25	; 0x12
    2178:	89 8b       	std	Y+17, r24	; 0x11
    217a:	89 89       	ldd	r24, Y+17	; 0x11
    217c:	9a 89       	ldd	r25, Y+18	; 0x12
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <main+0x2a8>
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	8b 89       	ldd	r24, Y+19	; 0x13
    2188:	9c 89       	ldd	r25, Y+20	; 0x14
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	9c 8b       	std	Y+20, r25	; 0x14
    218e:	8b 8b       	std	Y+19, r24	; 0x13
    2190:	8b 89       	ldd	r24, Y+19	; 0x13
    2192:	9c 89       	ldd	r25, Y+20	; 0x14
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	69 f7       	brne	.-38     	; 0x2172 <main+0x29c>
    2198:	14 c0       	rjmp	.+40     	; 0x21c2 <main+0x2ec>
    219a:	6d 89       	ldd	r22, Y+21	; 0x15
    219c:	7e 89       	ldd	r23, Y+22	; 0x16
    219e:	8f 89       	ldd	r24, Y+23	; 0x17
    21a0:	98 8d       	ldd	r25, Y+24	; 0x18
    21a2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	9c 8b       	std	Y+20, r25	; 0x14
    21ac:	8b 8b       	std	Y+19, r24	; 0x13
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	98 8b       	std	Y+16, r25	; 0x10
    21b4:	8f 87       	std	Y+15, r24	; 0x0f
    21b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b8:	98 89       	ldd	r25, Y+16	; 0x10
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <main+0x2e4>
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	04 dd       	rcall	.-1528   	; 0x1bcc <LCD_clearScreen>
    21c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	8c a7       	std	Y+44, r24	; 0x2c
    21ca:	de c0       	rjmp	.+444    	; 0x2388 <main+0x4b2>
    21cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <main+0x2fe>
    21d2:	da c0       	rjmp	.+436    	; 0x2388 <main+0x4b2>
    21d4:	85 e0       	ldi	r24, 0x05	; 5
    21d6:	67 d2       	rcall	.+1230   	; 0x26a6 <UART_sendByte>
    21d8:	7d d2       	rcall	.+1274   	; 0x26d4 <UART_recieveByte>
    21da:	ce 01       	movw	r24, r28
    21dc:	c3 96       	adiw	r24, 0x33	; 51
    21de:	56 d1       	rcall	.+684    	; 0x248c <Timer0_init>
    21e0:	f5 dc       	rcall	.-1558   	; 0x1bcc <LCD_clearScreen>
    21e2:	10 92 1d 01 	sts	0x011D, r1
    21e6:	10 92 1c 01 	sts	0x011C, r1
    21ea:	8a ec       	ldi	r24, 0xCA	; 202
				LCD_displayString(" Wrong Password");
				_delay_ms(1000);
				LCD_clearScreen();
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	6e dc       	rcall	.-1828   	; 0x1acc <LCD_displayString>
				/* Increment wrong trials*/
				wrong_trials++;
    21f0:	80 91 1c 01 	lds	r24, 0x011C
    21f4:	90 91 1d 01 	lds	r25, 0x011D
			}
			else if(receive_password_msg == MATCH)
    21f8:	a1 e0       	ldi	r26, 0x01	; 1
    21fa:	89 3c       	cpi	r24, 0xC9	; 201
    21fc:	9a 07       	cpc	r25, r26
    21fe:	c0 f3       	brcs	.-16     	; 0x21f0 <main+0x31a>
			{
				/* Wait for Control MC to be ready to start and send ready messege */
				UART_sendByte(READY);
    2200:	e5 dc       	rcall	.-1590   	; 0x1bcc <LCD_clearScreen>
    2202:	89 ed       	ldi	r24, 0xD9	; 217
    2204:	90 e0       	ldi	r25, 0x00	; 0
				UART_recieveByte();
    2206:	62 dc       	rcall	.-1852   	; 0x1acc <LCD_displayString>
    2208:	80 91 1c 01 	lds	r24, 0x011C
				/* Initializing Timer to count the time for openning and closing the door*/
				Timer0_init(&Config_Timer0);
    220c:	90 91 1d 01 	lds	r25, 0x011D
    2210:	b2 e0       	ldi	r27, 0x02	; 2
				LCD_clearScreen();
    2212:	84 32       	cpi	r24, 0x24	; 36
    2214:	9b 07       	cpc	r25, r27
				g_timer0Ticks = 0;
    2216:	c0 f3       	brcs	.-16     	; 0x2208 <main+0x332>
    2218:	d9 dc       	rcall	.-1614   	; 0x1bcc <LCD_clearScreen>
    221a:	87 ee       	ldi	r24, 0xE7	; 231
    221c:	90 e0       	ldi	r25, 0x00	; 0
				LCD_displayString("Door unlocking");
    221e:	56 dc       	rcall	.-1876   	; 0x1acc <LCD_displayString>
    2220:	80 91 1c 01 	lds	r24, 0x011C
    2224:	90 91 1d 01 	lds	r25, 0x011D
				/* wait 15 sec till the door is open */
				while(g_timer0Ticks < SEC_15);
    2228:	e3 e0       	ldi	r30, 0x03	; 3
    222a:	8d 3e       	cpi	r24, 0xED	; 237
    222c:	9e 07       	cpc	r25, r30
    222e:	c0 f3       	brcs	.-16     	; 0x2220 <main+0x34a>
    2230:	bb d1       	rcall	.+886    	; 0x25a8 <Timer0_DeInit>
    2232:	10 92 1d 01 	sts	0x011D, r1
				/* Start count for 3 sec */
				LCD_clearScreen();
    2236:	10 92 1c 01 	sts	0x011C, r1
				LCD_displayString(" Door is Open");
    223a:	1c a6       	std	Y+44, r1	; 0x2c
    223c:	a5 c0       	rjmp	.+330    	; 0x2388 <main+0x4b2>
    223e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2240:	8d 32       	cpi	r24, 0x2D	; 45
				/* Waiting 3 sec */
				while( g_timer0Ticks < SEC_18);
    2242:	09 f0       	breq	.+2      	; 0x2246 <main+0x370>
    2244:	a1 c0       	rjmp	.+322    	; 0x2388 <main+0x4b2>
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	2e d2       	rcall	.+1116   	; 0x26a6 <UART_sendByte>
    224a:	c0 dc       	rcall	.-1664   	; 0x1bcc <LCD_clearScreen>
    224c:	8c ea       	ldi	r24, 0xAC	; 172
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	3d dc       	rcall	.-1926   	; 0x1acc <LCD_displayString>
				/* Start count for 15 sec */
				LCD_clearScreen();
    2252:	2d e6       	ldi	r18, 0x6D	; 109
    2254:	30 e0       	ldi	r19, 0x00	; 0
				LCD_displayString(" Door locking");
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	a9 01       	movw	r20, r18
    225c:	a0 dc       	rcall	.-1728   	; 0x1b9e <LCD_displayStringRowColumn>
				while( g_timer0Ticks < SEC_33);
    225e:	ce 01       	movw	r24, r28
    2260:	c7 96       	adiw	r24, 0x37	; 55
    2262:	88 dd       	rcall	.-1264   	; 0x1d74 <TakeSend_Password>
    2264:	37 d2       	rcall	.+1134   	; 0x26d4 <UART_recieveByte>
    2266:	8b a7       	std	Y+43, r24	; 0x2b
    2268:	8b a5       	ldd	r24, Y+43	; 0x2b
    226a:	88 23       	and	r24, r24
    226c:	09 f0       	breq	.+2      	; 0x2270 <main+0x39a>
				/* Stopping Timer to reset it */
				Timer0_DeInit();
    226e:	7b c0       	rjmp	.+246    	; 0x2366 <main+0x490>
    2270:	ad dc       	rcall	.-1702   	; 0x1bcc <LCD_clearScreen>
				g_timer0Ticks = 0;
    2272:	8a eb       	ldi	r24, 0xBA	; 186
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	2a dc       	rcall	.-1964   	; 0x1acc <LCD_displayString>
    2278:	80 e0       	ldi	r24, 0x00	; 0
				/* Clearing wrong trials because the password was right before 3rd trial */
				wrong_trials = 0;
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	aa e7       	ldi	r26, 0x7A	; 122
			}
		}
		else if(option == '-') /*  change password */
    227e:	b4 e4       	ldi	r27, 0x44	; 68
    2280:	8b 87       	std	Y+11, r24	; 0x0b
    2282:	9c 87       	std	Y+12, r25	; 0x0c
    2284:	ad 87       	std	Y+13, r26	; 0x0d
		{
			/* Sending to Controller micro pass change request */
			UART_sendByte(CHANGEPASS);
    2286:	be 87       	std	Y+14, r27	; 0x0e
    2288:	6b 85       	ldd	r22, Y+11	; 0x0b
    228a:	7c 85       	ldd	r23, Y+12	; 0x0c
			LCD_clearScreen();
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
			LCD_displayString("Please Enter ");
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
			LCD_displayStringRowColumn(1, 0, "Password: ");
    2298:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8f 83       	std	Y+7, r24	; 0x07
    22a2:	98 87       	std	Y+8, r25	; 0x08
    22a4:	a9 87       	std	Y+9, r26	; 0x09
			TakeSend_Password(password); /* Comparing it to the saved password */
    22a6:	ba 87       	std	Y+10, r27	; 0x0a
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
			/* Control micro send messege after compering the reentered password*/
			receive_password_msg = UART_recieveByte();
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
			if(receive_password_msg == MISMATCH)
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__ltsf2>
			{
				LCD_clearScreen();
    22bc:	88 23       	and	r24, r24
    22be:	2c f4       	brge	.+10     	; 0x22ca <main+0x3f4>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <main+0x472>
    22ca:	6f 81       	ldd	r22, Y+7	; 0x07
    22cc:	78 85       	ldd	r23, Y+8	; 0x08
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 09 03 	call	0x612	; 0x612 <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	4c f5       	brge	.+82     	; 0x2334 <main+0x45e>
    22e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
	if (__tmp < 1.0)
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	0f c0       	rjmp	.+30     	; 0x232a <main+0x454>
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
    231a:	f1 f7       	brne	.-4      	; 0x2318 <main+0x442>
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <main+0x436>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <main+0x486>
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <main+0x47e>
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	37 dc       	rcall	.-1938   	; 0x1bcc <LCD_clearScreen>
    235e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	8c a7       	std	Y+44, r24	; 0x2c
    2364:	11 c0       	rjmp	.+34     	; 0x2388 <main+0x4b2>
    2366:	8b a5       	ldd	r24, Y+43	; 0x2b
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	71 f4       	brne	.+28     	; 0x2388 <main+0x4b2>
    236c:	2f dc       	rcall	.-1954   	; 0x1bcc <LCD_clearScreen>
    236e:	85 ef       	ldi	r24, 0xF5	; 245
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	ac db       	rcall	.-2216   	; 0x1acc <LCD_displayString>
    2374:	2d e6       	ldi	r18, 0x6D	; 109
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	a9 01       	movw	r20, r18
    237e:	0f dc       	rcall	.-2018   	; 0x1b9e <LCD_displayStringRowColumn>
    2380:	ce 01       	movw	r24, r28
    2382:	c7 96       	adiw	r24, 0x37	; 55
    2384:	f7 dc       	rcall	.-1554   	; 0x1d74 <TakeSend_Password>
    2386:	1c a6       	std	Y+44, r1	; 0x2c
    2388:	8c a5       	ldd	r24, Y+44	; 0x2c
    238a:	83 30       	cpi	r24, 0x03	; 3
    238c:	09 f0       	breq	.+2      	; 0x2390 <main+0x4ba>
    238e:	0c ce       	rjmp	.-1000   	; 0x1fa8 <main+0xd2>
    2390:	84 e0       	ldi	r24, 0x04	; 4
    2392:	89 d1       	rcall	.+786    	; 0x26a6 <UART_sendByte>
    2394:	1b dc       	rcall	.-1994   	; 0x1bcc <LCD_clearScreen>
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	98 db       	rcall	.-2256   	; 0x1acc <LCD_displayString>
    239c:	ce 01       	movw	r24, r28
    239e:	c3 96       	adiw	r24, 0x33	; 51
    23a0:	75 d0       	rcall	.+234    	; 0x248c <Timer0_init>
    23a2:	80 91 1c 01 	lds	r24, 0x011C
    23a6:	90 91 1d 01 	lds	r25, 0x011D
    23aa:	f7 e0       	ldi	r31, 0x07	; 7
				LCD_displayString(" Wrong Password");
				_delay_ms(1000);
				LCD_clearScreen();
    23ac:	84 32       	cpi	r24, 0x24	; 36
    23ae:	9f 07       	cpc	r25, r31
				/* Incrementing wrong trials */
				wrong_trials++;
    23b0:	c0 f3       	brcs	.-16     	; 0x23a2 <main+0x4cc>
    23b2:	fa d0       	rcall	.+500    	; 0x25a8 <Timer0_DeInit>
    23b4:	10 92 1d 01 	sts	0x011D, r1
			}
			else if (receive_password_msg == MATCH)
    23b8:	10 92 1c 01 	sts	0x011C, r1
    23bc:	1c a6       	std	Y+44, r1	; 0x2c
			{
				LCD_clearScreen();
    23be:	f4 cd       	rjmp	.-1048   	; 0x1fa8 <main+0xd2>

000023c0 <__vector_9>:
 *
 *******************************************************************************/

/* Interrupt Service Routine for Timer0 Normal mode */
ISR(TIMER0_OVF_vect)
{
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Normal != NULL_PTR)
    23ea:	80 91 1e 01 	lds	r24, 0x011E
    23ee:	90 91 1f 01 	lds	r25, 0x011F
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	29 f0       	breq	.+10     	; 0x2400 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Normal)();
    23f6:	e0 91 1e 01 	lds	r30, 0x011E
    23fa:	f0 91 1f 01 	lds	r31, 0x011F
    23fe:	09 95       	icall
	}
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	ff 91       	pop	r31
    2406:	ef 91       	pop	r30
    2408:	bf 91       	pop	r27
    240a:	af 91       	pop	r26
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	7f 91       	pop	r23
    2412:	6f 91       	pop	r22
    2414:	5f 91       	pop	r21
    2416:	4f 91       	pop	r20
    2418:	3f 91       	pop	r19
    241a:	2f 91       	pop	r18
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <__vector_19>:


/* Interrupt Service Routine for Timer0 Compare mode */
ISR(TIMER0_COMP_vect)
{
    2426:	1f 92       	push	r1
    2428:	0f 92       	push	r0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	0f 92       	push	r0
    242e:	11 24       	eor	r1, r1
    2430:	2f 93       	push	r18
    2432:	3f 93       	push	r19
    2434:	4f 93       	push	r20
    2436:	5f 93       	push	r21
    2438:	6f 93       	push	r22
    243a:	7f 93       	push	r23
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
    2444:	ef 93       	push	r30
    2446:	ff 93       	push	r31
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Compare != NULL_PTR)
    2450:	80 91 20 01 	lds	r24, 0x0120
    2454:	90 91 21 01 	lds	r25, 0x0121
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	29 f0       	breq	.+10     	; 0x2466 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Compare)();
    245c:	e0 91 20 01 	lds	r30, 0x0120
    2460:	f0 91 21 01 	lds	r31, 0x0121
    2464:	09 95       	icall
	}
}
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	ff 91       	pop	r31
    246c:	ef 91       	pop	r30
    246e:	bf 91       	pop	r27
    2470:	af 91       	pop	r26
    2472:	9f 91       	pop	r25
    2474:	8f 91       	pop	r24
    2476:	7f 91       	pop	r23
    2478:	6f 91       	pop	r22
    247a:	5f 91       	pop	r21
    247c:	4f 91       	pop	r20
    247e:	3f 91       	pop	r19
    2480:	2f 91       	pop	r18
    2482:	0f 90       	pop	r0
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	0f 90       	pop	r0
    2488:	1f 90       	pop	r1
    248a:	18 95       	reti

0000248c <Timer0_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer0_init(Timer0_ConfigType *Config_PTR)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <Timer0_init+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
	 * Normal mode:   WGM00 = 0 , WGM01 = 0
	 * PWM mode:      WGM00 = 1 , WGM01 = 0
	 * CTC mode:      WGM00 = 0 , WGM01 = 1
	 * Fast PWM mode: WGM00 = 1 , WGM01 = 1
	 **************************************************************************************/
	TCCR0 = (((Config_PTR->mode >> 1) << WGM01) & 1) | ((Config_PTR->mode & 1) << WGM00);
    249a:	a3 e5       	ldi	r26, 0x53	; 83
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e9 81       	ldd	r30, Y+1	; 0x01
    24a0:	fa 81       	ldd	r31, Y+2	; 0x02
    24a2:	80 81       	ld	r24, Z
    24a4:	81 70       	andi	r24, 0x01	; 1
    24a6:	82 95       	swap	r24
    24a8:	88 0f       	add	r24, r24
    24aa:	88 0f       	add	r24, r24
    24ac:	80 7c       	andi	r24, 0xC0	; 192
    24ae:	8c 93       	st	X, r24
	/* Non PWM mode FOC0=1*/
	TCCR0 |= (1<<FOC0);
    24b0:	a3 e5       	ldi	r26, 0x53	; 83
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e3 e5       	ldi	r30, 0x53	; 83
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	80 68       	ori	r24, 0x80	; 128
    24bc:	8c 93       	st	X, r24

	/*Setting Timer clock by setting 1st 3-bits CS00:2*/
	TCCR0 |=  (0x07 & Config_PTR->clock);
    24be:	a3 e5       	ldi	r26, 0x53	; 83
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e3 e5       	ldi	r30, 0x53	; 83
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	98 2f       	mov	r25, r24
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	81 81       	ldd	r24, Z+1	; 0x01
    24d0:	87 70       	andi	r24, 0x07	; 7
    24d2:	89 2b       	or	r24, r25
    24d4:	8c 93       	st	X, r24

	TCNT0 = Config_PTR->init_value; //Set Timer initial value
    24d6:	a2 e5       	ldi	r26, 0x52	; 82
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 81       	ldd	r30, Y+1	; 0x01
    24dc:	fa 81       	ldd	r31, Y+2	; 0x02
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	8c 93       	st	X, r24

	OCR0 = Config_PTR->OCR0_value; // Set Compare Value
    24e2:	ac e5       	ldi	r26, 0x5C	; 92
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e9 81       	ldd	r30, Y+1	; 0x01
    24e8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ea:	83 81       	ldd	r24, Z+3	; 0x03
    24ec:	8c 93       	st	X, r24

	/*Enabling Interrupts according to the mode  */
	if(BIT_IS_CLEAR(TCCR0 , WGM01))
    24ee:	e3 e5       	ldi	r30, 0x53	; 83
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	88 70       	andi	r24, 0x08	; 8
    24fa:	90 70       	andi	r25, 0x00	; 0
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	79 f4       	brne	.+30     	; 0x251e <Timer0_init+0x92>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2500:	a9 e5       	ldi	r26, 0x59	; 89
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e9 e5       	ldi	r30, 0x59	; 89
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	81 60       	ori	r24, 0x01	; 1
    250c:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0); // Disable Timer0 Compare Interrupt
    250e:	a9 e5       	ldi	r26, 0x59	; 89
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e9 e5       	ldi	r30, 0x59	; 89
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	8d 7f       	andi	r24, 0xFD	; 253
    251a:	8c 93       	st	X, r24
    251c:	17 c0       	rjmp	.+46     	; 0x254c <Timer0_init+0xc0>
	}
	else if(BIT_IS_SET(TCCR0 , WGM01))
    251e:	e3 e5       	ldi	r30, 0x53	; 83
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	88 70       	andi	r24, 0x08	; 8
    252a:	90 70       	andi	r25, 0x00	; 0
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	71 f0       	breq	.+28     	; 0x254c <Timer0_init+0xc0>
	{
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2530:	a9 e5       	ldi	r26, 0x59	; 89
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e9 e5       	ldi	r30, 0x59	; 89
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	82 60       	ori	r24, 0x02	; 2
    253c:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0); // Disable Timer0 Overflow Interrupt
    253e:	a9 e5       	ldi	r26, 0x59	; 89
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e9 e5       	ldi	r30, 0x59	; 89
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8e 7f       	andi	r24, 0xFE	; 254
    254a:	8c 93       	st	X, r24
	}
	/*Enable Globel Interrupt*/
	SREG|=(1<<7);
    254c:	af e5       	ldi	r26, 0x5F	; 95
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ef e5       	ldi	r30, 0x5F	; 95
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	80 68       	ori	r24, 0x80	; 128
    2558:	8c 93       	st	X, r24

}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void) , Timer0_Mode mode)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <Timer0_setCallBack+0x6>
    256a:	0f 92       	push	r0
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	if(mode == NORMAL)
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	88 23       	and	r24, r24
    257a:	39 f4       	brne	.+14     	; 0x258a <Timer0_setCallBack+0x26>
	{
		g_callBackPtr_Normal = a_ptr; //Save Callback Function for Normal mode
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	90 93 1f 01 	sts	0x011F, r25
    2584:	80 93 1e 01 	sts	0x011E, r24
    2588:	09 c0       	rjmp	.+18     	; 0x259c <Timer0_setCallBack+0x38>
	}
	else if(mode == CTC)
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	82 30       	cpi	r24, 0x02	; 2
    258e:	31 f4       	brne	.+12     	; 0x259c <Timer0_setCallBack+0x38>
	{
		g_callBackPtr_Compare = a_ptr; //Save Callback Function for Compare mode
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	90 93 21 01 	sts	0x0121, r25
    2598:	80 93 20 01 	sts	0x0120, r24
	}
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <Timer0_DeInit>:

/*
 * Description: Function to disable the Timer0 Driver
 */
void Timer0_DeInit(void)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCCR0 = 0;
    25b0:	e3 e5       	ldi	r30, 0x53	; 83
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	10 82       	st	Z, r1
	TCNT0 = 0;
    25b6:	e2 e5       	ldi	r30, 0x52	; 82
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	10 82       	st	Z, r1
	OCR0 = 0;
    25bc:	ec e5       	ldi	r30, 0x5C	; 92
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	10 82       	st	Z, r1

	/* Disable the interrupts */
	TIMSK &= ~(1<<TOIE0); // Disable Timer0 Overflow Interrupt
    25c2:	a9 e5       	ldi	r26, 0x59	; 89
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e9 e5       	ldi	r30, 0x59	; 89
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8e 7f       	andi	r24, 0xFE	; 254
    25ce:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0); // Disable Timer0 Compare Interrupt
    25d0:	a9 e5       	ldi	r26, 0x59	; 89
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e9 e5       	ldi	r30, 0x59	; 89
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8d 7f       	andi	r24, 0xFD	; 253
    25dc:	8c 93       	st	X, r24

}
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(Uart_ConfigType * ConfigType_PTR)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <UART_init+0x6>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <UART_init+0x8>
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    25f4:	1a 82       	std	Y+2, r1	; 0x02
    25f6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25f8:	eb e2       	ldi	r30, 0x2B	; 43
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2600:	ea e2       	ldi	r30, 0x2A	; 42
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	88 e1       	ldi	r24, 0x18	; 24
    2606:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2608:	e0 e4       	ldi	r30, 0x40	; 64
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	86 e8       	ldi	r24, 0x86	; 134
    260e:	80 83       	st	Z, r24

	if(ConfigType_PTR->stop_bits_num == ONE_STOP_BIT)
    2610:	eb 81       	ldd	r30, Y+3	; 0x03
    2612:	fc 81       	ldd	r31, Y+4	; 0x04
    2614:	84 81       	ldd	r24, Z+4	; 0x04
    2616:	88 23       	and	r24, r24
    2618:	41 f4       	brne	.+16     	; 0x262a <UART_init+0x46>
	{
		CLEAR_BIT(UCSRC , USBS);
    261a:	a0 e4       	ldi	r26, 0x40	; 64
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e0 e4       	ldi	r30, 0x40	; 64
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	87 7f       	andi	r24, 0xF7	; 247
    2626:	8c 93       	st	X, r24
    2628:	0c c0       	rjmp	.+24     	; 0x2642 <UART_init+0x5e>
	}
	else if(ConfigType_PTR->stop_bits_num == TWO_STOP_BITS)
    262a:	eb 81       	ldd	r30, Y+3	; 0x03
    262c:	fc 81       	ldd	r31, Y+4	; 0x04
    262e:	84 81       	ldd	r24, Z+4	; 0x04
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	39 f4       	brne	.+14     	; 0x2642 <UART_init+0x5e>
	{
		SET_BIT(UCSRC , USBS);
    2634:	a0 e4       	ldi	r26, 0x40	; 64
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e0 e4       	ldi	r30, 0x40	; 64
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	88 60       	ori	r24, 0x08	; 8
    2640:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ConfigType_PTR->baud_rate * 8UL))) - 1);
    2642:	eb 81       	ldd	r30, Y+3	; 0x03
    2644:	fc 81       	ldd	r31, Y+4	; 0x04
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	a2 81       	ldd	r26, Z+2	; 0x02
    264c:	b3 81       	ldd	r27, Z+3	; 0x03
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	aa 1f       	adc	r26, r26
    2654:	bb 1f       	adc	r27, r27
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	aa 1f       	adc	r26, r26
    265c:	bb 1f       	adc	r27, r27
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	aa 1f       	adc	r26, r26
    2664:	bb 1f       	adc	r27, r27
    2666:	9c 01       	movw	r18, r24
    2668:	ad 01       	movw	r20, r26
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	92 e1       	ldi	r25, 0x12	; 18
    266e:	aa e7       	ldi	r26, 0x7A	; 122
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	65 d0       	rcall	.+202    	; 0x2742 <__udivmodsi4>
    2678:	da 01       	movw	r26, r20
    267a:	c9 01       	movw	r24, r18
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	e0 e4       	ldi	r30, 0x40	; 64

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	89 2f       	mov	r24, r25
    268c:	99 27       	eor	r25, r25
    268e:	80 83       	st	Z, r24
    2690:	e9 e2       	ldi	r30, 0x29	; 41
	UBRRL = ubrr_value;
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	0f 90       	pop	r0
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	0f 92       	push	r0
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26b2:	eb e2       	ldi	r30, 0x2B	; 43
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	80 72       	andi	r24, 0x20	; 32
    26be:	90 70       	andi	r25, 0x00	; 0
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	b9 f3       	breq	.-18     	; 0x26b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26c4:	ec e2       	ldi	r30, 0x2C	; 44
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    26cc:	0f 90       	pop	r0
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26dc:	eb e2       	ldi	r30, 0x2B	; 43
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	dc f7       	brge	.-10     	; 0x26dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    26e6:	ec e2       	ldi	r30, 0x2C	; 44
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
}
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <UART_sendString+0x6>
    26f8:	0f 92       	push	r0
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9b 83       	std	Y+3, r25	; 0x03
    2700:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2702:	19 82       	std	Y+1, r1	; 0x01
    2704:	0d c0       	rjmp	.+26     	; 0x2720 <UART_sendString+0x2e>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	80 81       	ld	r24, Z
    2718:	c6 df       	rcall	.-116    	; 0x26a6 <UART_sendByte>
    271a:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2722:	28 2f       	mov	r18, r24
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 81       	ld	r24, Z
    2732:	88 23       	and	r24, r24
    2734:	41 f7       	brne	.-48     	; 0x2706 <UART_sendString+0x14>
    2736:	0f 90       	pop	r0
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <__udivmodsi4>:
    2742:	a1 e2       	ldi	r26, 0x21	; 33
    2744:	1a 2e       	mov	r1, r26
    2746:	aa 1b       	sub	r26, r26
    2748:	bb 1b       	sub	r27, r27
    274a:	fd 01       	movw	r30, r26
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <__udivmodsi4_ep>

0000274e <__udivmodsi4_loop>:
    274e:	aa 1f       	adc	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	ee 1f       	adc	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	a2 17       	cp	r26, r18
    2758:	b3 07       	cpc	r27, r19
    275a:	e4 07       	cpc	r30, r20
    275c:	f5 07       	cpc	r31, r21
    275e:	20 f0       	brcs	.+8      	; 0x2768 <__udivmodsi4_ep>
    2760:	a2 1b       	sub	r26, r18
    2762:	b3 0b       	sbc	r27, r19
    2764:	e4 0b       	sbc	r30, r20
    2766:	f5 0b       	sbc	r31, r21

00002768 <__udivmodsi4_ep>:
    2768:	66 1f       	adc	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	1a 94       	dec	r1
    2772:	69 f7       	brne	.-38     	; 0x274e <__udivmodsi4_loop>
    2774:	60 95       	com	r22
    2776:	70 95       	com	r23
    2778:	80 95       	com	r24
    277a:	90 95       	com	r25
    277c:	9b 01       	movw	r18, r22
    277e:	ac 01       	movw	r20, r24
    2780:	bd 01       	movw	r22, r26
    2782:	cf 01       	movw	r24, r30
    2784:	08 95       	ret

00002786 <__prologue_saves__>:
    2786:	2f 92       	push	r2
    2788:	3f 92       	push	r3
    278a:	4f 92       	push	r4
    278c:	5f 92       	push	r5
    278e:	6f 92       	push	r6
    2790:	7f 92       	push	r7
    2792:	8f 92       	push	r8
    2794:	9f 92       	push	r9
    2796:	af 92       	push	r10
    2798:	bf 92       	push	r11
    279a:	cf 92       	push	r12
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	ca 1b       	sub	r28, r26
    27b0:	db 0b       	sbc	r29, r27
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	09 94       	ijmp

000027be <__epilogue_restores__>:
    27be:	2a 88       	ldd	r2, Y+18	; 0x12
    27c0:	39 88       	ldd	r3, Y+17	; 0x11
    27c2:	48 88       	ldd	r4, Y+16	; 0x10
    27c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    27cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d0:	b9 84       	ldd	r11, Y+9	; 0x09
    27d2:	c8 84       	ldd	r12, Y+8	; 0x08
    27d4:	df 80       	ldd	r13, Y+7	; 0x07
    27d6:	ee 80       	ldd	r14, Y+6	; 0x06
    27d8:	fd 80       	ldd	r15, Y+5	; 0x05
    27da:	0c 81       	ldd	r16, Y+4	; 0x04
    27dc:	1b 81       	ldd	r17, Y+3	; 0x03
    27de:	aa 81       	ldd	r26, Y+2	; 0x02
    27e0:	b9 81       	ldd	r27, Y+1	; 0x01
    27e2:	ce 0f       	add	r28, r30
    27e4:	d1 1d       	adc	r29, r1
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	ed 01       	movw	r28, r26
    27f2:	08 95       	ret

000027f4 <_exit>:
    27f4:	f8 94       	cli

000027f6 <__stop_program>:
    27f6:	ff cf       	rjmp	.-2      	; 0x27f6 <__stop_program>
