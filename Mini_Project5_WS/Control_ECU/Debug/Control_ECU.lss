
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001a6a  00001afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  00001b0c  2**0
                  ALLOC
  3 .stab         00001d7c  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000116d  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000068ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000077d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000086e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008975  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
      16:	00 00       	nop
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_9>
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_19>
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 09 	call	0x135a	; 0x135a <main>
      8a:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <__fixunssfsi>:
      90:	ef 92       	push	r14
      92:	ff 92       	push	r15
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	7b 01       	movw	r14, r22
      9a:	8c 01       	movw	r16, r24
      9c:	20 e0       	ldi	r18, 0x00	; 0
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	5f e4       	ldi	r21, 0x4F	; 79
      a4:	e3 d2       	rcall	.+1478   	; 0x66c <__gesf2>
      a6:	88 23       	and	r24, r24
      a8:	7c f0       	brlt	.+30     	; 0xc8 <__fixunssfsi+0x38>
      aa:	c8 01       	movw	r24, r16
      ac:	b7 01       	movw	r22, r14
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	5f e4       	ldi	r21, 0x4F	; 79
      b6:	60 d1       	rcall	.+704    	; 0x378 <__subsf3>
      b8:	33 d3       	rcall	.+1638   	; 0x720 <__fixsfsi>
      ba:	9b 01       	movw	r18, r22
      bc:	ac 01       	movw	r20, r24
      be:	20 50       	subi	r18, 0x00	; 0
      c0:	30 40       	sbci	r19, 0x00	; 0
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	50 48       	sbci	r21, 0x80	; 128
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <__fixunssfsi+0x42>
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	29 d3       	rcall	.+1618   	; 0x720 <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	b9 01       	movw	r22, r18
      d4:	ca 01       	movw	r24, r20
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	08 95       	ret

000000e0 <_fpadd_parts>:
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e6 e7       	ldi	r30, 0x76	; 118
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__prologue_saves__>
      ec:	dc 01       	movw	r26, r24
      ee:	2b 01       	movw	r4, r22
      f0:	fa 01       	movw	r30, r20
      f2:	9c 91       	ld	r25, X
      f4:	92 30       	cpi	r25, 0x02	; 2
      f6:	08 f4       	brcc	.+2      	; 0xfa <_fpadd_parts+0x1a>
      f8:	39 c1       	rjmp	.+626    	; 0x36c <_fpadd_parts+0x28c>
      fa:	eb 01       	movw	r28, r22
      fc:	88 81       	ld	r24, Y
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x24>
     102:	33 c1       	rjmp	.+614    	; 0x36a <_fpadd_parts+0x28a>
     104:	94 30       	cpi	r25, 0x04	; 4
     106:	69 f4       	brne	.+26     	; 0x122 <_fpadd_parts+0x42>
     108:	84 30       	cpi	r24, 0x04	; 4
     10a:	09 f0       	breq	.+2      	; 0x10e <_fpadd_parts+0x2e>
     10c:	2f c1       	rjmp	.+606    	; 0x36c <_fpadd_parts+0x28c>
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	9c 91       	ld	r25, X
     112:	11 97       	sbiw	r26, 0x01	; 1
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	98 17       	cp	r25, r24
     118:	09 f4       	brne	.+2      	; 0x11c <_fpadd_parts+0x3c>
     11a:	28 c1       	rjmp	.+592    	; 0x36c <_fpadd_parts+0x28c>
     11c:	a0 e6       	ldi	r26, 0x60	; 96
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	25 c1       	rjmp	.+586    	; 0x36c <_fpadd_parts+0x28c>
     122:	84 30       	cpi	r24, 0x04	; 4
     124:	09 f4       	brne	.+2      	; 0x128 <_fpadd_parts+0x48>
     126:	21 c1       	rjmp	.+578    	; 0x36a <_fpadd_parts+0x28a>
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	a9 f4       	brne	.+42     	; 0x156 <_fpadd_parts+0x76>
     12c:	92 30       	cpi	r25, 0x02	; 2
     12e:	09 f0       	breq	.+2      	; 0x132 <_fpadd_parts+0x52>
     130:	1d c1       	rjmp	.+570    	; 0x36c <_fpadd_parts+0x28c>
     132:	9a 01       	movw	r18, r20
     134:	ad 01       	movw	r20, r26
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	ea 01       	movw	r28, r20
     13a:	09 90       	ld	r0, Y+
     13c:	ae 01       	movw	r20, r28
     13e:	e9 01       	movw	r28, r18
     140:	09 92       	st	Y+, r0
     142:	9e 01       	movw	r18, r28
     144:	81 50       	subi	r24, 0x01	; 1
     146:	c1 f7       	brne	.-16     	; 0x138 <_fpadd_parts+0x58>
     148:	e2 01       	movw	r28, r4
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	9c 91       	ld	r25, X
     150:	89 23       	and	r24, r25
     152:	81 83       	std	Z+1, r24	; 0x01
     154:	08 c1       	rjmp	.+528    	; 0x366 <_fpadd_parts+0x286>
     156:	92 30       	cpi	r25, 0x02	; 2
     158:	09 f4       	brne	.+2      	; 0x15c <_fpadd_parts+0x7c>
     15a:	07 c1       	rjmp	.+526    	; 0x36a <_fpadd_parts+0x28a>
     15c:	12 96       	adiw	r26, 0x02	; 2
     15e:	2d 90       	ld	r2, X+
     160:	3c 90       	ld	r3, X
     162:	13 97       	sbiw	r26, 0x03	; 3
     164:	eb 01       	movw	r28, r22
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	14 96       	adiw	r26, 0x04	; 4
     16c:	ad 90       	ld	r10, X+
     16e:	bd 90       	ld	r11, X+
     170:	cd 90       	ld	r12, X+
     172:	dc 90       	ld	r13, X
     174:	17 97       	sbiw	r26, 0x07	; 7
     176:	ec 80       	ldd	r14, Y+4	; 0x04
     178:	fd 80       	ldd	r15, Y+5	; 0x05
     17a:	0e 81       	ldd	r16, Y+6	; 0x06
     17c:	1f 81       	ldd	r17, Y+7	; 0x07
     17e:	91 01       	movw	r18, r2
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	b9 01       	movw	r22, r18
     186:	37 ff       	sbrs	r19, 7
     188:	04 c0       	rjmp	.+8      	; 0x192 <_fpadd_parts+0xb2>
     18a:	66 27       	eor	r22, r22
     18c:	77 27       	eor	r23, r23
     18e:	62 1b       	sub	r22, r18
     190:	73 0b       	sbc	r23, r19
     192:	60 32       	cpi	r22, 0x20	; 32
     194:	71 05       	cpc	r23, r1
     196:	0c f0       	brlt	.+2      	; 0x19a <_fpadd_parts+0xba>
     198:	61 c0       	rjmp	.+194    	; 0x25c <_fpadd_parts+0x17c>
     19a:	12 16       	cp	r1, r18
     19c:	13 06       	cpc	r1, r19
     19e:	6c f5       	brge	.+90     	; 0x1fa <_fpadd_parts+0x11a>
     1a0:	37 01       	movw	r6, r14
     1a2:	48 01       	movw	r8, r16
     1a4:	06 2e       	mov	r0, r22
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xd0>
     1a8:	96 94       	lsr	r9
     1aa:	87 94       	ror	r8
     1ac:	77 94       	ror	r7
     1ae:	67 94       	ror	r6
     1b0:	0a 94       	dec	r0
     1b2:	d2 f7       	brpl	.-12     	; 0x1a8 <_fpadd_parts+0xc8>
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xe6>
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	44 1f       	adc	r20, r20
     1c4:	55 1f       	adc	r21, r21
     1c6:	6a 95       	dec	r22
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xde>
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	40 40       	sbci	r20, 0x00	; 0
     1d0:	50 40       	sbci	r21, 0x00	; 0
     1d2:	2e 21       	and	r18, r14
     1d4:	3f 21       	and	r19, r15
     1d6:	40 23       	and	r20, r16
     1d8:	51 23       	and	r21, r17
     1da:	21 15       	cp	r18, r1
     1dc:	31 05       	cpc	r19, r1
     1de:	41 05       	cpc	r20, r1
     1e0:	51 05       	cpc	r21, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <_fpadd_parts+0x10c>
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	79 01       	movw	r14, r18
     1ee:	8a 01       	movw	r16, r20
     1f0:	e6 28       	or	r14, r6
     1f2:	f7 28       	or	r15, r7
     1f4:	08 29       	or	r16, r8
     1f6:	19 29       	or	r17, r9
     1f8:	3c c0       	rjmp	.+120    	; 0x272 <_fpadd_parts+0x192>
     1fa:	23 2b       	or	r18, r19
     1fc:	d1 f1       	breq	.+116    	; 0x272 <_fpadd_parts+0x192>
     1fe:	26 0e       	add	r2, r22
     200:	37 1e       	adc	r3, r23
     202:	35 01       	movw	r6, r10
     204:	46 01       	movw	r8, r12
     206:	06 2e       	mov	r0, r22
     208:	04 c0       	rjmp	.+8      	; 0x212 <_fpadd_parts+0x132>
     20a:	96 94       	lsr	r9
     20c:	87 94       	ror	r8
     20e:	77 94       	ror	r7
     210:	67 94       	ror	r6
     212:	0a 94       	dec	r0
     214:	d2 f7       	brpl	.-12     	; 0x20a <_fpadd_parts+0x12a>
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x148>
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	44 1f       	adc	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x140>
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	30 40       	sbci	r19, 0x00	; 0
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	50 40       	sbci	r21, 0x00	; 0
     234:	2a 21       	and	r18, r10
     236:	3b 21       	and	r19, r11
     238:	4c 21       	and	r20, r12
     23a:	5d 21       	and	r21, r13
     23c:	21 15       	cp	r18, r1
     23e:	31 05       	cpc	r19, r1
     240:	41 05       	cpc	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	21 f0       	breq	.+8      	; 0x24e <_fpadd_parts+0x16e>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	59 01       	movw	r10, r18
     250:	6a 01       	movw	r12, r20
     252:	a6 28       	or	r10, r6
     254:	b7 28       	or	r11, r7
     256:	c8 28       	or	r12, r8
     258:	d9 28       	or	r13, r9
     25a:	0b c0       	rjmp	.+22     	; 0x272 <_fpadd_parts+0x192>
     25c:	82 15       	cp	r24, r2
     25e:	93 05       	cpc	r25, r3
     260:	2c f0       	brlt	.+10     	; 0x26c <_fpadd_parts+0x18c>
     262:	1c 01       	movw	r2, r24
     264:	aa 24       	eor	r10, r10
     266:	bb 24       	eor	r11, r11
     268:	65 01       	movw	r12, r10
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_fpadd_parts+0x192>
     26c:	ee 24       	eor	r14, r14
     26e:	ff 24       	eor	r15, r15
     270:	87 01       	movw	r16, r14
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	9c 91       	ld	r25, X
     276:	d2 01       	movw	r26, r4
     278:	11 96       	adiw	r26, 0x01	; 1
     27a:	8c 91       	ld	r24, X
     27c:	98 17       	cp	r25, r24
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x1a2>
     280:	45 c0       	rjmp	.+138    	; 0x30c <_fpadd_parts+0x22c>
     282:	99 23       	and	r25, r25
     284:	39 f0       	breq	.+14     	; 0x294 <_fpadd_parts+0x1b4>
     286:	a8 01       	movw	r20, r16
     288:	97 01       	movw	r18, r14
     28a:	2a 19       	sub	r18, r10
     28c:	3b 09       	sbc	r19, r11
     28e:	4c 09       	sbc	r20, r12
     290:	5d 09       	sbc	r21, r13
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <_fpadd_parts+0x1c0>
     294:	a6 01       	movw	r20, r12
     296:	95 01       	movw	r18, r10
     298:	2e 19       	sub	r18, r14
     29a:	3f 09       	sbc	r19, r15
     29c:	40 0b       	sbc	r20, r16
     29e:	51 0b       	sbc	r21, r17
     2a0:	57 fd       	sbrc	r21, 7
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_fpadd_parts+0x1d4>
     2a4:	11 82       	std	Z+1, r1	; 0x01
     2a6:	33 82       	std	Z+3, r3	; 0x03
     2a8:	22 82       	std	Z+2, r2	; 0x02
     2aa:	24 83       	std	Z+4, r18	; 0x04
     2ac:	35 83       	std	Z+5, r19	; 0x05
     2ae:	46 83       	std	Z+6, r20	; 0x06
     2b0:	57 83       	std	Z+7, r21	; 0x07
     2b2:	1d c0       	rjmp	.+58     	; 0x2ee <_fpadd_parts+0x20e>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	33 82       	std	Z+3, r3	; 0x03
     2ba:	22 82       	std	Z+2, r2	; 0x02
     2bc:	88 27       	eor	r24, r24
     2be:	99 27       	eor	r25, r25
     2c0:	dc 01       	movw	r26, r24
     2c2:	82 1b       	sub	r24, r18
     2c4:	93 0b       	sbc	r25, r19
     2c6:	a4 0b       	sbc	r26, r20
     2c8:	b5 0b       	sbc	r27, r21
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	a6 83       	std	Z+6, r26	; 0x06
     2d0:	b7 83       	std	Z+7, r27	; 0x07
     2d2:	0d c0       	rjmp	.+26     	; 0x2ee <_fpadd_parts+0x20e>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	44 1f       	adc	r20, r20
     2da:	55 1f       	adc	r21, r21
     2dc:	24 83       	std	Z+4, r18	; 0x04
     2de:	35 83       	std	Z+5, r19	; 0x05
     2e0:	46 83       	std	Z+6, r20	; 0x06
     2e2:	57 83       	std	Z+7, r21	; 0x07
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	24 81       	ldd	r18, Z+4	; 0x04
     2f0:	35 81       	ldd	r19, Z+5	; 0x05
     2f2:	46 81       	ldd	r20, Z+6	; 0x06
     2f4:	57 81       	ldd	r21, Z+7	; 0x07
     2f6:	da 01       	movw	r26, r20
     2f8:	c9 01       	movw	r24, r18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	a1 09       	sbc	r26, r1
     2fe:	b1 09       	sbc	r27, r1
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	9f 4f       	sbci	r25, 0xFF	; 255
     304:	af 4f       	sbci	r26, 0xFF	; 255
     306:	bf 43       	sbci	r27, 0x3F	; 63
     308:	28 f3       	brcs	.-54     	; 0x2d4 <_fpadd_parts+0x1f4>
     30a:	0b c0       	rjmp	.+22     	; 0x322 <_fpadd_parts+0x242>
     30c:	91 83       	std	Z+1, r25	; 0x01
     30e:	33 82       	std	Z+3, r3	; 0x03
     310:	22 82       	std	Z+2, r2	; 0x02
     312:	ea 0c       	add	r14, r10
     314:	fb 1c       	adc	r15, r11
     316:	0c 1d       	adc	r16, r12
     318:	1d 1d       	adc	r17, r13
     31a:	e4 82       	std	Z+4, r14	; 0x04
     31c:	f5 82       	std	Z+5, r15	; 0x05
     31e:	06 83       	std	Z+6, r16	; 0x06
     320:	17 83       	std	Z+7, r17	; 0x07
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 83       	st	Z, r24
     326:	24 81       	ldd	r18, Z+4	; 0x04
     328:	35 81       	ldd	r19, Z+5	; 0x05
     32a:	46 81       	ldd	r20, Z+6	; 0x06
     32c:	57 81       	ldd	r21, Z+7	; 0x07
     32e:	57 ff       	sbrs	r21, 7
     330:	1a c0       	rjmp	.+52     	; 0x366 <_fpadd_parts+0x286>
     332:	c9 01       	movw	r24, r18
     334:	aa 27       	eor	r26, r26
     336:	97 fd       	sbrc	r25, 7
     338:	a0 95       	com	r26
     33a:	ba 2f       	mov	r27, r26
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 70       	andi	r25, 0x00	; 0
     340:	a0 70       	andi	r26, 0x00	; 0
     342:	b0 70       	andi	r27, 0x00	; 0
     344:	56 95       	lsr	r21
     346:	47 95       	ror	r20
     348:	37 95       	ror	r19
     34a:	27 95       	ror	r18
     34c:	82 2b       	or	r24, r18
     34e:	93 2b       	or	r25, r19
     350:	a4 2b       	or	r26, r20
     352:	b5 2b       	or	r27, r21
     354:	84 83       	std	Z+4, r24	; 0x04
     356:	95 83       	std	Z+5, r25	; 0x05
     358:	a6 83       	std	Z+6, r26	; 0x06
     35a:	b7 83       	std	Z+7, r27	; 0x07
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	93 83       	std	Z+3, r25	; 0x03
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	df 01       	movw	r26, r30
     368:	01 c0       	rjmp	.+2      	; 0x36c <_fpadd_parts+0x28c>
     36a:	d2 01       	movw	r26, r4
     36c:	cd 01       	movw	r24, r26
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	e2 e1       	ldi	r30, 0x12	; 18
     374:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__epilogue_restores__>

00000378 <__subsf3>:
     378:	a0 e2       	ldi	r26, 0x20	; 32
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 ec       	ldi	r30, 0xC2	; 194
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__+0x18>
     384:	69 83       	std	Y+1, r22	; 0x01
     386:	7a 83       	std	Y+2, r23	; 0x02
     388:	8b 83       	std	Y+3, r24	; 0x03
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	2d 83       	std	Y+5, r18	; 0x05
     38e:	3e 83       	std	Y+6, r19	; 0x06
     390:	4f 83       	std	Y+7, r20	; 0x07
     392:	58 87       	std	Y+8, r21	; 0x08
     394:	e9 e0       	ldi	r30, 0x09	; 9
     396:	ee 2e       	mov	r14, r30
     398:	f1 2c       	mov	r15, r1
     39a:	ec 0e       	add	r14, r28
     39c:	fd 1e       	adc	r15, r29
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	b7 01       	movw	r22, r14
     3a4:	e5 d2       	rcall	.+1482   	; 0x970 <__unpack_f>
     3a6:	8e 01       	movw	r16, r28
     3a8:	0f 5e       	subi	r16, 0xEF	; 239
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	b8 01       	movw	r22, r16
     3b2:	de d2       	rcall	.+1468   	; 0x970 <__unpack_f>
     3b4:	8a 89       	ldd	r24, Y+18	; 0x12
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	89 27       	eor	r24, r25
     3ba:	8a 8b       	std	Y+18, r24	; 0x12
     3bc:	c7 01       	movw	r24, r14
     3be:	b8 01       	movw	r22, r16
     3c0:	ae 01       	movw	r20, r28
     3c2:	47 5e       	subi	r20, 0xE7	; 231
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	8c de       	rcall	.-744    	; 0xe0 <_fpadd_parts>
     3c8:	fe d1       	rcall	.+1020   	; 0x7c6 <__pack_f>
     3ca:	a0 96       	adiw	r28, 0x20	; 32
     3cc:	e6 e0       	ldi	r30, 0x06	; 6
     3ce:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__+0x18>

000003d2 <__addsf3>:
     3d2:	a0 e2       	ldi	r26, 0x20	; 32
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ef ee       	ldi	r30, 0xEF	; 239
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__+0x18>
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	7a 83       	std	Y+2, r23	; 0x02
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	2d 83       	std	Y+5, r18	; 0x05
     3e8:	3e 83       	std	Y+6, r19	; 0x06
     3ea:	4f 83       	std	Y+7, r20	; 0x07
     3ec:	58 87       	std	Y+8, r21	; 0x08
     3ee:	f9 e0       	ldi	r31, 0x09	; 9
     3f0:	ef 2e       	mov	r14, r31
     3f2:	f1 2c       	mov	r15, r1
     3f4:	ec 0e       	add	r14, r28
     3f6:	fd 1e       	adc	r15, r29
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	b7 01       	movw	r22, r14
     3fe:	b8 d2       	rcall	.+1392   	; 0x970 <__unpack_f>
     400:	8e 01       	movw	r16, r28
     402:	0f 5e       	subi	r16, 0xEF	; 239
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	05 96       	adiw	r24, 0x05	; 5
     40a:	b8 01       	movw	r22, r16
     40c:	b1 d2       	rcall	.+1378   	; 0x970 <__unpack_f>
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	63 de       	rcall	.-826    	; 0xe0 <_fpadd_parts>
     41a:	d5 d1       	rcall	.+938    	; 0x7c6 <__pack_f>
     41c:	a0 96       	adiw	r28, 0x20	; 32
     41e:	e6 e0       	ldi	r30, 0x06	; 6
     420:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__+0x18>

00000424 <__mulsf3>:
     424:	a0 e2       	ldi	r26, 0x20	; 32
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e8 e1       	ldi	r30, 0x18	; 24
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__prologue_saves__>
     430:	69 83       	std	Y+1, r22	; 0x01
     432:	7a 83       	std	Y+2, r23	; 0x02
     434:	8b 83       	std	Y+3, r24	; 0x03
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	2d 83       	std	Y+5, r18	; 0x05
     43a:	3e 83       	std	Y+6, r19	; 0x06
     43c:	4f 83       	std	Y+7, r20	; 0x07
     43e:	58 87       	std	Y+8, r21	; 0x08
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	be 01       	movw	r22, r28
     446:	67 5f       	subi	r22, 0xF7	; 247
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	92 d2       	rcall	.+1316   	; 0x970 <__unpack_f>
     44c:	ce 01       	movw	r24, r28
     44e:	05 96       	adiw	r24, 0x05	; 5
     450:	be 01       	movw	r22, r28
     452:	6f 5e       	subi	r22, 0xEF	; 239
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	8c d2       	rcall	.+1304   	; 0x970 <__unpack_f>
     458:	99 85       	ldd	r25, Y+9	; 0x09
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	88 f0       	brcs	.+34     	; 0x480 <__stack+0x21>
     45e:	89 89       	ldd	r24, Y+17	; 0x11
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	c8 f0       	brcs	.+50     	; 0x496 <__stack+0x37>
     464:	94 30       	cpi	r25, 0x04	; 4
     466:	19 f4       	brne	.+6      	; 0x46e <__stack+0xf>
     468:	82 30       	cpi	r24, 0x02	; 2
     46a:	51 f4       	brne	.+20     	; 0x480 <__stack+0x21>
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__stack+0x17>
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	29 f4       	brne	.+10     	; 0x47c <__stack+0x1d>
     472:	92 30       	cpi	r25, 0x02	; 2
     474:	81 f4       	brne	.+32     	; 0x496 <__stack+0x37>
     476:	80 e6       	ldi	r24, 0x60	; 96
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	c6 c0       	rjmp	.+396    	; 0x608 <__stack+0x1a9>
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	49 f4       	brne	.+18     	; 0x492 <__stack+0x33>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	9a 85       	ldd	r25, Y+10	; 0x0a
     484:	8a 89       	ldd	r24, Y+18	; 0x12
     486:	98 13       	cpse	r25, r24
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	2a 87       	std	Y+10, r18	; 0x0a
     48c:	ce 01       	movw	r24, r28
     48e:	09 96       	adiw	r24, 0x09	; 9
     490:	bb c0       	rjmp	.+374    	; 0x608 <__stack+0x1a9>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	49 f4       	brne	.+18     	; 0x4a8 <__stack+0x49>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	98 13       	cpse	r25, r24
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	2a 8b       	std	Y+18, r18	; 0x12
     4a2:	ce 01       	movw	r24, r28
     4a4:	41 96       	adiw	r24, 0x11	; 17
     4a6:	b0 c0       	rjmp	.+352    	; 0x608 <__stack+0x1a9>
     4a8:	2d 84       	ldd	r2, Y+13	; 0x0d
     4aa:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ac:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ae:	58 88       	ldd	r5, Y+16	; 0x10
     4b0:	6d 88       	ldd	r6, Y+21	; 0x15
     4b2:	7e 88       	ldd	r7, Y+22	; 0x16
     4b4:	8f 88       	ldd	r8, Y+23	; 0x17
     4b6:	98 8c       	ldd	r9, Y+24	; 0x18
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	87 01       	movw	r16, r14
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	65 01       	movw	r12, r10
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	c1 01       	movw	r24, r2
     4d2:	81 70       	andi	r24, 0x01	; 1
     4d4:	90 70       	andi	r25, 0x00	; 0
     4d6:	89 2b       	or	r24, r25
     4d8:	e9 f0       	breq	.+58     	; 0x514 <__stack+0xb5>
     4da:	e6 0c       	add	r14, r6
     4dc:	f7 1c       	adc	r15, r7
     4de:	08 1d       	adc	r16, r8
     4e0:	19 1d       	adc	r17, r9
     4e2:	9a 01       	movw	r18, r20
     4e4:	ab 01       	movw	r20, r22
     4e6:	2a 0d       	add	r18, r10
     4e8:	3b 1d       	adc	r19, r11
     4ea:	4c 1d       	adc	r20, r12
     4ec:	5d 1d       	adc	r21, r13
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e6 14       	cp	r14, r6
     4f8:	f7 04       	cpc	r15, r7
     4fa:	08 05       	cpc	r16, r8
     4fc:	19 05       	cpc	r17, r9
     4fe:	20 f4       	brcc	.+8      	; 0x508 <__stack+0xa9>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	ba 01       	movw	r22, r20
     50a:	a9 01       	movw	r20, r18
     50c:	48 0f       	add	r20, r24
     50e:	59 1f       	adc	r21, r25
     510:	6a 1f       	adc	r22, r26
     512:	7b 1f       	adc	r23, r27
     514:	aa 0c       	add	r10, r10
     516:	bb 1c       	adc	r11, r11
     518:	cc 1c       	adc	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	97 fe       	sbrs	r9, 7
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__stack+0xd1>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	a8 2a       	or	r10, r24
     52a:	b9 2a       	or	r11, r25
     52c:	ca 2a       	or	r12, r26
     52e:	db 2a       	or	r13, r27
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	e0 32       	cpi	r30, 0x20	; 32
     534:	f1 05       	cpc	r31, r1
     536:	49 f0       	breq	.+18     	; 0x54a <__stack+0xeb>
     538:	66 0c       	add	r6, r6
     53a:	77 1c       	adc	r7, r7
     53c:	88 1c       	adc	r8, r8
     53e:	99 1c       	adc	r9, r9
     540:	56 94       	lsr	r5
     542:	47 94       	ror	r4
     544:	37 94       	ror	r3
     546:	27 94       	ror	r2
     548:	c3 cf       	rjmp	.-122    	; 0x4d0 <__stack+0x71>
     54a:	fa 85       	ldd	r31, Y+10	; 0x0a
     54c:	ea 89       	ldd	r30, Y+18	; 0x12
     54e:	2b 89       	ldd	r18, Y+19	; 0x13
     550:	3c 89       	ldd	r19, Y+20	; 0x14
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	28 0f       	add	r18, r24
     558:	39 1f       	adc	r19, r25
     55a:	2e 5f       	subi	r18, 0xFE	; 254
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x12f>
     560:	ca 01       	movw	r24, r20
     562:	81 70       	andi	r24, 0x01	; 1
     564:	90 70       	andi	r25, 0x00	; 0
     566:	89 2b       	or	r24, r25
     568:	61 f0       	breq	.+24     	; 0x582 <__stack+0x123>
     56a:	16 95       	lsr	r17
     56c:	07 95       	ror	r16
     56e:	f7 94       	ror	r15
     570:	e7 94       	ror	r14
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e8       	ldi	r27, 0x80	; 128
     57a:	e8 2a       	or	r14, r24
     57c:	f9 2a       	or	r15, r25
     57e:	0a 2b       	or	r16, r26
     580:	1b 2b       	or	r17, r27
     582:	76 95       	lsr	r23
     584:	67 95       	ror	r22
     586:	57 95       	ror	r21
     588:	47 95       	ror	r20
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	77 fd       	sbrc	r23, 7
     590:	e7 cf       	rjmp	.-50     	; 0x560 <__stack+0x101>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <__stack+0x14d>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	17 fd       	sbrc	r17, 7
     59e:	41 60       	ori	r20, 0x01	; 1
     5a0:	ee 0c       	add	r14, r14
     5a2:	ff 1c       	adc	r15, r15
     5a4:	00 1f       	adc	r16, r16
     5a6:	11 1f       	adc	r17, r17
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	30 40       	sbci	r19, 0x00	; 0
     5ac:	40 30       	cpi	r20, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	59 07       	cpc	r21, r25
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	69 07       	cpc	r22, r25
     5b6:	90 e4       	ldi	r25, 0x40	; 64
     5b8:	79 07       	cpc	r23, r25
     5ba:	60 f3       	brcs	.-40     	; 0x594 <__stack+0x135>
     5bc:	2b 8f       	std	Y+27, r18	; 0x1b
     5be:	3c 8f       	std	Y+28, r19	; 0x1c
     5c0:	db 01       	movw	r26, r22
     5c2:	ca 01       	movw	r24, r20
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__stack+0x18f>
     5d6:	47 fd       	sbrc	r20, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__stack+0x18f>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__stack+0x18f>
     5e4:	40 5c       	subi	r20, 0xC0	; 192
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	40 78       	andi	r20, 0x80	; 128
     5ee:	1a 8e       	std	Y+26, r1	; 0x1a
     5f0:	fe 17       	cp	r31, r30
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <__stack+0x199>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8a 8f       	std	Y+26, r24	; 0x1a
     5f8:	4d 8f       	std	Y+29, r20	; 0x1d
     5fa:	5e 8f       	std	Y+30, r21	; 0x1e
     5fc:	6f 8f       	std	Y+31, r22	; 0x1f
     5fe:	78 a3       	std	Y+32, r23	; 0x20
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	89 8f       	std	Y+25, r24	; 0x19
     604:	ce 01       	movw	r24, r28
     606:	49 96       	adiw	r24, 0x19	; 25
     608:	de d0       	rcall	.+444    	; 0x7c6 <__pack_f>
     60a:	a0 96       	adiw	r28, 0x20	; 32
     60c:	e2 e1       	ldi	r30, 0x12	; 18
     60e:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__epilogue_restores__>

00000612 <__gtsf2>:
     612:	a8 e1       	ldi	r26, 0x18	; 24
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ef e0       	ldi	r30, 0x0F	; 15
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__+0x18>
     61e:	69 83       	std	Y+1, r22	; 0x01
     620:	7a 83       	std	Y+2, r23	; 0x02
     622:	8b 83       	std	Y+3, r24	; 0x03
     624:	9c 83       	std	Y+4, r25	; 0x04
     626:	2d 83       	std	Y+5, r18	; 0x05
     628:	3e 83       	std	Y+6, r19	; 0x06
     62a:	4f 83       	std	Y+7, r20	; 0x07
     62c:	58 87       	std	Y+8, r21	; 0x08
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	e8 2e       	mov	r14, r24
     632:	f1 2c       	mov	r15, r1
     634:	ec 0e       	add	r14, r28
     636:	fd 1e       	adc	r15, r29
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	b7 01       	movw	r22, r14
     63e:	98 d1       	rcall	.+816    	; 0x970 <__unpack_f>
     640:	8e 01       	movw	r16, r28
     642:	0f 5e       	subi	r16, 0xEF	; 239
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	ce 01       	movw	r24, r28
     648:	05 96       	adiw	r24, 0x05	; 5
     64a:	b8 01       	movw	r22, r16
     64c:	91 d1       	rcall	.+802    	; 0x970 <__unpack_f>
     64e:	89 85       	ldd	r24, Y+9	; 0x09
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	38 f0       	brcs	.+14     	; 0x662 <__gtsf2+0x50>
     654:	89 89       	ldd	r24, Y+17	; 0x11
     656:	82 30       	cpi	r24, 0x02	; 2
     658:	20 f0       	brcs	.+8      	; 0x662 <__gtsf2+0x50>
     65a:	c7 01       	movw	r24, r14
     65c:	b8 01       	movw	r22, r16
     65e:	00 d2       	rcall	.+1024   	; 0xa60 <__fpcmp_parts_f>
     660:	01 c0       	rjmp	.+2      	; 0x664 <__gtsf2+0x52>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	68 96       	adiw	r28, 0x18	; 24
     666:	e6 e0       	ldi	r30, 0x06	; 6
     668:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__+0x18>

0000066c <__gesf2>:
     66c:	a8 e1       	ldi	r26, 0x18	; 24
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	ec e3       	ldi	r30, 0x3C	; 60
     672:	f3 e0       	ldi	r31, 0x03	; 3
     674:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__+0x18>
     678:	69 83       	std	Y+1, r22	; 0x01
     67a:	7a 83       	std	Y+2, r23	; 0x02
     67c:	8b 83       	std	Y+3, r24	; 0x03
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	2d 83       	std	Y+5, r18	; 0x05
     682:	3e 83       	std	Y+6, r19	; 0x06
     684:	4f 83       	std	Y+7, r20	; 0x07
     686:	58 87       	std	Y+8, r21	; 0x08
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	e8 2e       	mov	r14, r24
     68c:	f1 2c       	mov	r15, r1
     68e:	ec 0e       	add	r14, r28
     690:	fd 1e       	adc	r15, r29
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	b7 01       	movw	r22, r14
     698:	6b d1       	rcall	.+726    	; 0x970 <__unpack_f>
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5e       	subi	r16, 0xEF	; 239
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	b8 01       	movw	r22, r16
     6a6:	64 d1       	rcall	.+712    	; 0x970 <__unpack_f>
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	38 f0       	brcs	.+14     	; 0x6bc <__gesf2+0x50>
     6ae:	89 89       	ldd	r24, Y+17	; 0x11
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	20 f0       	brcs	.+8      	; 0x6bc <__gesf2+0x50>
     6b4:	c7 01       	movw	r24, r14
     6b6:	b8 01       	movw	r22, r16
     6b8:	d3 d1       	rcall	.+934    	; 0xa60 <__fpcmp_parts_f>
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <__gesf2+0x52>
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	68 96       	adiw	r28, 0x18	; 24
     6c0:	e6 e0       	ldi	r30, 0x06	; 6
     6c2:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__+0x18>

000006c6 <__ltsf2>:
     6c6:	a8 e1       	ldi	r26, 0x18	; 24
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e9 e6       	ldi	r30, 0x69	; 105
     6cc:	f3 e0       	ldi	r31, 0x03	; 3
     6ce:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__+0x18>
     6d2:	69 83       	std	Y+1, r22	; 0x01
     6d4:	7a 83       	std	Y+2, r23	; 0x02
     6d6:	8b 83       	std	Y+3, r24	; 0x03
     6d8:	9c 83       	std	Y+4, r25	; 0x04
     6da:	2d 83       	std	Y+5, r18	; 0x05
     6dc:	3e 83       	std	Y+6, r19	; 0x06
     6de:	4f 83       	std	Y+7, r20	; 0x07
     6e0:	58 87       	std	Y+8, r21	; 0x08
     6e2:	89 e0       	ldi	r24, 0x09	; 9
     6e4:	e8 2e       	mov	r14, r24
     6e6:	f1 2c       	mov	r15, r1
     6e8:	ec 0e       	add	r14, r28
     6ea:	fd 1e       	adc	r15, r29
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	b7 01       	movw	r22, r14
     6f2:	3e d1       	rcall	.+636    	; 0x970 <__unpack_f>
     6f4:	8e 01       	movw	r16, r28
     6f6:	0f 5e       	subi	r16, 0xEF	; 239
     6f8:	1f 4f       	sbci	r17, 0xFF	; 255
     6fa:	ce 01       	movw	r24, r28
     6fc:	05 96       	adiw	r24, 0x05	; 5
     6fe:	b8 01       	movw	r22, r16
     700:	37 d1       	rcall	.+622    	; 0x970 <__unpack_f>
     702:	89 85       	ldd	r24, Y+9	; 0x09
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	38 f0       	brcs	.+14     	; 0x716 <__ltsf2+0x50>
     708:	89 89       	ldd	r24, Y+17	; 0x11
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	20 f0       	brcs	.+8      	; 0x716 <__ltsf2+0x50>
     70e:	c7 01       	movw	r24, r14
     710:	b8 01       	movw	r22, r16
     712:	a6 d1       	rcall	.+844    	; 0xa60 <__fpcmp_parts_f>
     714:	01 c0       	rjmp	.+2      	; 0x718 <__ltsf2+0x52>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	68 96       	adiw	r28, 0x18	; 24
     71a:	e6 e0       	ldi	r30, 0x06	; 6
     71c:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__+0x18>

00000720 <__fixsfsi>:
     720:	ac e0       	ldi	r26, 0x0C	; 12
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e6 e9       	ldi	r30, 0x96	; 150
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__+0x20>
     72c:	69 83       	std	Y+1, r22	; 0x01
     72e:	7a 83       	std	Y+2, r23	; 0x02
     730:	8b 83       	std	Y+3, r24	; 0x03
     732:	9c 83       	std	Y+4, r25	; 0x04
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	be 01       	movw	r22, r28
     73a:	6b 5f       	subi	r22, 0xFB	; 251
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	18 d1       	rcall	.+560    	; 0x970 <__unpack_f>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	61 f1       	breq	.+88     	; 0x79e <__fixsfsi+0x7e>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	50 f1       	brcs	.+84     	; 0x79e <__fixsfsi+0x7e>
     74a:	84 30       	cpi	r24, 0x04	; 4
     74c:	21 f4       	brne	.+8      	; 0x756 <__fixsfsi+0x36>
     74e:	8e 81       	ldd	r24, Y+6	; 0x06
     750:	88 23       	and	r24, r24
     752:	51 f1       	breq	.+84     	; 0x7a8 <__fixsfsi+0x88>
     754:	2e c0       	rjmp	.+92     	; 0x7b2 <__fixsfsi+0x92>
     756:	2f 81       	ldd	r18, Y+7	; 0x07
     758:	38 85       	ldd	r19, Y+8	; 0x08
     75a:	37 fd       	sbrc	r19, 7
     75c:	20 c0       	rjmp	.+64     	; 0x79e <__fixsfsi+0x7e>
     75e:	6e 81       	ldd	r22, Y+6	; 0x06
     760:	2f 31       	cpi	r18, 0x1F	; 31
     762:	31 05       	cpc	r19, r1
     764:	1c f0       	brlt	.+6      	; 0x76c <__fixsfsi+0x4c>
     766:	66 23       	and	r22, r22
     768:	f9 f0       	breq	.+62     	; 0x7a8 <__fixsfsi+0x88>
     76a:	23 c0       	rjmp	.+70     	; 0x7b2 <__fixsfsi+0x92>
     76c:	8e e1       	ldi	r24, 0x1E	; 30
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	82 1b       	sub	r24, r18
     772:	93 0b       	sbc	r25, r19
     774:	29 85       	ldd	r18, Y+9	; 0x09
     776:	3a 85       	ldd	r19, Y+10	; 0x0a
     778:	4b 85       	ldd	r20, Y+11	; 0x0b
     77a:	5c 85       	ldd	r21, Y+12	; 0x0c
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__fixsfsi+0x66>
     77e:	56 95       	lsr	r21
     780:	47 95       	ror	r20
     782:	37 95       	ror	r19
     784:	27 95       	ror	r18
     786:	8a 95       	dec	r24
     788:	d2 f7       	brpl	.-12     	; 0x77e <__fixsfsi+0x5e>
     78a:	66 23       	and	r22, r22
     78c:	b1 f0       	breq	.+44     	; 0x7ba <__fixsfsi+0x9a>
     78e:	50 95       	com	r21
     790:	40 95       	com	r20
     792:	30 95       	com	r19
     794:	21 95       	neg	r18
     796:	3f 4f       	sbci	r19, 0xFF	; 255
     798:	4f 4f       	sbci	r20, 0xFF	; 255
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	0e c0       	rjmp	.+28     	; 0x7ba <__fixsfsi+0x9a>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__fixsfsi+0x9a>
     7a8:	2f ef       	ldi	r18, 0xFF	; 255
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	4f ef       	ldi	r20, 0xFF	; 255
     7ae:	5f e7       	ldi	r21, 0x7F	; 127
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x9a>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e8       	ldi	r21, 0x80	; 128
     7ba:	b9 01       	movw	r22, r18
     7bc:	ca 01       	movw	r24, r20
     7be:	2c 96       	adiw	r28, 0x0c	; 12
     7c0:	e2 e0       	ldi	r30, 0x02	; 2
     7c2:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__+0x20>

000007c6 <__pack_f>:
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	fc 01       	movw	r30, r24
     7d2:	e4 80       	ldd	r14, Z+4	; 0x04
     7d4:	f5 80       	ldd	r15, Z+5	; 0x05
     7d6:	06 81       	ldd	r16, Z+6	; 0x06
     7d8:	17 81       	ldd	r17, Z+7	; 0x07
     7da:	d1 80       	ldd	r13, Z+1	; 0x01
     7dc:	80 81       	ld	r24, Z
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	48 f4       	brcc	.+18     	; 0x7f4 <__pack_f+0x2e>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e1       	ldi	r26, 0x10	; 16
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	e8 2a       	or	r14, r24
     7ec:	f9 2a       	or	r15, r25
     7ee:	0a 2b       	or	r16, r26
     7f0:	1b 2b       	or	r17, r27
     7f2:	a5 c0       	rjmp	.+330    	; 0x93e <__pack_f+0x178>
     7f4:	84 30       	cpi	r24, 0x04	; 4
     7f6:	09 f4       	brne	.+2      	; 0x7fa <__pack_f+0x34>
     7f8:	9f c0       	rjmp	.+318    	; 0x938 <__pack_f+0x172>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	21 f4       	brne	.+8      	; 0x806 <__pack_f+0x40>
     7fe:	ee 24       	eor	r14, r14
     800:	ff 24       	eor	r15, r15
     802:	87 01       	movw	r16, r14
     804:	05 c0       	rjmp	.+10     	; 0x810 <__pack_f+0x4a>
     806:	e1 14       	cp	r14, r1
     808:	f1 04       	cpc	r15, r1
     80a:	01 05       	cpc	r16, r1
     80c:	11 05       	cpc	r17, r1
     80e:	19 f4       	brne	.+6      	; 0x816 <__pack_f+0x50>
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	96 c0       	rjmp	.+300    	; 0x942 <__pack_f+0x17c>
     816:	62 81       	ldd	r22, Z+2	; 0x02
     818:	73 81       	ldd	r23, Z+3	; 0x03
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	62 38       	cpi	r22, 0x82	; 130
     81e:	79 07       	cpc	r23, r25
     820:	0c f0       	brlt	.+2      	; 0x824 <__pack_f+0x5e>
     822:	5b c0       	rjmp	.+182    	; 0x8da <__pack_f+0x114>
     824:	22 e8       	ldi	r18, 0x82	; 130
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	26 1b       	sub	r18, r22
     82a:	37 0b       	sbc	r19, r23
     82c:	2a 31       	cpi	r18, 0x1A	; 26
     82e:	31 05       	cpc	r19, r1
     830:	2c f0       	brlt	.+10     	; 0x83c <__pack_f+0x76>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	2a c0       	rjmp	.+84     	; 0x890 <__pack_f+0xca>
     83c:	b8 01       	movw	r22, r16
     83e:	a7 01       	movw	r20, r14
     840:	02 2e       	mov	r0, r18
     842:	04 c0       	rjmp	.+8      	; 0x84c <__pack_f+0x86>
     844:	76 95       	lsr	r23
     846:	67 95       	ror	r22
     848:	57 95       	ror	r21
     84a:	47 95       	ror	r20
     84c:	0a 94       	dec	r0
     84e:	d2 f7       	brpl	.-12     	; 0x844 <__pack_f+0x7e>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	04 c0       	rjmp	.+8      	; 0x862 <__pack_f+0x9c>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	aa 1f       	adc	r26, r26
     860:	bb 1f       	adc	r27, r27
     862:	2a 95       	dec	r18
     864:	d2 f7       	brpl	.-12     	; 0x85a <__pack_f+0x94>
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	a1 09       	sbc	r26, r1
     86a:	b1 09       	sbc	r27, r1
     86c:	8e 21       	and	r24, r14
     86e:	9f 21       	and	r25, r15
     870:	a0 23       	and	r26, r16
     872:	b1 23       	and	r27, r17
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	a1 05       	cpc	r26, r1
     878:	b1 05       	cpc	r27, r1
     87a:	21 f0       	breq	.+8      	; 0x884 <__pack_f+0xbe>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e0       	ldi	r26, 0x00	; 0
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	9a 01       	movw	r18, r20
     886:	ab 01       	movw	r20, r22
     888:	28 2b       	or	r18, r24
     88a:	39 2b       	or	r19, r25
     88c:	4a 2b       	or	r20, r26
     88e:	5b 2b       	or	r21, r27
     890:	da 01       	movw	r26, r20
     892:	c9 01       	movw	r24, r18
     894:	8f 77       	andi	r24, 0x7F	; 127
     896:	90 70       	andi	r25, 0x00	; 0
     898:	a0 70       	andi	r26, 0x00	; 0
     89a:	b0 70       	andi	r27, 0x00	; 0
     89c:	80 34       	cpi	r24, 0x40	; 64
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	39 f4       	brne	.+14     	; 0x8b4 <__pack_f+0xee>
     8a6:	27 ff       	sbrs	r18, 7
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__pack_f+0xf6>
     8aa:	20 5c       	subi	r18, 0xC0	; 192
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	4f 4f       	sbci	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__pack_f+0xf6>
     8b4:	21 5c       	subi	r18, 0xC1	; 193
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	e0 e0       	ldi	r30, 0x00	; 0
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	20 30       	cpi	r18, 0x00	; 0
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	3a 07       	cpc	r19, r26
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	4a 07       	cpc	r20, r26
     8ca:	a0 e4       	ldi	r26, 0x40	; 64
     8cc:	5a 07       	cpc	r21, r26
     8ce:	10 f0       	brcs	.+4      	; 0x8d4 <__pack_f+0x10e>
     8d0:	e1 e0       	ldi	r30, 0x01	; 1
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	79 01       	movw	r14, r18
     8d6:	8a 01       	movw	r16, r20
     8d8:	27 c0       	rjmp	.+78     	; 0x928 <__pack_f+0x162>
     8da:	60 38       	cpi	r22, 0x80	; 128
     8dc:	71 05       	cpc	r23, r1
     8de:	64 f5       	brge	.+88     	; 0x938 <__pack_f+0x172>
     8e0:	fb 01       	movw	r30, r22
     8e2:	e1 58       	subi	r30, 0x81	; 129
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	d8 01       	movw	r26, r16
     8e8:	c7 01       	movw	r24, r14
     8ea:	8f 77       	andi	r24, 0x7F	; 127
     8ec:	90 70       	andi	r25, 0x00	; 0
     8ee:	a0 70       	andi	r26, 0x00	; 0
     8f0:	b0 70       	andi	r27, 0x00	; 0
     8f2:	80 34       	cpi	r24, 0x40	; 64
     8f4:	91 05       	cpc	r25, r1
     8f6:	a1 05       	cpc	r26, r1
     8f8:	b1 05       	cpc	r27, r1
     8fa:	39 f4       	brne	.+14     	; 0x90a <__pack_f+0x144>
     8fc:	e7 fe       	sbrs	r14, 7
     8fe:	0d c0       	rjmp	.+26     	; 0x91a <__pack_f+0x154>
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	04 c0       	rjmp	.+8      	; 0x912 <__pack_f+0x14c>
     90a:	8f e3       	ldi	r24, 0x3F	; 63
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	e8 0e       	add	r14, r24
     914:	f9 1e       	adc	r15, r25
     916:	0a 1f       	adc	r16, r26
     918:	1b 1f       	adc	r17, r27
     91a:	17 ff       	sbrs	r17, 7
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__pack_f+0x162>
     91e:	16 95       	lsr	r17
     920:	07 95       	ror	r16
     922:	f7 94       	ror	r15
     924:	e7 94       	ror	r14
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	87 e0       	ldi	r24, 0x07	; 7
     92a:	16 95       	lsr	r17
     92c:	07 95       	ror	r16
     92e:	f7 94       	ror	r15
     930:	e7 94       	ror	r14
     932:	8a 95       	dec	r24
     934:	d1 f7       	brne	.-12     	; 0x92a <__pack_f+0x164>
     936:	05 c0       	rjmp	.+10     	; 0x942 <__pack_f+0x17c>
     938:	ee 24       	eor	r14, r14
     93a:	ff 24       	eor	r15, r15
     93c:	87 01       	movw	r16, r14
     93e:	ef ef       	ldi	r30, 0xFF	; 255
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	6e 2f       	mov	r22, r30
     944:	67 95       	ror	r22
     946:	66 27       	eor	r22, r22
     948:	67 95       	ror	r22
     94a:	90 2f       	mov	r25, r16
     94c:	9f 77       	andi	r25, 0x7F	; 127
     94e:	d7 94       	ror	r13
     950:	dd 24       	eor	r13, r13
     952:	d7 94       	ror	r13
     954:	8e 2f       	mov	r24, r30
     956:	86 95       	lsr	r24
     958:	49 2f       	mov	r20, r25
     95a:	46 2b       	or	r20, r22
     95c:	58 2f       	mov	r21, r24
     95e:	5d 29       	or	r21, r13
     960:	b7 01       	movw	r22, r14
     962:	ca 01       	movw	r24, r20
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	08 95       	ret

00000970 <__unpack_f>:
     970:	fc 01       	movw	r30, r24
     972:	db 01       	movw	r26, r22
     974:	40 81       	ld	r20, Z
     976:	51 81       	ldd	r21, Z+1	; 0x01
     978:	22 81       	ldd	r18, Z+2	; 0x02
     97a:	62 2f       	mov	r22, r18
     97c:	6f 77       	andi	r22, 0x7F	; 127
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	22 1f       	adc	r18, r18
     982:	22 27       	eor	r18, r18
     984:	22 1f       	adc	r18, r18
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	89 2f       	mov	r24, r25
     98a:	88 0f       	add	r24, r24
     98c:	82 2b       	or	r24, r18
     98e:	28 2f       	mov	r18, r24
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	99 1f       	adc	r25, r25
     994:	99 27       	eor	r25, r25
     996:	99 1f       	adc	r25, r25
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	9c 93       	st	X, r25
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	a9 f5       	brne	.+106    	; 0xa0e <__unpack_f+0x9e>
     9a4:	41 15       	cp	r20, r1
     9a6:	51 05       	cpc	r21, r1
     9a8:	61 05       	cpc	r22, r1
     9aa:	71 05       	cpc	r23, r1
     9ac:	11 f4       	brne	.+4      	; 0x9b2 <__unpack_f+0x42>
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	37 c0       	rjmp	.+110    	; 0xa20 <__unpack_f+0xb0>
     9b2:	82 e8       	ldi	r24, 0x82	; 130
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	12 97       	sbiw	r26, 0x02	; 2
     9be:	9a 01       	movw	r18, r20
     9c0:	ab 01       	movw	r20, r22
     9c2:	67 e0       	ldi	r22, 0x07	; 7
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	6a 95       	dec	r22
     9ce:	d1 f7       	brne	.-12     	; 0x9c4 <__unpack_f+0x54>
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	8c 93       	st	X, r24
     9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__unpack_f+0x80>
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	44 1f       	adc	r20, r20
     9dc:	55 1f       	adc	r21, r21
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	12 97       	sbiw	r26, 0x02	; 2
     9f0:	20 30       	cpi	r18, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	38 07       	cpc	r19, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	48 07       	cpc	r20, r24
     9fa:	80 e4       	ldi	r24, 0x40	; 64
     9fc:	58 07       	cpc	r21, r24
     9fe:	58 f3       	brcs	.-42     	; 0x9d6 <__unpack_f+0x66>
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	2d 93       	st	X+, r18
     a04:	3d 93       	st	X+, r19
     a06:	4d 93       	st	X+, r20
     a08:	5c 93       	st	X, r21
     a0a:	17 97       	sbiw	r26, 0x07	; 7
     a0c:	08 95       	ret
     a0e:	2f 3f       	cpi	r18, 0xFF	; 255
     a10:	31 05       	cpc	r19, r1
     a12:	79 f4       	brne	.+30     	; 0xa32 <__unpack_f+0xc2>
     a14:	41 15       	cp	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	61 05       	cpc	r22, r1
     a1a:	71 05       	cpc	r23, r1
     a1c:	19 f4       	brne	.+6      	; 0xa24 <__unpack_f+0xb4>
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	8c 93       	st	X, r24
     a22:	08 95       	ret
     a24:	64 ff       	sbrs	r22, 4
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <__unpack_f+0xbe>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	8c 93       	st	X, r24
     a2c:	12 c0       	rjmp	.+36     	; 0xa52 <__unpack_f+0xe2>
     a2e:	1c 92       	st	X, r1
     a30:	10 c0       	rjmp	.+32     	; 0xa52 <__unpack_f+0xe2>
     a32:	2f 57       	subi	r18, 0x7F	; 127
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	3c 93       	st	X, r19
     a3a:	2e 93       	st	-X, r18
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	8c 93       	st	X, r24
     a42:	87 e0       	ldi	r24, 0x07	; 7
     a44:	44 0f       	add	r20, r20
     a46:	55 1f       	adc	r21, r21
     a48:	66 1f       	adc	r22, r22
     a4a:	77 1f       	adc	r23, r23
     a4c:	8a 95       	dec	r24
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <__unpack_f+0xd4>
     a50:	70 64       	ori	r23, 0x40	; 64
     a52:	14 96       	adiw	r26, 0x04	; 4
     a54:	4d 93       	st	X+, r20
     a56:	5d 93       	st	X+, r21
     a58:	6d 93       	st	X+, r22
     a5a:	7c 93       	st	X, r23
     a5c:	17 97       	sbiw	r26, 0x07	; 7
     a5e:	08 95       	ret

00000a60 <__fpcmp_parts_f>:
     a60:	1f 93       	push	r17
     a62:	dc 01       	movw	r26, r24
     a64:	fb 01       	movw	r30, r22
     a66:	9c 91       	ld	r25, X
     a68:	92 30       	cpi	r25, 0x02	; 2
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__fpcmp_parts_f+0xe>
     a6c:	47 c0       	rjmp	.+142    	; 0xafc <__fpcmp_parts_f+0x9c>
     a6e:	80 81       	ld	r24, Z
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__fpcmp_parts_f+0x16>
     a74:	43 c0       	rjmp	.+134    	; 0xafc <__fpcmp_parts_f+0x9c>
     a76:	94 30       	cpi	r25, 0x04	; 4
     a78:	51 f4       	brne	.+20     	; 0xa8e <__fpcmp_parts_f+0x2e>
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	1c 91       	ld	r17, X
     a7e:	84 30       	cpi	r24, 0x04	; 4
     a80:	99 f5       	brne	.+102    	; 0xae8 <__fpcmp_parts_f+0x88>
     a82:	81 81       	ldd	r24, Z+1	; 0x01
     a84:	68 2f       	mov	r22, r24
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	61 1b       	sub	r22, r17
     a8a:	71 09       	sbc	r23, r1
     a8c:	3f c0       	rjmp	.+126    	; 0xb0c <__fpcmp_parts_f+0xac>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	21 f0       	breq	.+8      	; 0xa9a <__fpcmp_parts_f+0x3a>
     a92:	92 30       	cpi	r25, 0x02	; 2
     a94:	31 f4       	brne	.+12     	; 0xaa2 <__fpcmp_parts_f+0x42>
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	b9 f1       	breq	.+110    	; 0xb08 <__fpcmp_parts_f+0xa8>
     a9a:	81 81       	ldd	r24, Z+1	; 0x01
     a9c:	88 23       	and	r24, r24
     a9e:	89 f1       	breq	.+98     	; 0xb02 <__fpcmp_parts_f+0xa2>
     aa0:	2d c0       	rjmp	.+90     	; 0xafc <__fpcmp_parts_f+0x9c>
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	1c 91       	ld	r17, X
     aa6:	11 97       	sbiw	r26, 0x01	; 1
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	f1 f0       	breq	.+60     	; 0xae8 <__fpcmp_parts_f+0x88>
     aac:	81 81       	ldd	r24, Z+1	; 0x01
     aae:	18 17       	cp	r17, r24
     ab0:	d9 f4       	brne	.+54     	; 0xae8 <__fpcmp_parts_f+0x88>
     ab2:	12 96       	adiw	r26, 0x02	; 2
     ab4:	2d 91       	ld	r18, X+
     ab6:	3c 91       	ld	r19, X
     ab8:	13 97       	sbiw	r26, 0x03	; 3
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	82 17       	cp	r24, r18
     ac0:	93 07       	cpc	r25, r19
     ac2:	94 f0       	brlt	.+36     	; 0xae8 <__fpcmp_parts_f+0x88>
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	bc f0       	brlt	.+46     	; 0xaf8 <__fpcmp_parts_f+0x98>
     aca:	14 96       	adiw	r26, 0x04	; 4
     acc:	8d 91       	ld	r24, X+
     ace:	9d 91       	ld	r25, X+
     ad0:	0d 90       	ld	r0, X+
     ad2:	bc 91       	ld	r27, X
     ad4:	a0 2d       	mov	r26, r0
     ad6:	24 81       	ldd	r18, Z+4	; 0x04
     ad8:	35 81       	ldd	r19, Z+5	; 0x05
     ada:	46 81       	ldd	r20, Z+6	; 0x06
     adc:	57 81       	ldd	r21, Z+7	; 0x07
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	4a 07       	cpc	r20, r26
     ae4:	5b 07       	cpc	r21, r27
     ae6:	18 f4       	brcc	.+6      	; 0xaee <__fpcmp_parts_f+0x8e>
     ae8:	11 23       	and	r17, r17
     aea:	41 f0       	breq	.+16     	; 0xafc <__fpcmp_parts_f+0x9c>
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <__fpcmp_parts_f+0xa2>
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	a4 07       	cpc	r26, r20
     af4:	b5 07       	cpc	r27, r21
     af6:	40 f4       	brcc	.+16     	; 0xb08 <__fpcmp_parts_f+0xa8>
     af8:	11 23       	and	r17, r17
     afa:	19 f0       	breq	.+6      	; 0xb02 <__fpcmp_parts_f+0xa2>
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <__fpcmp_parts_f+0xac>
     b02:	6f ef       	ldi	r22, 0xFF	; 255
     b04:	7f ef       	ldi	r23, 0xFF	; 255
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__fpcmp_parts_f+0xac>
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	cb 01       	movw	r24, r22
     b0e:	1f 91       	pop	r17
     b10:	08 95       	ret

00000b12 <Buzzer_init>:

#include "gpio.h"
#include "buzzer.h"

void Buzzer_init(void)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
	/* Setting pin as output for buzzer */
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID, PIN_OUTPUT);
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	62 e0       	ldi	r22, 0x02	; 2
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	e8 d0       	rcall	.+464    	; 0xcf2 <GPIO_setupPinDirection>
     b22:	cf 91       	pop	r28
}
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <Buzzer_on>:
void Buzzer_on(void)
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	/* Enabling Buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID, LOGIC_HIGH);
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	62 e0       	ldi	r22, 0x02	; 2
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	c8 d1       	rcall	.+912    	; 0xec8 <GPIO_writePin>
     b38:	cf 91       	pop	r28
}
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <Buzzer_off>:
void Buzzer_off(void)
{
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	/* Disabling Buzzer */
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID, LOGIC_LOW);
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	bd d1       	rcall	.+890    	; 0xec8 <GPIO_writePin>
     b4e:	cf 91       	pop	r28
}
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <DcMotor_Init>:
#include "dcmotor.h"
#include "common_macros.h"
#include "gpio.h"

void DcMotor_Init(void)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	/*Setting two pins for the motor*/
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN0_ID, PIN_OUTPUT);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	66 e0       	ldi	r22, 0x06	; 6
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	c7 d0       	rcall	.+398    	; 0xcf2 <GPIO_setupPinDirection>
     b64:	82 e0       	ldi	r24, 0x02	; 2
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_PIN1_ID, PIN_OUTPUT);
     b66:	67 e0       	ldi	r22, 0x07	; 7
     b68:	41 e0       	ldi	r20, 0x01	; 1
     b6a:	c3 d0       	rcall	.+390    	; 0xcf2 <GPIO_setupPinDirection>
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	66 e0       	ldi	r22, 0x06	; 6
	/*stopping the motor by writing zero */
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN0_ID, LOGIC_LOW);
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	aa d1       	rcall	.+852    	; 0xec8 <GPIO_writePin>
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	40 e0       	ldi	r20, 0x00	; 0
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN1_ID, LOGIC_LOW);
     b7a:	a6 d1       	rcall	.+844    	; 0xec8 <GPIO_writePin>
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <DcMotor_Rotate>:
}
/* Description:
  * Control the DC Motor direction using L293D H-bridge.
  */
void DcMotor_Rotate(DcMotor_State state)
{
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	0f 92       	push	r0
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	89 83       	std	Y+1, r24	; 0x01
	if(state == STOP)
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	88 23       	and	r24, r24
     b92:	49 f4       	brne	.+18     	; 0xba6 <DcMotor_Rotate+0x24>
	{
		/*stopping the motor by writing zero */
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN0_ID, LOGIC_LOW);
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	96 d1       	rcall	.+812    	; 0xec8 <GPIO_writePin>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN1_ID, LOGIC_LOW);
     b9e:	67 e0       	ldi	r22, 0x07	; 7
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	92 d1       	rcall	.+804    	; 0xec8 <GPIO_writePin>
     ba4:	17 c0       	rjmp	.+46     	; 0xbd4 <DcMotor_Rotate+0x52>
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	82 30       	cpi	r24, 0x02	; 2

	}
	else if( state == A_CW)
     baa:	49 f4       	brne	.+18     	; 0xbbe <DcMotor_Rotate+0x3c>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	66 e0       	ldi	r22, 0x06	; 6
	{
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN0_ID, LOGIC_LOW);
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	8a d1       	rcall	.+788    	; 0xec8 <GPIO_writePin>
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	67 e0       	ldi	r22, 0x07	; 7
     bb8:	41 e0       	ldi	r20, 0x01	; 1
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN1_ID, LOGIC_HIGH);
     bba:	86 d1       	rcall	.+780    	; 0xec8 <GPIO_writePin>
     bbc:	0b c0       	rjmp	.+22     	; 0xbd4 <DcMotor_Rotate+0x52>
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	41 f4       	brne	.+16     	; 0xbd4 <DcMotor_Rotate+0x52>
     bc4:	82 e0       	ldi	r24, 0x02	; 2

	}
	else if(state == CW)
     bc6:	66 e0       	ldi	r22, 0x06	; 6
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	7e d1       	rcall	.+764    	; 0xec8 <GPIO_writePin>
	{
		// Rotate the motor --> clock wise
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN0_ID, LOGIC_HIGH);
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	67 e0       	ldi	r22, 0x07	; 7
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	7a d1       	rcall	.+756    	; 0xec8 <GPIO_writePin>
     bd4:	0f 90       	pop	r0
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_PIN1_ID, LOGIC_LOW);
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <EEPROM_writeByte+0x6>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <EEPROM_writeByte+0x8>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	6b 83       	std	Y+3, r22	; 0x03

	/* Send the Start Bit */
    TWI_start();
     bee:	c6 d5       	rcall	.+2956   	; 0x177c <TWI_start>
     bf0:	0a d6       	rcall	.+3092   	; 0x1806 <TWI_getStatus>
    if (TWI_getStatus() != TWI_START)
     bf2:	88 30       	cpi	r24, 0x08	; 8
     bf4:	11 f0       	breq	.+4      	; 0xbfa <EEPROM_writeByte+0x1e>
     bf6:	1c 82       	std	Y+4, r1	; 0x04
     bf8:	21 c0       	rjmp	.+66     	; 0xc3c <EEPROM_writeByte+0x60>
        return ERROR;
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     bfe:	80 70       	andi	r24, 0x00	; 0
     c00:	97 70       	andi	r25, 0x07	; 7
     c02:	88 0f       	add	r24, r24
     c04:	89 2f       	mov	r24, r25
     c06:	88 1f       	adc	r24, r24
     c08:	99 0b       	sbc	r25, r25
     c0a:	91 95       	neg	r25
     c0c:	80 6a       	ori	r24, 0xA0	; 160
     c0e:	d1 d5       	rcall	.+2978   	; 0x17b2 <TWI_writeByte>
     c10:	fa d5       	rcall	.+3060   	; 0x1806 <TWI_getStatus>
     c12:	88 31       	cpi	r24, 0x18	; 24
     c14:	11 f0       	breq	.+4      	; 0xc1a <EEPROM_writeByte+0x3e>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c16:	1c 82       	std	Y+4, r1	; 0x04
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <EEPROM_writeByte+0x60>
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	ca d5       	rcall	.+2964   	; 0x17b2 <TWI_writeByte>
        return ERROR; 
     c1e:	f3 d5       	rcall	.+3046   	; 0x1806 <TWI_getStatus>
     c20:	88 32       	cpi	r24, 0x28	; 40
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c22:	11 f0       	breq	.+4      	; 0xc28 <EEPROM_writeByte+0x4c>
     c24:	1c 82       	std	Y+4, r1	; 0x04
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <EEPROM_writeByte+0x60>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	c3 d5       	rcall	.+2950   	; 0x17b2 <TWI_writeByte>
     c2c:	ec d5       	rcall	.+3032   	; 0x1806 <TWI_getStatus>
     c2e:	88 32       	cpi	r24, 0x28	; 40
        return ERROR;
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_writeByte+0x5a>
     c32:	1c 82       	std	Y+4, r1	; 0x04
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <EEPROM_writeByte+0x60>
     c36:	b2 d5       	rcall	.+2916   	; 0x179c <TWI_stop>
     c38:	81 e0       	ldi	r24, 0x01	; 1
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c3a:	8c 83       	std	Y+4, r24	; 0x04
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
        return ERROR;
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0

    /* Send the Stop Bit */
    TWI_stop();
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
	
    return SUCCESS;
     c4a:	08 95       	ret

00000c4c <EEPROM_readByte>:
}

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <EEPROM_readByte+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <EEPROM_readByte+0x8>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	7c 83       	std	Y+4, r23	; 0x04
     c60:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c62:	8c d5       	rcall	.+2840   	; 0x177c <TWI_start>
     c64:	d0 d5       	rcall	.+2976   	; 0x1806 <TWI_getStatus>
    if (TWI_getStatus() != TWI_START)
     c66:	88 30       	cpi	r24, 0x08	; 8
     c68:	11 f0       	breq	.+4      	; 0xc6e <EEPROM_readByte+0x22>
     c6a:	1d 82       	std	Y+5, r1	; 0x05
     c6c:	39 c0       	rjmp	.+114    	; 0xce0 <EEPROM_readByte+0x94>
        return ERROR;
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c72:	80 70       	andi	r24, 0x00	; 0
     c74:	97 70       	andi	r25, 0x07	; 7
     c76:	88 0f       	add	r24, r24
     c78:	89 2f       	mov	r24, r25
     c7a:	88 1f       	adc	r24, r24
     c7c:	99 0b       	sbc	r25, r25
     c7e:	91 95       	neg	r25
     c80:	80 6a       	ori	r24, 0xA0	; 160
     c82:	97 d5       	rcall	.+2862   	; 0x17b2 <TWI_writeByte>
     c84:	c0 d5       	rcall	.+2944   	; 0x1806 <TWI_getStatus>
     c86:	88 31       	cpi	r24, 0x18	; 24
     c88:	11 f0       	breq	.+4      	; 0xc8e <EEPROM_readByte+0x42>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c8a:	1d 82       	std	Y+5, r1	; 0x05
     c8c:	29 c0       	rjmp	.+82     	; 0xce0 <EEPROM_readByte+0x94>
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	90 d5       	rcall	.+2848   	; 0x17b2 <TWI_writeByte>
        return ERROR;
     c92:	b9 d5       	rcall	.+2930   	; 0x1806 <TWI_getStatus>
     c94:	88 32       	cpi	r24, 0x28	; 40
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c96:	11 f0       	breq	.+4      	; 0xc9c <EEPROM_readByte+0x50>
     c98:	1d 82       	std	Y+5, r1	; 0x05
     c9a:	22 c0       	rjmp	.+68     	; 0xce0 <EEPROM_readByte+0x94>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c9c:	6f d5       	rcall	.+2782   	; 0x177c <TWI_start>
     c9e:	b3 d5       	rcall	.+2918   	; 0x1806 <TWI_getStatus>
     ca0:	80 31       	cpi	r24, 0x10	; 16
     ca2:	11 f0       	breq	.+4      	; 0xca8 <EEPROM_readByte+0x5c>
        return ERROR;
     ca4:	1d 82       	std	Y+5, r1	; 0x05
     ca6:	1c c0       	rjmp	.+56     	; 0xce0 <EEPROM_readByte+0x94>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
    if (TWI_getStatus() != TWI_REP_START)
     cac:	80 70       	andi	r24, 0x00	; 0
     cae:	97 70       	andi	r25, 0x07	; 7
     cb0:	88 0f       	add	r24, r24
     cb2:	89 2f       	mov	r24, r25
        return ERROR;
     cb4:	88 1f       	adc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     cb8:	91 95       	neg	r25
     cba:	81 6a       	ori	r24, 0xA1	; 161
     cbc:	7a d5       	rcall	.+2804   	; 0x17b2 <TWI_writeByte>
     cbe:	a3 d5       	rcall	.+2886   	; 0x1806 <TWI_getStatus>
     cc0:	80 34       	cpi	r24, 0x40	; 64
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <EEPROM_readByte+0x7c>
     cc4:	1d 82       	std	Y+5, r1	; 0x05
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <EEPROM_readByte+0x94>
     cc8:	8b d5       	rcall	.+2838   	; 0x17e0 <TWI_readByteWithNACK>
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     cd0:	9a d5       	rcall	.+2868   	; 0x1806 <TWI_getStatus>
     cd2:	88 35       	cpi	r24, 0x58	; 88
     cd4:	11 f0       	breq	.+4      	; 0xcda <EEPROM_readByte+0x8e>
     cd6:	1d 82       	std	Y+5, r1	; 0x05
        return ERROR;
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <EEPROM_readByte+0x94>
     cda:	60 d5       	rcall	.+2752   	; 0x179c <TWI_stop>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
        return ERROR;
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <GPIO_setupPinDirection+0x6>
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <GPIO_setupPinDirection+0x8>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	6a 83       	std	Y+2, r22	; 0x02
     d04:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	88 30       	cpi	r24, 0x08	; 8
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <GPIO_setupPinDirection+0x1c>
     d0c:	d5 c0       	rjmp	.+426    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	08 f0       	brcs	.+2      	; 0xd16 <GPIO_setupPinDirection+0x24>
     d14:	d1 c0       	rjmp	.+418    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	3d 83       	std	Y+5, r19	; 0x05
     d1e:	2c 83       	std	Y+4, r18	; 0x04
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <GPIO_setupPinDirection+0x3a>
     d2a:	43 c0       	rjmp	.+134    	; 0xdb2 <GPIO_setupPinDirection+0xc0>
     d2c:	2c 81       	ldd	r18, Y+4	; 0x04
     d2e:	3d 81       	ldd	r19, Y+5	; 0x05
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	2c f4       	brge	.+10     	; 0xd40 <GPIO_setupPinDirection+0x4e>
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	71 f0       	breq	.+28     	; 0xd5a <GPIO_setupPinDirection+0x68>
     d3e:	bc c0       	rjmp	.+376    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	3d 81       	ldd	r19, Y+5	; 0x05
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <GPIO_setupPinDirection+0x5a>
     d4a:	5f c0       	rjmp	.+190    	; 0xe0a <GPIO_setupPinDirection+0x118>
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <GPIO_setupPinDirection+0x66>
     d56:	85 c0       	rjmp	.+266    	; 0xe62 <GPIO_setupPinDirection+0x170>
     d58:	af c0       	rjmp	.+350    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	a1 f4       	brne	.+40     	; 0xd88 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d60:	aa e3       	ldi	r26, 0x3A	; 58
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e3       	ldi	r30, 0x3A	; 58
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <GPIO_setupPinDirection+0x8c>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <GPIO_setupPinDirection+0x88>
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	98 c0       	rjmp	.+304    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <GPIO_setupPinDirection+0xb4>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <GPIO_setupPinDirection+0xb0>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	83 c0       	rjmp	.+262    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a1 f4       	brne	.+40     	; 0xde0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     db8:	a7 e3       	ldi	r26, 0x37	; 55
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e7 e3       	ldi	r30, 0x37	; 55
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_setupPinDirection+0xe4>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_setupPinDirection+0xe0>
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	6c c0       	rjmp	.+216    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     de0:	a7 e3       	ldi	r26, 0x37	; 55
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e7 e3       	ldi	r30, 0x37	; 55
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GPIO_setupPinDirection+0x10c>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <GPIO_setupPinDirection+0x108>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	57 c0       	rjmp	.+174    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e10:	a4 e3       	ldi	r26, 0x34	; 52
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_setupPinDirection+0x13c>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_setupPinDirection+0x138>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	40 c0       	rjmp	.+128    	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e38:	a4 e3       	ldi	r26, 0x34	; 52
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e3       	ldi	r30, 0x34	; 52
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_setupPinDirection+0x164>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_setupPinDirection+0x160>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	2b c0       	rjmp	.+86     	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e68:	a1 e3       	ldi	r26, 0x31	; 49
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e1 e3       	ldi	r30, 0x31	; 49
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_setupPinDirection+0x194>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_setupPinDirection+0x190>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e90:	a1 e3       	ldi	r26, 0x31	; 49
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e1 e3       	ldi	r30, 0x31	; 49
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_setupPinDirection+0x1bc>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_setupPinDirection+0x1b8>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <GPIO_writePin+0x6>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <GPIO_writePin+0x8>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	6a 83       	std	Y+2, r22	; 0x02
     eda:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	88 30       	cpi	r24, 0x08	; 8
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <GPIO_writePin+0x1c>
     ee2:	d5 c0       	rjmp	.+426    	; 0x108e <GPIO_writePin+0x1c6>
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	08 f0       	brcs	.+2      	; 0xeec <GPIO_writePin+0x24>
     eea:	d1 c0       	rjmp	.+418    	; 0x108e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	3d 83       	std	Y+5, r19	; 0x05
     ef4:	2c 83       	std	Y+4, r18	; 0x04
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	91 05       	cpc	r25, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <GPIO_writePin+0x3a>
     f00:	43 c0       	rjmp	.+134    	; 0xf88 <GPIO_writePin+0xc0>
     f02:	2c 81       	ldd	r18, Y+4	; 0x04
     f04:	3d 81       	ldd	r19, Y+5	; 0x05
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	2c f4       	brge	.+10     	; 0xf16 <GPIO_writePin+0x4e>
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	71 f0       	breq	.+28     	; 0xf30 <GPIO_writePin+0x68>
     f14:	bc c0       	rjmp	.+376    	; 0x108e <GPIO_writePin+0x1c6>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <GPIO_writePin+0x5a>
     f20:	5f c0       	rjmp	.+190    	; 0xfe0 <GPIO_writePin+0x118>
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	91 05       	cpc	r25, r1
     f2a:	09 f4       	brne	.+2      	; 0xf2e <GPIO_writePin+0x66>
     f2c:	85 c0       	rjmp	.+266    	; 0x1038 <GPIO_writePin+0x170>
     f2e:	af c0       	rjmp	.+350    	; 0x108e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	a1 f4       	brne	.+40     	; 0xf5e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <GPIO_writePin+0x8c>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <GPIO_writePin+0x88>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	98 c0       	rjmp	.+304    	; 0x108e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f5e:	ab e3       	ldi	r26, 0x3B	; 59
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb e3       	ldi	r30, 0x3B	; 59
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <GPIO_writePin+0xb4>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <GPIO_writePin+0xb0>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	83 c0       	rjmp	.+262    	; 0x108e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	a1 f4       	brne	.+40     	; 0xfb6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f8e:	a8 e3       	ldi	r26, 0x38	; 56
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_writePin+0xe4>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_writePin+0xe0>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	6c c0       	rjmp	.+216    	; 0x108e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fb6:	a8 e3       	ldi	r26, 0x38	; 56
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e8 e3       	ldi	r30, 0x38	; 56
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <GPIO_writePin+0x10c>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <GPIO_writePin+0x108>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	57 c0       	rjmp	.+174    	; 0x108e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	a1 f4       	brne	.+40     	; 0x100e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_writePin+0x13c>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_writePin+0x138>
    1008:	84 2b       	or	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	40 c0       	rjmp	.+128    	; 0x108e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    100e:	a5 e3       	ldi	r26, 0x35	; 53
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e3       	ldi	r30, 0x35	; 53
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <GPIO_writePin+0x164>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <GPIO_writePin+0x160>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	2b c0       	rjmp	.+86     	; 0x108e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	a1 f4       	brne	.+40     	; 0x1066 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    103e:	a2 e3       	ldi	r26, 0x32	; 50
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e2 e3       	ldi	r30, 0x32	; 50
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_writePin+0x194>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_writePin+0x190>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	14 c0       	rjmp	.+40     	; 0x108e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1066:	a2 e3       	ldi	r26, 0x32	; 50
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e2 e3       	ldi	r30, 0x32	; 50
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <GPIO_writePin+0x1bc>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <GPIO_writePin+0x1b8>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <Timer0_interruptCounter>:
 * Function to be set as the Callback Function for Timer0
 * It counts the number of overflow interrupts
 * Uses a global variable to save the count
 */
void Timer0_interruptCounter(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	/* Increment on every interrupt */
	g_timer0Ticks++;
    10a6:	80 91 6e 00 	lds	r24, 0x006E
    10aa:	90 91 6f 00 	lds	r25, 0x006F
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	90 93 6f 00 	sts	0x006F, r25
    10b4:	80 93 6e 00 	sts	0x006E, r24
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Save_Password>:
 * Function to save the password for the system in eeprom
 * It takes the password array of the system as argument
 * Takes the adress in the eeprom as argument
 */
void Save_Password(uint8 * a_password , uint16 a_adress)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	63 97       	sbiw	r28, 0x13	; 19
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	99 8b       	std	Y+17, r25	; 0x11
    10d4:	88 8b       	std	Y+16, r24	; 0x10
    10d6:	7b 8b       	std	Y+19, r23	; 0x13
    10d8:	6a 8b       	std	Y+18, r22	; 0x12

	/* Loop to save the password of 5 numbers in eeprom */
	for(uint8 i = 0; i < 5; i++ )
    10da:	1f 86       	std	Y+15, r1	; 0x0f
    10dc:	85 c0       	rjmp	.+266    	; 0x11e8 <Save_Password+0x12a>
	{
		/* Writing in the eeprom by taking the 1st adress then incrementing it in the loop */
		EEPROM_writeByte(a_adress + i, a_password[i]);
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	8a 89       	ldd	r24, Y+18	; 0x12
    10e6:	9b 89       	ldd	r25, Y+19	; 0x13
    10e8:	a9 01       	movw	r20, r18
    10ea:	48 0f       	add	r20, r24
    10ec:	59 1f       	adc	r21, r25
    10ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	88 89       	ldd	r24, Y+16	; 0x10
    10f6:	99 89       	ldd	r25, Y+17	; 0x11
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	20 81       	ld	r18, Z
    1100:	ca 01       	movw	r24, r20
    1102:	62 2f       	mov	r22, r18
    1104:	6b dd       	rcall	.-1322   	; 0xbdc <EEPROM_writeByte>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	7e d9       	rcall	.-3332   	; 0x424 <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8f 83       	std	Y+7, r24	; 0x07
    112e:	98 87       	std	Y+8, r25	; 0x08
    1130:	a9 87       	std	Y+9, r26	; 0x09
    1132:	ba 87       	std	Y+10, r27	; 0x0a
    1134:	6f 81       	ldd	r22, Y+7	; 0x07
    1136:	78 85       	ldd	r23, Y+8	; 0x08
	if (__tmp < 1.0)
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	c0 da       	rcall	.-2688   	; 0x6c6 <__ltsf2>
    1146:	88 23       	and	r24, r24
    1148:	2c f4       	brge	.+10     	; 0x1154 <Save_Password+0x96>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9e 83       	std	Y+6, r25	; 0x06
		__ticks = 1;
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	3d c0       	rjmp	.+122    	; 0x11ce <Save_Password+0x110>
    1154:	6f 81       	ldd	r22, Y+7	; 0x07
    1156:	78 85       	ldd	r23, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
	else if (__tmp > 65535)
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	4f e7       	ldi	r20, 0x7F	; 127
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	56 da       	rcall	.-2900   	; 0x612 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	44 f5       	brge	.+80     	; 0x11ba <Save_Password+0xfc>
    116a:	6b 85       	ldd	r22, Y+11	; 0x0b
    116c:	7c 85       	ldd	r23, Y+12	; 0x0c
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	9e 85       	ldd	r25, Y+14	; 0x0e
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	54 d9       	rcall	.-3416   	; 0x424 <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <Save_Password+0xf2>
    1192:	88 ec       	ldi	r24, 0xC8	; 200
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <Save_Password+0xe0>
    11a2:	9c 83       	std	Y+4, r25	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f7       	brne	.-38     	; 0x1192 <Save_Password+0xd4>
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <Save_Password+0x124>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	6f 81       	ldd	r22, Y+7	; 0x07
    11bc:	78 85       	ldd	r23, Y+8	; 0x08
    11be:	89 85       	ldd	r24, Y+9	; 0x09
    11c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <Save_Password+0x11c>
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	85 30       	cpi	r24, 0x05	; 5
 */
void Save_Password(uint8 * a_password , uint16 a_adress)
{

	/* Loop to save the password of 5 numbers in eeprom */
	for(uint8 i = 0; i < 5; i++ )
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <Save_Password+0x132>
    11ee:	77 cf       	rjmp	.-274    	; 0x10de <Save_Password+0x20>
    11f0:	63 96       	adiw	r28, 0x13	; 19
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
	{
		/* Writing in the eeprom by taking the 1st adress then incrementing it in the loop */
		EEPROM_writeByte(a_adress + i, a_password[i]);
		_delay_ms(10);
	}
}
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <Check_Password>:
 * Takes the adress in the eeprom as argument
 * Reads the value of each byte int the memory and compare it to the password
 * Returns 1 if match 0 if mismatch
 */
uint8 Check_Password(uint8 * a_password , uint16 a_adress)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	65 97       	sbiw	r28, 0x15	; 21
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	9b 8b       	std	Y+19, r25	; 0x13
    1218:	8a 8b       	std	Y+18, r24	; 0x12
    121a:	7d 8b       	std	Y+21, r23	; 0x15
    121c:	6c 8b       	std	Y+20, r22	; 0x14
	/* Variable to return the compare result
	 * Variable to save byte read from eeprom */
	uint8 password_status = 0 , byte_val;
    121e:	18 8a       	std	Y+16, r1	; 0x10
	/* Loop to check the password of 5 numbers in eeprom */
	for(uint8 i = 0; i < 5; i++ )
    1220:	1f 86       	std	Y+15, r1	; 0x0f
    1222:	8d c0       	rjmp	.+282    	; 0x133e <Check_Password+0x13c>
	{
		/* Reading from the eeprom by taking the 1st adress then incrementing it in the loop */
		EEPROM_readByte(a_adress + i, &byte_val);
    1224:	8f 85       	ldd	r24, Y+15	; 0x0f
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8c 89       	ldd	r24, Y+20	; 0x14
    122c:	9d 89       	ldd	r25, Y+21	; 0x15
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	9e 01       	movw	r18, r28
    1234:	2f 5e       	subi	r18, 0xEF	; 239
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	b9 01       	movw	r22, r18
    123a:	08 dd       	rcall	.-1520   	; 0xc4c <EEPROM_readByte>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e2       	ldi	r26, 0x20	; 32
    1242:	b1 e4       	ldi	r27, 0x41	; 65
    1244:	8b 87       	std	Y+11, r24	; 0x0b
    1246:	9c 87       	std	Y+12, r25	; 0x0c
    1248:	ad 87       	std	Y+13, r26	; 0x0d
    124a:	be 87       	std	Y+14, r27	; 0x0e
    124c:	6b 85       	ldd	r22, Y+11	; 0x0b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1250:	8d 85       	ldd	r24, Y+13	; 0x0d
    1252:	9e 85       	ldd	r25, Y+14	; 0x0e
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4a ef       	ldi	r20, 0xFA	; 250
    125a:	54 e4       	ldi	r21, 0x44	; 68
    125c:	e3 d8       	rcall	.-3642   	; 0x424 <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8f 83       	std	Y+7, r24	; 0x07
    1264:	98 87       	std	Y+8, r25	; 0x08
    1266:	a9 87       	std	Y+9, r26	; 0x09
    1268:	ba 87       	std	Y+10, r27	; 0x0a
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
	if (__tmp < 1.0)
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e8       	ldi	r20, 0x80	; 128
    1278:	5f e3       	ldi	r21, 0x3F	; 63
    127a:	25 da       	rcall	.-2998   	; 0x6c6 <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <Check_Password+0x88>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9e 83       	std	Y+6, r25	; 0x06
		__ticks = 1;
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	3d c0       	rjmp	.+122    	; 0x1304 <Check_Password+0x102>
    128a:	6f 81       	ldd	r22, Y+7	; 0x07
    128c:	78 85       	ldd	r23, Y+8	; 0x08
    128e:	89 85       	ldd	r24, Y+9	; 0x09
	else if (__tmp > 65535)
    1290:	9a 85       	ldd	r25, Y+10	; 0x0a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	bb d9       	rcall	.-3210   	; 0x612 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	44 f5       	brge	.+80     	; 0x12f0 <Check_Password+0xee>
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	b9 d8       	rcall	.-3726   	; 0x424 <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <Check_Password+0xe4>
    12c8:	88 ec       	ldi	r24, 0xC8	; 200
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <Check_Password+0xd2>
    12d8:	9c 83       	std	Y+4, r25	; 0x04
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <Check_Password+0xc6>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <Check_Password+0x116>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <Check_Password+0x10e>
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	8f 85       	ldd	r24, Y+15	; 0x0f
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8a 89       	ldd	r24, Y+18	; 0x12
    1320:	9b 89       	ldd	r25, Y+19	; 0x13
		_delay_ms(10);
		if( a_password[i] != byte_val )
    1322:	fc 01       	movw	r30, r24
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	90 81       	ld	r25, Z
    132a:	89 89       	ldd	r24, Y+17	; 0x11
    132c:	98 17       	cp	r25, r24
    132e:	11 f0       	breq	.+4      	; 0x1334 <Check_Password+0x132>
    1330:	18 8a       	std	Y+16, r1	; 0x10
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <Check_Password+0x144>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	88 8b       	std	Y+16, r24	; 0x10
    1338:	8f 85       	ldd	r24, Y+15	; 0x0f
		{
			/* Return 0 means mismatch of passwords */
			password_status = MISMATCH;
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}
		/* Else: return 1 means match */
		password_status = MATCH;
    133e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1340:	85 30       	cpi	r24, 0x05	; 5
{
	/* Variable to return the compare result
	 * Variable to save byte read from eeprom */
	uint8 password_status = 0 , byte_val;
	/* Loop to check the password of 5 numbers in eeprom */
	for(uint8 i = 0; i < 5; i++ )
    1342:	08 f4       	brcc	.+2      	; 0x1346 <Check_Password+0x144>
    1344:	6f cf       	rjmp	.-290    	; 0x1224 <Check_Password+0x22>
    1346:	88 89       	ldd	r24, Y+16	; 0x10
    1348:	65 96       	adiw	r28, 0x15	; 21
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
			break;
		}
		/* Else: return 1 means match */
		password_status = MATCH;
	}
	return password_status;
    1350:	0f be       	out	0x3f, r0	; 63
}
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

void main(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	68 97       	sbiw	r28, 0x18	; 24
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
	/* Struct to configer UART with Baud rate = 9600 bps and one stop bit*/
	Uart_ConfigType Config_Uart = { 9600 , ONE_STOP_BIT };
    136e:	ce 01       	movw	r24, r28
    1370:	03 96       	adiw	r24, 0x03	; 3
    1372:	9d 8b       	std	Y+21, r25	; 0x15
    1374:	8c 8b       	std	Y+20, r24	; 0x14
    1376:	a8 e6       	ldi	r26, 0x68	; 104
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	bf 8b       	std	Y+23, r27	; 0x17
    137c:	ae 8b       	std	Y+22, r26	; 0x16
    137e:	b5 e0       	ldi	r27, 0x05	; 5
    1380:	b8 8f       	std	Y+24, r27	; 0x18
    1382:	ee 89       	ldd	r30, Y+22	; 0x16
    1384:	ff 89       	ldd	r31, Y+23	; 0x17
    1386:	00 80       	ld	r0, Z
    1388:	8e 89       	ldd	r24, Y+22	; 0x16
    138a:	9f 89       	ldd	r25, Y+23	; 0x17
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9f 8b       	std	Y+23, r25	; 0x17
    1390:	8e 8b       	std	Y+22, r24	; 0x16
    1392:	ac 89       	ldd	r26, Y+20	; 0x14
    1394:	bd 89       	ldd	r27, Y+21	; 0x15
    1396:	0c 92       	st	X, r0
    1398:	ec 89       	ldd	r30, Y+20	; 0x14
    139a:	fd 89       	ldd	r31, Y+21	; 0x15
    139c:	31 96       	adiw	r30, 0x01	; 1
    139e:	fd 8b       	std	Y+21, r31	; 0x15
    13a0:	ec 8b       	std	Y+20, r30	; 0x14
    13a2:	f8 8d       	ldd	r31, Y+24	; 0x18
    13a4:	f1 50       	subi	r31, 0x01	; 1
    13a6:	f8 8f       	std	Y+24, r31	; 0x18
    13a8:	28 8d       	ldd	r18, Y+24	; 0x18
    13aa:	22 23       	and	r18, r18
    13ac:	51 f7       	brne	.-44     	; 0x1382 <main+0x28>

	/* Struct ti configer Timer 0 in overflow mode with prescaler 1024 and initial value = 0*/
	Timer0_ConfigType Config_Timer0 = {NORMAL , F_CPU_1024 , 0  , 255};
    13ae:	18 86       	std	Y+8, r1	; 0x08
    13b0:	85 e0       	ldi	r24, 0x05	; 5
    13b2:	89 87       	std	Y+9, r24	; 0x09
    13b4:	1a 86       	std	Y+10, r1	; 0x0a
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	8b 87       	std	Y+11, r24	; 0x0b

	/* Struct to configer I2C with bit rate = 400 kbps and the adress of the Microcontroller is 0x01*/
	I2c_ConfigType  Config_I2c = { FAST_MODE , 0x01};
    13ba:	1c 86       	std	Y+12, r1	; 0x0c
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	8d 87       	std	Y+13, r24	; 0x0d

	/* Initializing Drivers */
	UART_init(&Config_Uart);     /* Initializing UART to communicate with HMI_ECU */
    13c0:	ce 01       	movw	r24, r28
    13c2:	03 96       	adiw	r24, 0x03	; 3
    13c4:	2f d2       	rcall	.+1118   	; 0x1824 <UART_init>
    13c6:	ce 01       	movw	r24, r28
	Timer0_init(&Config_Timer0); /* Initializing Timer0 to count time for motor */
    13c8:	08 96       	adiw	r24, 0x08	; 8
    13ca:	0b d1       	rcall	.+534    	; 0x15e2 <Timer0_init>
    13cc:	ce 01       	movw	r24, r28
    13ce:	0c 96       	adiw	r24, 0x0c	; 12
	TWI_init(&Config_I2c);       /* Initializing I2C to communicate with eeprom */
    13d0:	b4 d1       	rcall	.+872    	; 0x173a <TWI_init>
    13d2:	c0 db       	rcall	.-2176   	; 0xb54 <DcMotor_Init>
    13d4:	9e db       	rcall	.-2244   	; 0xb12 <Buzzer_init>
    13d6:	8f e4       	ldi	r24, 0x4F	; 79
	DcMotor_Init();              /* Initializing DC motor to open and close door */
    13d8:	98 e0       	ldi	r25, 0x08	; 8
    13da:	60 e0       	ldi	r22, 0x00	; 0
	Buzzer_init();               /* Initializing buzzer for the alarm */
    13dc:	6e d1       	rcall	.+732    	; 0x16ba <Timer0_setCallBack>
    13de:	86 e0       	ldi	r24, 0x06	; 6
	/* Setting Callback Function for Timer 0 */
	Timer0_setCallBack(Timer0_interruptCounter, NORMAL);
    13e0:	fe 01       	movw	r30, r28
    13e2:	3e 96       	adiw	r30, 0x0e	; 14
    13e4:	df 01       	movw	r26, r30
    13e6:	28 2f       	mov	r18, r24
    13e8:	1d 92       	st	X+, r1
	/*
	 * Password of 5 numbers each in a byte
	 * Array of bytes to the password of 5 numbers
	 * Char for UART sending string
	 */
	uint8 password[6] = {0};
    13ea:	2a 95       	dec	r18
    13ec:	e9 f7       	brne	.-6      	; 0x13e8 <main+0x8e>
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	13 c0       	rjmp	.+38     	; 0x1418 <main+0xbe>
    13f2:	ce 01       	movw	r24, r28
    13f4:	0e 96       	adiw	r24, 0x0e	; 14
    13f6:	9d d2       	rcall	.+1338   	; 0x1932 <UART_receiveString>
    13f8:	ce 01       	movw	r24, r28
	uint8 option; /* Variable to save Received request */
	uint8 password_check_status = MISMATCH; /* Initially mismatch to enter the loop 1st time*/
    13fa:	0e 96       	adiw	r24, 0x0e	; 14
    13fc:	61 e1       	ldi	r22, 0x11	; 17
	 * To exit the loop the two passwords must be exact
	 */
	while( password_check_status == MISMATCH)
	{
		/* Receiving password */
		UART_receiveString(password);
    13fe:	73 e0       	ldi	r23, 0x03	; 3
    1400:	5e de       	rcall	.-836    	; 0x10be <Save_Password>
    1402:	ce 01       	movw	r24, r28
    1404:	0e 96       	adiw	r24, 0x0e	; 14
		/* Initializing password and sending it to be saved in eeprom*/
		Save_Password(password, 0x0311);
    1406:	95 d2       	rcall	.+1322   	; 0x1932 <UART_receiveString>
    1408:	ce 01       	movw	r24, r28
    140a:	0e 96       	adiw	r24, 0x0e	; 14
    140c:	61 e1       	ldi	r22, 0x11	; 17
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	f8 de       	rcall	.-528    	; 0x1202 <Check_Password>
		/* Receiving reenetered password */
		UART_receiveString(password);
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	67 d2       	rcall	.+1230   	; 0x18e6 <UART_sendByte>
    1418:	89 81       	ldd	r24, Y+1	; 0x01
		/* Checking the reenetered password */
		password_check_status = Check_Password(password, 0x0311);
    141a:	88 23       	and	r24, r24
    141c:	51 f3       	breq	.-44     	; 0x13f2 <main+0x98>
    141e:	7a d2       	rcall	.+1268   	; 0x1914 <UART_recieveByte>
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	09 f0       	breq	.+2      	; 0x142a <main+0xd0>
		/* Sending password compare result to HMI_ECU */
		UART_sendByte(password_check_status);
    1428:	44 c0       	rjmp	.+136    	; 0x14b2 <main+0x158>
    142a:	ce 01       	movw	r24, r28
    142c:	0e 96       	adiw	r24, 0x0e	; 14
	/*
	 * In case of mismatch of password the password
	 * must be cleared and new password to be saved
	 * To exit the loop the two passwords must be exact
	 */
	while( password_check_status == MISMATCH)
    142e:	81 d2       	rcall	.+1282   	; 0x1932 <UART_receiveString>
    1430:	ce 01       	movw	r24, r28
    1432:	0e 96       	adiw	r24, 0x0e	; 14

	while(1)
	{

		/* Receiving requests from HMI_ECU */
		option = UART_recieveByte();
    1434:	61 e1       	ldi	r22, 0x11	; 17
    1436:	73 e0       	ldi	r23, 0x03	; 3
    1438:	e4 de       	rcall	.-568    	; 0x1202 <Check_Password>
		if(option == OPENDOOR)
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	88 23       	and	r24, r24
    1440:	19 f4       	brne	.+6      	; 0x1448 <main+0xee>
		{
			/* Receiving password from HMI */
			UART_receiveString(password);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	50 d2       	rcall	.+1184   	; 0x18e6 <UART_sendByte>
    1446:	eb cf       	rjmp	.-42     	; 0x141e <main+0xc4>
    1448:	89 81       	ldd	r24, Y+1	; 0x01
			/* Checking password with the saved in eeprom */
			password_check_status = Check_Password(password, 0x0311);
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	41 f7       	brne	.-48     	; 0x141e <main+0xc4>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	4a d2       	rcall	.+1172   	; 0x18e6 <UART_sendByte>
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	48 d2       	rcall	.+1168   	; 0x18e6 <UART_sendByte>
    1456:	5e d2       	rcall	.+1212   	; 0x1914 <UART_recieveByte>
			/* sending results to HMI */
			if( password_check_status == MISMATCH)
    1458:	ce 01       	movw	r24, r28
    145a:	08 96       	adiw	r24, 0x08	; 8
    145c:	c2 d0       	rcall	.+388    	; 0x15e2 <Timer0_init>
			{
				/* Send to HMI that password missmatched */
				UART_sendByte(MISMATCH);
    145e:	10 92 6f 00 	sts	0x006F, r1
    1462:	10 92 6e 00 	sts	0x006E, r1
			}
			else if(password_check_status == MATCH)
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8c db       	rcall	.-2280   	; 0xb82 <DcMotor_Rotate>
    146a:	80 91 6e 00 	lds	r24, 0x006E
			{
				/* Sending to HMI that password matched */
				UART_sendByte(MATCH);
    146e:	90 91 6f 00 	lds	r25, 0x006F
				/* Wait for HMI to be ready to start and send ready messege */
				UART_sendByte(READY);
    1472:	a1 e0       	ldi	r26, 0x01	; 1
    1474:	89 3c       	cpi	r24, 0xC9	; 201
    1476:	9a 07       	cpc	r25, r26
				UART_recieveByte();
    1478:	c0 f3       	brcs	.-16     	; 0x146a <main+0x110>
    147a:	80 e0       	ldi	r24, 0x00	; 0
				/* Initializing Timer to count the time for openning and closing the door*/
				Timer0_init(&Config_Timer0);
    147c:	82 db       	rcall	.-2300   	; 0xb82 <DcMotor_Rotate>
    147e:	80 91 6e 00 	lds	r24, 0x006E
    1482:	90 91 6f 00 	lds	r25, 0x006F
				/* Clearing ticks to start counting */
				g_timer0Ticks = 0;
    1486:	b2 e0       	ldi	r27, 0x02	; 2
    1488:	84 32       	cpi	r24, 0x24	; 36
    148a:	9b 07       	cpc	r25, r27
				/* Rotating DC motor for 15 sec CW to open*/
				DcMotor_Rotate(CW);
    148c:	c0 f3       	brcs	.-16     	; 0x147e <main+0x124>
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	78 db       	rcall	.-2320   	; 0xb82 <DcMotor_Rotate>
				/* wait 15 sec till the door is open */
				while(g_timer0Ticks < SEC_15);
    1492:	80 91 6e 00 	lds	r24, 0x006E
    1496:	90 91 6f 00 	lds	r25, 0x006F
    149a:	e3 e0       	ldi	r30, 0x03	; 3
    149c:	8d 3e       	cpi	r24, 0xED	; 237
    149e:	9e 07       	cpc	r25, r30
    14a0:	c0 f3       	brcs	.-16     	; 0x1492 <main+0x138>
				/* Stopping Door for 3 sec */
				DcMotor_Rotate(STOP);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	6e db       	rcall	.-2340   	; 0xb82 <DcMotor_Rotate>
    14a6:	2b d1       	rcall	.+598    	; 0x16fe <Timer0_DeInit>
				while( g_timer0Ticks < SEC_18);
    14a8:	10 92 6f 00 	sts	0x006F, r1
    14ac:	10 92 6e 00 	sts	0x006E, r1
    14b0:	b6 cf       	rjmp	.-148    	; 0x141e <main+0xc4>
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	c1 f4       	brne	.+48     	; 0x14e8 <main+0x18e>
				/* Start count for 15 sec and Closing the Door*/
				DcMotor_Rotate(A_CW);
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 96       	adiw	r24, 0x0e	; 14
    14bc:	3a d2       	rcall	.+1140   	; 0x1932 <UART_receiveString>
				while( g_timer0Ticks < SEC_33);
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 96       	adiw	r24, 0x0e	; 14
    14c2:	61 e1       	ldi	r22, 0x11	; 17
    14c4:	73 e0       	ldi	r23, 0x03	; 3
    14c6:	9d de       	rcall	.-710    	; 0x1202 <Check_Password>
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	0c d2       	rcall	.+1048   	; 0x18e6 <UART_sendByte>
				DcMotor_Rotate(STOP);
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <main+0x17c>
				/* Stopping Timer to reset it */
				Timer0_DeInit();
    14d4:	a4 cf       	rjmp	.-184    	; 0x141e <main+0xc4>
    14d6:	ce 01       	movw	r24, r28
				g_timer0Ticks = 0;
    14d8:	0e 96       	adiw	r24, 0x0e	; 14
    14da:	2b d2       	rcall	.+1110   	; 0x1932 <UART_receiveString>
    14dc:	ce 01       	movw	r24, r28
    14de:	0e 96       	adiw	r24, 0x0e	; 14
    14e0:	61 e1       	ldi	r22, 0x11	; 17

			}
		}
		else if(option == CHANGEPASS)
    14e2:	73 e0       	ldi	r23, 0x03	; 3
    14e4:	ec dd       	rcall	.-1064   	; 0x10be <Save_Password>
    14e6:	9b cf       	rjmp	.-202    	; 0x141e <main+0xc4>
		{

			/* Taking enterd password */
			UART_receiveString(password);
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <main+0x196>
    14ee:	97 cf       	rjmp	.-210    	; 0x141e <main+0xc4>
			/* Checking reentered password and responding to HMI */
			password_check_status = Check_Password(password, 0x0311);
    14f0:	ce 01       	movw	r24, r28
    14f2:	08 96       	adiw	r24, 0x08	; 8
    14f4:	76 d0       	rcall	.+236    	; 0x15e2 <Timer0_init>
    14f6:	18 db       	rcall	.-2512   	; 0xb28 <Buzzer_on>
    14f8:	80 91 6e 00 	lds	r24, 0x006E
    14fc:	90 91 6f 00 	lds	r25, 0x006F
			UART_sendByte(password_check_status);
    1500:	f7 e0       	ldi	r31, 0x07	; 7
    1502:	84 32       	cpi	r24, 0x24	; 36
			if(password_check_status == MATCH)
    1504:	9f 07       	cpc	r25, r31
    1506:	c0 f3       	brcs	.-16     	; 0x14f8 <main+0x19e>
    1508:	fa d0       	rcall	.+500    	; 0x16fe <Timer0_DeInit>
    150a:	19 db       	rcall	.-2510   	; 0xb3e <Buzzer_off>
			{
				/* Taking new password from HMI */
				UART_receiveString(password);
    150c:	10 92 6f 00 	sts	0x006F, r1
    1510:	10 92 6e 00 	sts	0x006E, r1
				/* Saving password in eeprom */
				Save_Password(password, 0x0311);
    1514:	84 cf       	rjmp	.-248    	; 0x141e <main+0xc4>

00001516 <__vector_9>:
 *
 *******************************************************************************/

/* Interrupt Service Routine for Timer0 Normal mode */
ISR(TIMER0_OVF_vect)
{
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Normal != NULL_PTR)
    1540:	80 91 70 00 	lds	r24, 0x0070
    1544:	90 91 71 00 	lds	r25, 0x0071
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	29 f0       	breq	.+10     	; 0x1556 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Normal)();
    154c:	e0 91 70 00 	lds	r30, 0x0070
    1550:	f0 91 71 00 	lds	r31, 0x0071
    1554:	09 95       	icall
	}
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_19>:


/* Interrupt Service Routine for Timer0 Compare mode */
ISR(TIMER0_COMP_vect)
{
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Compare != NULL_PTR)
    15a6:	80 91 72 00 	lds	r24, 0x0072
    15aa:	90 91 73 00 	lds	r25, 0x0073
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	29 f0       	breq	.+10     	; 0x15bc <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Compare)();
    15b2:	e0 91 72 00 	lds	r30, 0x0072
    15b6:	f0 91 73 00 	lds	r31, 0x0073
    15ba:	09 95       	icall
	}
}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <Timer0_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer0_init(Timer0_ConfigType *Config_PTR)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Timer0_init+0x6>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
	 * Normal mode:   WGM00 = 0 , WGM01 = 0
	 * PWM mode:      WGM00 = 1 , WGM01 = 0
	 * CTC mode:      WGM00 = 0 , WGM01 = 1
	 * Fast PWM mode: WGM00 = 1 , WGM01 = 1
	 **************************************************************************************/
	TCCR0 = (((Config_PTR->mode >> 1) << WGM01) & 1) | ((Config_PTR->mode & 1) << WGM00);
    15f0:	a3 e5       	ldi	r26, 0x53	; 83
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e9 81       	ldd	r30, Y+1	; 0x01
    15f6:	fa 81       	ldd	r31, Y+2	; 0x02
    15f8:	80 81       	ld	r24, Z
    15fa:	81 70       	andi	r24, 0x01	; 1
    15fc:	82 95       	swap	r24
    15fe:	88 0f       	add	r24, r24
    1600:	88 0f       	add	r24, r24
    1602:	80 7c       	andi	r24, 0xC0	; 192
    1604:	8c 93       	st	X, r24
	/* Non PWM mode FOC0=1*/
	TCCR0 |= (1<<FOC0);
    1606:	a3 e5       	ldi	r26, 0x53	; 83
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e3 e5       	ldi	r30, 0x53	; 83
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 68       	ori	r24, 0x80	; 128
    1612:	8c 93       	st	X, r24

	/*Setting Timer clock by setting 1st 3-bits CS00:2*/
	TCCR0 |=  (0x07 & Config_PTR->clock);
    1614:	a3 e5       	ldi	r26, 0x53	; 83
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e3 e5       	ldi	r30, 0x53	; 83
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	98 2f       	mov	r25, r24
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	87 70       	andi	r24, 0x07	; 7
    1628:	89 2b       	or	r24, r25
    162a:	8c 93       	st	X, r24

	TCNT0 = Config_PTR->init_value; //Set Timer initial value
    162c:	a2 e5       	ldi	r26, 0x52	; 82
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	8c 93       	st	X, r24

	OCR0 = Config_PTR->OCR0_value; // Set Compare Value
    1638:	ac e5       	ldi	r26, 0x5C	; 92
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e9 81       	ldd	r30, Y+1	; 0x01
    163e:	fa 81       	ldd	r31, Y+2	; 0x02
    1640:	83 81       	ldd	r24, Z+3	; 0x03
    1642:	8c 93       	st	X, r24

	/*Enabling Interrupts according to the mode  */
	if(BIT_IS_CLEAR(TCCR0 , WGM01))
    1644:	e3 e5       	ldi	r30, 0x53	; 83
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	88 70       	andi	r24, 0x08	; 8
    1650:	90 70       	andi	r25, 0x00	; 0
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	79 f4       	brne	.+30     	; 0x1674 <Timer0_init+0x92>
	{
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    1656:	a9 e5       	ldi	r26, 0x59	; 89
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e9 e5       	ldi	r30, 0x59	; 89
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0); // Disable Timer0 Compare Interrupt
    1664:	a9 e5       	ldi	r26, 0x59	; 89
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e9 e5       	ldi	r30, 0x59	; 89
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8d 7f       	andi	r24, 0xFD	; 253
    1670:	8c 93       	st	X, r24
    1672:	17 c0       	rjmp	.+46     	; 0x16a2 <Timer0_init+0xc0>
	}
	else if(BIT_IS_SET(TCCR0 , WGM01))
    1674:	e3 e5       	ldi	r30, 0x53	; 83
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 70       	andi	r24, 0x08	; 8
    1680:	90 70       	andi	r25, 0x00	; 0
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	71 f0       	breq	.+28     	; 0x16a2 <Timer0_init+0xc0>
	{
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1686:	a9 e5       	ldi	r26, 0x59	; 89
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e9 e5       	ldi	r30, 0x59	; 89
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0); // Disable Timer0 Overflow Interrupt
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8e 7f       	andi	r24, 0xFE	; 254
    16a0:	8c 93       	st	X, r24
	}
	/*Enable Globel Interrupt*/
	SREG|=(1<<7);
    16a2:	af e5       	ldi	r26, 0x5F	; 95
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ef e5       	ldi	r30, 0x5F	; 95
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	8c 93       	st	X, r24


}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void) , Timer0_Mode mode)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <Timer0_setCallBack+0x6>
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	if(mode == NORMAL)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 23       	and	r24, r24
    16d0:	39 f4       	brne	.+14     	; 0x16e0 <Timer0_setCallBack+0x26>
	{
		g_callBackPtr_Normal = a_ptr; //Save Callback Function for Normal mode
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	90 93 71 00 	sts	0x0071, r25
    16da:	80 93 70 00 	sts	0x0070, r24
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <Timer0_setCallBack+0x38>
	}
	else if(mode == CTC)
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	31 f4       	brne	.+12     	; 0x16f2 <Timer0_setCallBack+0x38>
	{
		g_callBackPtr_Compare = a_ptr; //Save Callback Function for Compare mode
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	90 93 73 00 	sts	0x0073, r25
    16ee:	80 93 72 00 	sts	0x0072, r24
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <Timer0_DeInit>:

/*
 * Description: Function to disable the Timer0 Driver
 */
void Timer0_DeInit(void)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCCR0 = 0;
    1706:	e3 e5       	ldi	r30, 0x53	; 83
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
	TCNT0 = 0;
    170c:	e2 e5       	ldi	r30, 0x52	; 82
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	10 82       	st	Z, r1
	OCR0 = 0;
    1712:	ec e5       	ldi	r30, 0x5C	; 92
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	10 82       	st	Z, r1

	/* Disable the interrupts */
	TIMSK &= ~(1<<TOIE0); // Disable Timer0 Overflow Interrupt
    1718:	a9 e5       	ldi	r26, 0x59	; 89
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e9 e5       	ldi	r30, 0x59	; 89
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0); // Disable Timer0 Compare Interrupt
    1726:	a9 e5       	ldi	r26, 0x59	; 89
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e5       	ldi	r30, 0x59	; 89
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8d 7f       	andi	r24, 0xFD	; 253
    1732:	8c 93       	st	X, r24

}
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(I2c_ConfigType * Configtype_PTR)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <TWI_init+0x6>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	9a 83       	std	Y+2, r25	; 0x02
    1746:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    /* Bit Rate: 100.000 kbps using 0x02 pre-scaler TWPS=0x02 and F_CPU=8Mhz */
    TWBR = 0x02;
    1748:	e0 e2       	ldi	r30, 0x20	; 32
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	80 83       	st	Z, r24
	TWSR = Configtype_PTR->speed;
    1750:	a1 e2       	ldi	r26, 0x21	; 33
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	80 81       	ld	r24, Z
    175a:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Configtype_PTR->my_adress << 1); // my address = 0x01 :)
    175c:	a2 e2       	ldi	r26, 0x22	; 34
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e9 81       	ldd	r30, Y+1	; 0x01
    1762:	fa 81       	ldd	r31, Y+2	; 0x02
    1764:	81 81       	ldd	r24, Z+1	; 0x01
    1766:	88 0f       	add	r24, r24
    1768:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    176a:	e6 e5       	ldi	r30, 0x56	; 86
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	84 e0       	ldi	r24, 0x04	; 4
    1770:	80 83       	st	Z, r24
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <TWI_start>:

void TWI_start(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	84 ea       	ldi	r24, 0xA4	; 164
    178a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	dc f7       	brge	.-10     	; 0x178c <TWI_start+0x10>
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <TWI_stop>:

void TWI_stop(void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    17a4:	e6 e5       	ldi	r30, 0x56	; 86
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	84 e9       	ldi	r24, 0x94	; 148
    17aa:	80 83       	st	Z, r24
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	0f 92       	push	r0
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    17be:	e3 e2       	ldi	r30, 0x23	; 35
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    17c6:	e6 e5       	ldi	r30, 0x56	; 86
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	84 e8       	ldi	r24, 0x84	; 132
    17cc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17ce:	e6 e5       	ldi	r30, 0x56	; 86
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	88 23       	and	r24, r24
    17d6:	dc f7       	brge	.-10     	; 0x17ce <TWI_writeByte+0x1c>
}
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <TWI_readByteWithNACK>:
    /* Read Data */
    return TWDR;
}

uint8 TWI_readByteWithNACK(void)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    17e8:	e6 e5       	ldi	r30, 0x56	; 86
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	84 e8       	ldi	r24, 0x84	; 132
    17ee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17f0:	e6 e5       	ldi	r30, 0x56	; 86
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	88 23       	and	r24, r24
    17f8:	dc f7       	brge	.-10     	; 0x17f0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    17fa:	e3 e2       	ldi	r30, 0x23	; 35
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
}
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1810:	e1 e2       	ldi	r30, 0x21	; 33
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	88 7f       	andi	r24, 0xF8	; 248
    1818:	89 83       	std	Y+1, r24	; 0x01
    return status;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(Uart_ConfigType * ConfigType_PTR)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <UART_init+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <UART_init+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1834:	1a 82       	std	Y+2, r1	; 0x02
    1836:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1838:	eb e2       	ldi	r30, 0x2B	; 43
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1840:	ea e2       	ldi	r30, 0x2A	; 42
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	88 e1       	ldi	r24, 0x18	; 24
    1846:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    1848:	e0 e4       	ldi	r30, 0x40	; 64
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	86 e8       	ldi	r24, 0x86	; 134
    184e:	80 83       	st	Z, r24

	if(ConfigType_PTR->stop_bits_num == ONE_STOP_BIT)
    1850:	eb 81       	ldd	r30, Y+3	; 0x03
    1852:	fc 81       	ldd	r31, Y+4	; 0x04
    1854:	84 81       	ldd	r24, Z+4	; 0x04
    1856:	88 23       	and	r24, r24
    1858:	41 f4       	brne	.+16     	; 0x186a <UART_init+0x46>
	{
		CLEAR_BIT(UCSRC , USBS);
    185a:	a0 e4       	ldi	r26, 0x40	; 64
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e0 e4       	ldi	r30, 0x40	; 64
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	87 7f       	andi	r24, 0xF7	; 247
    1866:	8c 93       	st	X, r24
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <UART_init+0x5e>
	}
	else if(ConfigType_PTR->stop_bits_num == TWO_STOP_BITS)
    186a:	eb 81       	ldd	r30, Y+3	; 0x03
    186c:	fc 81       	ldd	r31, Y+4	; 0x04
    186e:	84 81       	ldd	r24, Z+4	; 0x04
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	39 f4       	brne	.+14     	; 0x1882 <UART_init+0x5e>
	{
		SET_BIT(UCSRC , USBS);
    1874:	a0 e4       	ldi	r26, 0x40	; 64
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e0 e4       	ldi	r30, 0x40	; 64
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 60       	ori	r24, 0x08	; 8
    1880:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ConfigType_PTR->baud_rate * 8UL))) - 1);
    1882:	eb 81       	ldd	r30, Y+3	; 0x03
    1884:	fc 81       	ldd	r31, Y+4	; 0x04
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	a2 81       	ldd	r26, Z+2	; 0x02
    188c:	b3 81       	ldd	r27, Z+3	; 0x03
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	aa 1f       	adc	r26, r26
    1894:	bb 1f       	adc	r27, r27
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	aa 1f       	adc	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	bb 1f       	adc	r27, r27
    18a6:	9c 01       	movw	r18, r24
    18a8:	ad 01       	movw	r20, r26
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	92 e1       	ldi	r25, 0x12	; 18
    18ae:	aa e7       	ldi	r26, 0x7A	; 122
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	7e d0       	rcall	.+252    	; 0x19b4 <__udivmodsi4>
    18b8:	da 01       	movw	r26, r20
    18ba:	c9 01       	movw	r24, r18
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	e0 e4       	ldi	r30, 0x40	; 64

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	89 2f       	mov	r24, r25
    18cc:	99 27       	eor	r25, r25
    18ce:	80 83       	st	Z, r24
    18d0:	e9 e2       	ldi	r30, 0x29	; 41
	UBRRL = ubrr_value;
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	0f 90       	pop	r0
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    18f2:	eb e2       	ldi	r30, 0x2B	; 43
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	80 72       	andi	r24, 0x20	; 32
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	b9 f3       	breq	.-18     	; 0x18f2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1904:	ec e2       	ldi	r30, 0x2C	; 44
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    191c:	eb e2       	ldi	r30, 0x2B	; 43
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 23       	and	r24, r24
    1924:	dc f7       	brge	.-10     	; 0x191c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1926:	ec e2       	ldi	r30, 0x2C	; 44
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <UART_receiveString+0xa>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1946:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	8c 01       	movw	r16, r24
    1954:	02 0f       	add	r16, r18
    1956:	13 1f       	adc	r17, r19
    1958:	dd df       	rcall	.-70     	; 0x1914 <UART_recieveByte>
    195a:	f8 01       	movw	r30, r16
    195c:	80 83       	st	Z, r24
    195e:	0e c0       	rjmp	.+28     	; 0x197c <UART_receiveString+0x4a>
    1960:	89 81       	ldd	r24, Y+1	; 0x01

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
		Str[i] = UART_recieveByte();
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	8c 01       	movw	r16, r24
    1972:	02 0f       	add	r16, r18
    1974:	13 1f       	adc	r17, r19
    1976:	ce df       	rcall	.-100    	; 0x1914 <UART_recieveByte>
    1978:	f8 01       	movw	r30, r16
    197a:	80 83       	st	Z, r24
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	fc 01       	movw	r30, r24
    1988:	e2 0f       	add	r30, r18
    198a:	f3 1f       	adc	r31, r19
    198c:	80 81       	ld	r24, Z
    198e:	83 32       	cpi	r24, 0x23	; 35
    1990:	39 f7       	brne	.-50     	; 0x1960 <UART_receiveString+0x2e>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	fc 01       	movw	r30, r24
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	10 82       	st	Z, r1
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
}
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	08 95       	ret

000019b4 <__udivmodsi4>:
    19b4:	a1 e2       	ldi	r26, 0x21	; 33
    19b6:	1a 2e       	mov	r1, r26
    19b8:	aa 1b       	sub	r26, r26
    19ba:	bb 1b       	sub	r27, r27
    19bc:	fd 01       	movw	r30, r26
    19be:	0d c0       	rjmp	.+26     	; 0x19da <__udivmodsi4_ep>

000019c0 <__udivmodsi4_loop>:
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	ee 1f       	adc	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	a2 17       	cp	r26, r18
    19ca:	b3 07       	cpc	r27, r19
    19cc:	e4 07       	cpc	r30, r20
    19ce:	f5 07       	cpc	r31, r21
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__udivmodsi4_ep>
    19d2:	a2 1b       	sub	r26, r18
    19d4:	b3 0b       	sbc	r27, r19
    19d6:	e4 0b       	sbc	r30, r20
    19d8:	f5 0b       	sbc	r31, r21

000019da <__udivmodsi4_ep>:
    19da:	66 1f       	adc	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	1a 94       	dec	r1
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <__udivmodsi4_loop>
    19e6:	60 95       	com	r22
    19e8:	70 95       	com	r23
    19ea:	80 95       	com	r24
    19ec:	90 95       	com	r25
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	bd 01       	movw	r22, r26
    19f4:	cf 01       	movw	r24, r30
    19f6:	08 95       	ret

000019f8 <__prologue_saves__>:
    19f8:	2f 92       	push	r2
    19fa:	3f 92       	push	r3
    19fc:	4f 92       	push	r4
    19fe:	5f 92       	push	r5
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	ca 1b       	sub	r28, r26
    1a22:	db 0b       	sbc	r29, r27
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	09 94       	ijmp

00001a30 <__epilogue_restores__>:
    1a30:	2a 88       	ldd	r2, Y+18	; 0x12
    1a32:	39 88       	ldd	r3, Y+17	; 0x11
    1a34:	48 88       	ldd	r4, Y+16	; 0x10
    1a36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a42:	b9 84       	ldd	r11, Y+9	; 0x09
    1a44:	c8 84       	ldd	r12, Y+8	; 0x08
    1a46:	df 80       	ldd	r13, Y+7	; 0x07
    1a48:	ee 80       	ldd	r14, Y+6	; 0x06
    1a4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a50:	aa 81       	ldd	r26, Y+2	; 0x02
    1a52:	b9 81       	ldd	r27, Y+1	; 0x01
    1a54:	ce 0f       	add	r28, r30
    1a56:	d1 1d       	adc	r29, r1
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	ed 01       	movw	r28, r26
    1a64:	08 95       	ret

00001a66 <_exit>:
    1a66:	f8 94       	cli

00001a68 <__stop_program>:
    1a68:	ff cf       	rjmp	.-2      	; 0x1a68 <__stop_program>
